// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
$hx_exports["troshx"] = $hx_exports["troshx"] || {};
$hx_exports["troshx"]["tros"] = $hx_exports["troshx"]["tros"] || {};
;$hx_exports["troshx"]["core"] = $hx_exports["troshx"]["core"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			var tmp = this.r;
			var tmp1 = len < 0 ? s : HxOverrides.substr(s,0,pos + len);
			this.r.m = tmp.exec(tmp1);
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
			break;
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case List:
				this.buf.b += "l";
				var v3 = v;
				var _g_head = v3.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i1 = val;
					this.serialize(i1);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v4 = v;
				var k = v4.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v4.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v5.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v6.getReserved(k5) : v6.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i2 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe_Serializer.BASE64.length;
					var this1 = new Array(length);
					b64 = this1;
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i3 = _g11++;
						b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64,i3);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i2 < max) {
					var b1 = v7.b[i2++];
					var b2 = v7.b[i2++];
					var b3 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b1 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCharCode(b64[b3 & 63]);
				}
				if(i2 == max) {
					var b11 = v7.b[i2++];
					var b21 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b11 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[b21 << 2 & 63]);
				} else if(i2 == max + 1) {
					var b12 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b12 >> 2]);
					this.buf.b += String.fromCharCode(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g[2];
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(Type.getEnumName(e));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.b += ":";
			var l1 = v["length"];
			this.buf.b += Std.string(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) {
				var i4 = _g12++;
				this.serialize(v[i4]);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = ["haxe","ds","ArraySort"];
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g1 = from + 1;
		var _g = to;
		while(_g1 < _g) {
			var i = _g1++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	var new_mid;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	var n;
	if(from == mid || mid == to) {
		return;
	}
	n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxevx_vuex_core_IBuildListed = function() { };
$hxClasses["haxevx.vuex.core.IBuildListed"] = haxevx_vuex_core_IBuildListed;
haxevx_vuex_core_IBuildListed.__name__ = ["haxevx","vuex","core","IBuildListed"];
var haxevx_vuex_core_IPayload = function() { };
$hxClasses["haxevx.vuex.core.IPayload"] = haxevx_vuex_core_IPayload;
haxevx_vuex_core_IPayload.__name__ = ["haxevx","vuex","core","IPayload"];
haxevx_vuex_core_IPayload.prototype = {
	__class__: haxevx_vuex_core_IPayload
};
var haxevx_vuex_core_NoneT = function() { };
$hxClasses["haxevx.vuex.core.NoneT"] = haxevx_vuex_core_NoneT;
haxevx_vuex_core_NoneT.__name__ = ["haxevx","vuex","core","NoneT"];
haxevx_vuex_core_NoneT.prototype = {
	toString: function() {
		return "NoneT";
	}
	,__class__: haxevx_vuex_core_NoneT
};
var haxevx_vuex_core_Singletons = function() { };
$hxClasses["haxevx.vuex.core.Singletons"] = haxevx_vuex_core_Singletons;
haxevx_vuex_core_Singletons.__name__ = ["haxevx","vuex","core","Singletons"];
haxevx_vuex_core_Singletons.addLookup = function(classeName,from) {
	var arr;
	var _this = haxevx_vuex_core_Singletons.NAMES;
	if(__map_reserved[classeName] != null ? _this.existsReserved(classeName) : _this.h.hasOwnProperty(classeName)) {
		var _this1 = haxevx_vuex_core_Singletons.NAMES;
		if(__map_reserved[classeName] != null) {
			arr = _this1.getReserved(classeName);
		} else {
			arr = _this1.h[classeName];
		}
	} else {
		arr = [];
		var _this2 = haxevx_vuex_core_Singletons.NAMES;
		if(__map_reserved[classeName] != null) {
			_this2.setReserved(classeName,arr);
		} else {
			_this2.h[classeName] = arr;
		}
	}
	arr.push(from);
};
haxevx_vuex_core_Singletons.setAsSingleton = function(instance) {
	var _this = haxevx_vuex_core_Singletons.SINGLETON_CACHE;
	var o = instance;
	var key = Type.getClassName(o == null ? null : js_Boot.getClass(o));
	var value = instance;
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
	return instance;
};
haxevx_vuex_core_Singletons.getSingleton = function(classeName) {
	var _this = haxevx_vuex_core_Singletons.SINGLETON_CACHE;
	if(__map_reserved[classeName] != null) {
		return _this.getReserved(classeName);
	} else {
		return _this.h[classeName];
	}
};
haxevx_vuex_core_Singletons.getClassNameOfInstance = function(instance) {
	var o = instance;
	return Type.getClassName(o == null ? null : js_Boot.getClass(o));
};
haxevx_vuex_core_Singletons.clearLookups = function() {
	var k = haxevx_vuex_core_Singletons.NAMES.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		var _this = haxevx_vuex_core_Singletons.SINGLETON_CACHE;
		if((__map_reserved[k1] != null ? _this.getReserved(k1) : _this.h[k1]) == null) {
			var _this1 = haxevx_vuex_core_Singletons.NAMES;
			console.log("Warning:: Could not find singleton dependency from/to: [" + Std.string(__map_reserved[k1] != null ? _this1.getReserved(k1) : _this1.h[k1]) + "] -> " + k1);
		}
	}
	haxevx_vuex_core_Singletons.NAMES = new haxe_ds_StringMap();
};
var haxevx_vuex_core_VComponent = function() {
	this._Init();
};
$hxClasses["haxevx.vuex.core.VComponent"] = haxevx_vuex_core_VComponent;
haxevx_vuex_core_VComponent.__name__ = ["haxevx","vuex","core","VComponent"];
haxevx_vuex_core_VComponent.__super__ = Object;
haxevx_vuex_core_VComponent.prototype = $extend(Object.prototype,{
	_Init: function() {
	}
	,get__props: function() {
		return this;
	}
	,get__vData: function() {
		return this.$data;
	}
	,PropsData: function() {
		return null;
	}
	,Data: function() {
		return null;
	}
	,Created: function() {
	}
	,BeforeCreate: function() {
	}
	,BeforeDestroy: function() {
	}
	,Destroy: function() {
	}
	,BeforeMount: function() {
	}
	,Mounted: function() {
	}
	,BeforeUpdate: function() {
	}
	,Updated: function() {
	}
	,Activated: function() {
	}
	,Deactivated: function() {
	}
	,El: function() {
		return null;
	}
	,Render: function(c) {
		return null;
	}
	,Template: function() {
		return null;
	}
	,Components: function() {
		return null;
	}
	,GetDefaultPropSettings: function() {
		return null;
	}
	,GetDefaultPropValues: function() {
		return null;
	}
	,__class__: haxevx_vuex_core_VComponent
});
var haxevx_vuex_core_VxBoot = function() {
};
$hxClasses["haxevx.vuex.core.VxBoot"] = haxevx_vuex_core_VxBoot;
haxevx_vuex_core_VxBoot.__name__ = ["haxevx","vuex","core","VxBoot"];
haxevx_vuex_core_VxBoot.registerModuleWithStore = function(name,mod,store) {
	mod._Init(name + "/");
	store[name] = mod;
	store.registerModule(name,mod);
	haxevx_vuex_core_VxBoot.clearModuleInjStack(store);
};
haxevx_vuex_core_VxBoot.clearModuleInjStack = function(store) {
	var storeGetters = store.getters;
	var stack = haxevx_vuex_core_ModuleStack.stack;
	var i = stack.length;
	while(--i > -1) stack[i]._InjNative(storeGetters);
	haxevx_vuex_core_ModuleStack.stack = [];
};
haxevx_vuex_core_VxBoot.notifyStarted = function() {
	haxevx_vuex_core_Singletons.clearLookups();
};
haxevx_vuex_core_VxBoot.getRenderComponentMethod = function(nativeComp) {
	return function(h) {
		return h(nativeComp,null,null);
	};
};
haxevx_vuex_core_VxBoot.prototype = {
	startStore: function(storeParams) {
		if(this.STORE != null) {
			throw new js__$Boot_HaxeError("Vuex store already started! Only 1 store is allowed");
		}
		var metaFields;
		var md;
		var noNamespaceGetterProps;
		var store = new Vuex.Store(storeParams);
		var o;
		var storeGetters = store.getters;
		var stack = haxevx_vuex_core_ModuleStack.stack;
		var i = stack.length;
		while(--i > -1) stack[i]._InjNative(storeGetters);
		stack = [];
		if(storeParams.modules != null) {
			var _g = 0;
			o = storeParams.modules;
			var _g1 = Reflect.fields(o);
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				var m = Reflect.field(o,p);
				md = storeParams[p];
				store[p] = md;
			}
		}
		this.STORE = store;
		return store;
	}
	,startVueWithRootComponent: function(el,rootComponent) {
		var bootVueParams = { };
		bootVueParams.el = el;
		if(this.STORE != null) {
			bootVueParams["store"] = this.STORE;
		}
		bootVueParams.render = haxevx_vuex_core_VxBoot.getRenderComponentMethod(rootComponent);
		var vm = new Vue(bootVueParams);
		haxevx_vuex_core_VxBoot.notifyStarted();
		return vm;
	}
	,__class__: haxevx_vuex_core_VxBoot
};
var haxevx_vuex_core_ModuleStack = function() { };
$hxClasses["haxevx.vuex.core.ModuleStack"] = haxevx_vuex_core_ModuleStack;
haxevx_vuex_core_ModuleStack.__name__ = ["haxevx","vuex","core","ModuleStack"];
var haxevx_vuex_native_ActionContext = function() { };
$hxClasses["haxevx.vuex.native.ActionContext"] = haxevx_vuex_native_ActionContext;
haxevx_vuex_native_ActionContext.__name__ = ["haxevx","vuex","native","ActionContext"];
haxevx_vuex_native_ActionContext.prototype = {
	__class__: haxevx_vuex_native_ActionContext
};
var haxevx_vuex_util_VHTMacros = function() { };
$hxClasses["haxevx.vuex.util.VHTMacros"] = haxevx_vuex_util_VHTMacros;
haxevx_vuex_util_VHTMacros.__name__ = ["haxevx","vuex","util","VHTMacros"];
var hxGeomAlgo_Bayazit = function() { };
$hxClasses["hxGeomAlgo.Bayazit"] = hxGeomAlgo_Bayazit;
hxGeomAlgo_Bayazit.__name__ = ["hxGeomAlgo","Bayazit"];
hxGeomAlgo_Bayazit.decomposePoly = function(simplePoly) {
	var res = [];
	if(simplePoly.length < 3) {
		return res;
	}
	hxGeomAlgo_Bayazit.poly = [];
	var _g = 0;
	while(_g < simplePoly.length) {
		var p = simplePoly[_g];
		++_g;
		hxGeomAlgo_Bayazit.poly.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(p.x,p.y));
	}
	hxGeomAlgo_Bayazit.reversed = hxGeomAlgo_PolyTools.makeCW(hxGeomAlgo_Bayazit.poly);
	hxGeomAlgo_Bayazit.reflexVertices.length = 0;
	hxGeomAlgo_Bayazit.steinerPoints.length = 0;
	hxGeomAlgo_Bayazit._decomposePoly(hxGeomAlgo_Bayazit.poly,res);
	return res;
};
hxGeomAlgo_Bayazit._decomposePoly = function(poly,polys) {
	var upperInt = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
	var lowerInt = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
	var p = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
	var closestVert = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
	var upperDist = 0;
	var lowerDist = 0;
	var d = 0;
	var closestDist = 0;
	var upperIdx = 0;
	var lowerIdx = 0;
	var closestIdx = 0;
	var upperPoly = [];
	var lowerPoly = [];
	var _g1 = 0;
	var _g = poly.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(hxGeomAlgo_PolyTools.isReflex(poly,i)) {
			hxGeomAlgo_Bayazit.reflexVertices.push(poly[i]);
			lowerDist = Infinity;
			upperDist = lowerDist;
			var _g3 = 0;
			var _g2 = poly.length;
			while(_g3 < _g2) {
				var j = _g3++;
				var tmp;
				var idx = i - 1;
				var len = poly.length;
				while(idx < 0) idx += len;
				var p1 = poly[idx % len];
				var idx1 = i;
				var len1 = poly.length;
				while(idx1 < 0) idx1 += len1;
				var a = poly[idx1 % len1];
				var idx2 = j;
				var len2 = poly.length;
				while(idx2 < 0) idx2 += len2;
				var b = poly[idx2 % len2];
				if((a.x - p1.x) * (b.y - p1.y) - (b.x - p1.x) * (a.y - p1.y) > 0) {
					var idx3 = i - 1;
					var len3 = poly.length;
					while(idx3 < 0) idx3 += len3;
					var p2 = poly[idx3 % len3];
					var idx4 = i;
					var len4 = poly.length;
					while(idx4 < 0) idx4 += len4;
					var a1 = poly[idx4 % len4];
					var idx5 = j - 1;
					var len5 = poly.length;
					while(idx5 < 0) idx5 += len5;
					var b1 = poly[idx5 % len5];
					tmp = (a1.x - p2.x) * (b1.y - p2.y) - (b1.x - p2.x) * (a1.y - p2.y) <= 0;
				} else {
					tmp = false;
				}
				if(tmp) {
					var idx6 = i - 1;
					var len6 = poly.length;
					while(idx6 < 0) idx6 += len6;
					var p3 = poly[idx6 % len6];
					var idx7 = i;
					var len7 = poly.length;
					while(idx7 < 0) idx7 += len7;
					var p4 = poly[idx7 % len7];
					var idx8 = j;
					var len8 = poly.length;
					while(idx8 < 0) idx8 += len8;
					var p5 = poly[idx8 % len8];
					var idx9 = j - 1;
					var len9 = poly.length;
					while(idx9 < 0) idx9 += len9;
					p = hxGeomAlgo_PolyTools.intersection(p3,p4,p5,poly[idx9 % len9]);
					var idx10 = i + 1;
					var len10 = poly.length;
					while(idx10 < 0) idx10 += len10;
					var p6 = poly[idx10 % len10];
					var idx11 = i;
					var len11 = poly.length;
					while(idx11 < 0) idx11 += len11;
					var a2 = poly[idx11 % len11];
					if((a2.x - p6.x) * (p.y - p6.y) - (p.x - p6.x) * (a2.y - p6.y) < 0) {
						var v = poly[i];
						var x = v.x - p.x;
						var x1 = v.y - p.y;
						d = x * x + x1 * x1;
						if(d < lowerDist) {
							lowerDist = d;
							lowerInt = p;
							lowerIdx = j;
						}
					}
				}
				var tmp1;
				var idx12 = i + 1;
				var len12 = poly.length;
				while(idx12 < 0) idx12 += len12;
				var p7 = poly[idx12 % len12];
				var idx13 = i;
				var len13 = poly.length;
				while(idx13 < 0) idx13 += len13;
				var a3 = poly[idx13 % len13];
				var idx14 = j + 1;
				var len14 = poly.length;
				while(idx14 < 0) idx14 += len14;
				var b2 = poly[idx14 % len14];
				if((a3.x - p7.x) * (b2.y - p7.y) - (b2.x - p7.x) * (a3.y - p7.y) > 0) {
					var idx15 = i + 1;
					var len15 = poly.length;
					while(idx15 < 0) idx15 += len15;
					var p8 = poly[idx15 % len15];
					var idx16 = i;
					var len16 = poly.length;
					while(idx16 < 0) idx16 += len16;
					var a4 = poly[idx16 % len16];
					var idx17 = j;
					var len17 = poly.length;
					while(idx17 < 0) idx17 += len17;
					var b3 = poly[idx17 % len17];
					tmp1 = (a4.x - p8.x) * (b3.y - p8.y) - (b3.x - p8.x) * (a4.y - p8.y) <= 0;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					var idx18 = i + 1;
					var len18 = poly.length;
					while(idx18 < 0) idx18 += len18;
					var p9 = poly[idx18 % len18];
					var idx19 = i;
					var len19 = poly.length;
					while(idx19 < 0) idx19 += len19;
					var p10 = poly[idx19 % len19];
					var idx20 = j;
					var len20 = poly.length;
					while(idx20 < 0) idx20 += len20;
					var p11 = poly[idx20 % len20];
					var idx21 = j + 1;
					var len21 = poly.length;
					while(idx21 < 0) idx21 += len21;
					p = hxGeomAlgo_PolyTools.intersection(p9,p10,p11,poly[idx21 % len21]);
					var idx22 = i - 1;
					var len22 = poly.length;
					while(idx22 < 0) idx22 += len22;
					var p12 = poly[idx22 % len22];
					var idx23 = i;
					var len23 = poly.length;
					while(idx23 < 0) idx23 += len23;
					var a5 = poly[idx23 % len23];
					if((a5.x - p12.x) * (p.y - p12.y) - (p.x - p12.x) * (a5.y - p12.y) > 0) {
						var v1 = poly[i];
						var x2 = v1.x - p.x;
						var x3 = v1.y - p.y;
						d = x2 * x2 + x3 * x3;
						if(d < upperDist) {
							upperDist = d;
							upperInt = p;
							upperIdx = j;
						}
					}
				}
			}
			if(lowerIdx == (upperIdx + 1) % poly.length) {
				p.x = (lowerInt.x + upperInt.x) / 2;
				p.y = (lowerInt.y + upperInt.y) / 2;
				hxGeomAlgo_Bayazit.steinerPoints.push(p);
				if(i < upperIdx) {
					var _g31 = i;
					var _g21 = upperIdx + 1;
					while(_g31 < _g21) {
						var k = _g31++;
						lowerPoly.push(poly[k]);
					}
					lowerPoly.push(p);
					upperPoly.push(p);
					if(lowerIdx != 0) {
						var _g32 = lowerIdx;
						var _g22 = poly.length;
						while(_g32 < _g22) {
							var k1 = _g32++;
							upperPoly.push(poly[k1]);
						}
					}
					var _g33 = 0;
					var _g23 = i + 1;
					while(_g33 < _g23) {
						var k2 = _g33++;
						upperPoly.push(poly[k2]);
					}
				} else {
					if(i != 0) {
						var _g34 = i;
						var _g24 = poly.length;
						while(_g34 < _g24) {
							var k3 = _g34++;
							lowerPoly.push(poly[k3]);
						}
					}
					var _g35 = 0;
					var _g25 = upperIdx + 1;
					while(_g35 < _g25) {
						var k4 = _g35++;
						lowerPoly.push(poly[k4]);
					}
					lowerPoly.push(p);
					upperPoly.push(p);
					var _g36 = lowerIdx;
					var _g26 = i + 1;
					while(_g36 < _g26) {
						var k5 = _g36++;
						upperPoly.push(poly[k5]);
					}
				}
			} else {
				if(lowerIdx > upperIdx) {
					upperIdx += poly.length;
				}
				closestDist = Infinity;
				var _g37 = lowerIdx;
				var _g27 = upperIdx + 1;
				while(_g37 < _g27) {
					var j1 = _g37++;
					var tmp2;
					var idx24 = i - 1;
					var len24 = poly.length;
					while(idx24 < 0) idx24 += len24;
					var p13 = poly[idx24 % len24];
					var idx25 = i;
					var len25 = poly.length;
					while(idx25 < 0) idx25 += len25;
					var a6 = poly[idx25 % len25];
					var idx26 = j1;
					var len26 = poly.length;
					while(idx26 < 0) idx26 += len26;
					var b4 = poly[idx26 % len26];
					if((a6.x - p13.x) * (b4.y - p13.y) - (b4.x - p13.x) * (a6.y - p13.y) >= 0) {
						var idx27 = i + 1;
						var len27 = poly.length;
						while(idx27 < 0) idx27 += len27;
						var p14 = poly[idx27 % len27];
						var idx28 = i;
						var len28 = poly.length;
						while(idx28 < 0) idx28 += len28;
						var a7 = poly[idx28 % len28];
						var idx29 = j1;
						var len29 = poly.length;
						while(idx29 < 0) idx29 += len29;
						var b5 = poly[idx29 % len29];
						tmp2 = (a7.x - p14.x) * (b5.y - p14.y) - (b5.x - p14.x) * (a7.y - p14.y) <= 0;
					} else {
						tmp2 = false;
					}
					if(tmp2) {
						var idx30 = i;
						var len30 = poly.length;
						while(idx30 < 0) idx30 += len30;
						var v2 = poly[idx30 % len30];
						var idx31 = j1;
						var len31 = poly.length;
						while(idx31 < 0) idx31 += len31;
						var w = poly[idx31 % len31];
						var x4 = v2.x - w.x;
						var x5 = v2.y - w.y;
						d = x4 * x4 + x5 * x5;
						if(d < closestDist) {
							closestDist = d;
							var idx32 = j1;
							var len32 = poly.length;
							while(idx32 < 0) idx32 += len32;
							closestVert = poly[idx32 % len32];
							closestIdx = j1 % poly.length;
						}
					}
				}
				if(i < closestIdx) {
					var _g38 = i;
					var _g28 = closestIdx + 1;
					while(_g38 < _g28) {
						var k6 = _g38++;
						lowerPoly.push(poly[k6]);
					}
					if(closestIdx != 0) {
						var _g39 = closestIdx;
						var _g29 = poly.length;
						while(_g39 < _g29) {
							var k7 = _g39++;
							upperPoly.push(poly[k7]);
						}
					}
					var _g310 = 0;
					var _g210 = i + 1;
					while(_g310 < _g210) {
						var k8 = _g310++;
						upperPoly.push(poly[k8]);
					}
				} else {
					if(i != 0) {
						var _g311 = i;
						var _g211 = poly.length;
						while(_g311 < _g211) {
							var k9 = _g311++;
							lowerPoly.push(poly[k9]);
						}
					}
					var _g312 = 0;
					var _g212 = closestIdx + 1;
					while(_g312 < _g212) {
						var k10 = _g312++;
						lowerPoly.push(poly[k10]);
					}
					var _g313 = closestIdx;
					var _g213 = i + 1;
					while(_g313 < _g213) {
						var k11 = _g313++;
						upperPoly.push(poly[k11]);
					}
				}
			}
			if(lowerPoly.length < upperPoly.length) {
				hxGeomAlgo_Bayazit._decomposePoly(lowerPoly,polys);
				hxGeomAlgo_Bayazit._decomposePoly(upperPoly,polys);
			} else {
				hxGeomAlgo_Bayazit._decomposePoly(upperPoly,polys);
				hxGeomAlgo_Bayazit._decomposePoly(lowerPoly,polys);
			}
			return;
		}
	}
	polys.push(poly);
};
var hxGeomAlgo_HomogCoord = function(x,y,w) {
	if(w == null) {
		w = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.w = w;
};
$hxClasses["hxGeomAlgo.HomogCoord"] = hxGeomAlgo_HomogCoord;
hxGeomAlgo_HomogCoord.__name__ = ["hxGeomAlgo","HomogCoord"];
hxGeomAlgo_HomogCoord.det = function(p,q,r) {
	return p.w * q.perpdot(r) - q.w * p.perpdot(r) + r.w * p.perpdot(q);
};
hxGeomAlgo_HomogCoord.ccw = function(p,q,r) {
	return hxGeomAlgo_HomogCoord.det(p,q,r) > 0;
};
hxGeomAlgo_HomogCoord.cw = function(p,q,r) {
	return hxGeomAlgo_HomogCoord.det(p,q,r) < 0;
};
hxGeomAlgo_HomogCoord.prototype = {
	add: function(p) {
		this.x += p.x;
		this.y += p.y;
		return this;
	}
	,sub: function(p) {
		this.x -= p.x;
		this.y -= p.y;
		return this;
	}
	,neg: function() {
		this.w = -this.w;
		this.x = -this.x;
		this.y = -this.y;
		return this;
	}
	,mul: function(m) {
		this.w *= m;
		this.x *= m;
		this.y *= m;
		return this;
	}
	,div: function(m) {
		this.w /= m;
		this.x /= m;
		this.y /= m;
		return this;
	}
	,normalize: function() {
		return this.div(this.length());
	}
	,lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,length: function() {
		return Math.sqrt(this.lengthSquared());
	}
	,perp: function() {
		var tmp = -this.y;
		this.y = this.x;
		this.x = tmp;
		return this;
	}
	,dotPoint: function(p) {
		return this.w + this.x * p.x + this.y * p.y;
	}
	,dot: function(p) {
		return this.w * p.w + this.x * p.x + this.y * p.y;
	}
	,perpdot: function(p) {
		return this.x * p.y - this.y * p.x;
	}
	,dotperp: function(p) {
		return -this.x * p.y + this.y * p.x;
	}
	,equals: function(p) {
		if(p.w * this.x == this.w * p.x) {
			return p.w * this.y == this.w * p.y;
		} else {
			return false;
		}
	}
	,left: function(p) {
		return this.dotPoint(p) > 0;
	}
	,right: function(p) {
		return this.dotPoint(p) < 0;
	}
	,toScreen: function() {
		return hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(this.x / this.w,-this.y / this.w);
	}
	,toPoint: function() {
		return hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(this.x / this.w,this.y / this.w);
	}
	,meet: function(p) {
		return new hxGeomAlgo_HomogCoord(p.w * this.y - this.w * p.y,this.w * p.x - p.w * this.x,this.x * p.y - this.y * p.x);
	}
	,meetPoint: function(p) {
		return new hxGeomAlgo_HomogCoord(this.y - this.w * p.y,this.w * p.x - this.x,this.x * p.y - this.y * p.x);
	}
	,toString: function() {
		return " (w:" + this.w + "; x:" + this.x + ", y:" + this.y + ")  ";
	}
	,__class__: hxGeomAlgo_HomogCoord
};
var hxGeomAlgo__$HxPoint_HxPoint_$Impl_$ = {};
$hxClasses["hxGeomAlgo._HxPoint.HxPoint_Impl_"] = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$;
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.__name__ = ["hxGeomAlgo","_HxPoint","HxPoint_Impl_"];
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.get_x = function(this1) {
	return this1.x;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.set_x = function(this1,value) {
	return this1.x = value;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.get_y = function(this1) {
	return this1.y;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.set_y = function(this1,value) {
	return this1.y = value;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new hxGeomAlgo_HxPointData(x,y);
	return this1;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.setTo = function(this1,newX,newY) {
	this1.x = newX;
	this1.y = newY;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.equals = function(this1,p) {
	if(this1 != null && p != null && p.x == this1.x) {
		return p.y == this1.y;
	} else {
		return false;
	}
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.notEequals = function(this1,p) {
	return !(this1 != null && p != null && p.x == this1.x && p.y == this1.y);
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.clone = function(this1) {
	return hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(this1.x,this1.y);
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.toString = function(this1) {
	return "(" + this1.x + ", " + this1.y + ")";
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.fromPointStruct = function(p) {
	return hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(p.x,p.y);
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.toPointStruct = function(this1) {
	return { x : this1.x, y : this1.y};
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.areEqual = function(p,q) {
	if(p != null && q != null && q.x == p.x) {
		return q.y == p.y;
	} else {
		return false;
	}
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.areNotEqual = function(p,q) {
	return !(p != null && q != null && q.x == p.x && q.y == p.y);
};
var hxGeomAlgo_HxPointData = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["hxGeomAlgo.HxPointData"] = hxGeomAlgo_HxPointData;
hxGeomAlgo_HxPointData.__name__ = ["hxGeomAlgo","HxPointData"];
hxGeomAlgo_HxPointData.prototype = {
	__class__: hxGeomAlgo_HxPointData
};
var hxGeomAlgo_PolyTools = function() { };
$hxClasses["hxGeomAlgo.PolyTools"] = hxGeomAlgo_PolyTools;
hxGeomAlgo_PolyTools.__name__ = ["hxGeomAlgo","PolyTools"];
hxGeomAlgo_PolyTools.isCCW = function(poly) {
	if(poly.length <= 2) {
		return true;
	}
	var signedArea = 0.;
	var _g1 = 0;
	var _g = poly.length;
	while(_g1 < _g) {
		var i = _g1++;
		var idx = i - 1;
		var len = poly.length;
		while(idx < 0) idx += len;
		var signedArea1 = poly[idx % len].x * poly[i].y;
		var poly1 = poly[i].x;
		var idx1 = i - 1;
		var len1 = poly.length;
		while(idx1 < 0) idx1 += len1;
		signedArea += signedArea1 - poly1 * poly[idx1 % len1].y;
	}
	return signedArea < 0;
};
hxGeomAlgo_PolyTools.makeCCW = function(poly) {
	var reversed = false;
	if(!hxGeomAlgo_PolyTools.isCCW(poly)) {
		poly.reverse();
		reversed = true;
	}
	return reversed;
};
hxGeomAlgo_PolyTools.makeCW = function(poly) {
	var reversed = false;
	if(hxGeomAlgo_PolyTools.isCCW(poly)) {
		poly.reverse();
		reversed = true;
	}
	return reversed;
};
hxGeomAlgo_PolyTools.isConvex = function(poly) {
	var isPositive = null;
	var _g1 = 0;
	var _g = poly.length;
	while(_g1 < _g) {
		var i = _g1++;
		var lower = i == 0 ? poly.length - 1 : i - 1;
		var middle = i;
		var upper = i == poly.length - 1 ? 0 : i + 1;
		var dx0 = poly[middle].x - poly[lower].x;
		var dy0 = poly[middle].y - poly[lower].y;
		var dx1 = poly[upper].x - poly[middle].x;
		var dy1 = poly[upper].y - poly[middle].y;
		var cross = dx0 * dy1 - dx1 * dy0;
		var newIsPositive = cross > 0;
		if(cross == 0) {
			continue;
		}
		if(isPositive == null) {
			isPositive = newIsPositive;
		} else if(isPositive != newIsPositive) {
			return false;
		}
	}
	return true;
};
hxGeomAlgo_PolyTools.isSimple = function(poly) {
	var len = poly.length;
	if(len <= 3) {
		return true;
	}
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		var p0 = i;
		var p1 = i == len - 1 ? 0 : i + 1;
		var _g3 = i + 1;
		var _g2 = len;
		while(_g3 < _g2) {
			var j = _g3++;
			var q0 = j;
			var q1 = j == len - 1 ? 0 : j + 1;
			var intersection = hxGeomAlgo_PolyTools.segmentIntersect(poly[p0],poly[p1],poly[q0],poly[q1]);
			var tmp;
			var tmp1;
			if(intersection != null) {
				var tmp2;
				var p = poly[p0];
				if(!(intersection != null && p != null && p.x == intersection.x && p.y == intersection.y)) {
					var p2 = poly[p1];
					if(intersection != null && p2 != null && p2.x == intersection.x) {
						tmp2 = p2.y == intersection.y;
					} else {
						tmp2 = false;
					}
				} else {
					tmp2 = true;
				}
				tmp1 = !tmp2;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var tmp3;
				var p3 = poly[q0];
				if(!(intersection != null && p3 != null && p3.x == intersection.x && p3.y == intersection.y)) {
					var p4 = poly[q1];
					if(intersection != null && p4 != null && p4.x == intersection.x) {
						tmp3 = p4.y == intersection.y;
					} else {
						tmp3 = false;
					}
				} else {
					tmp3 = true;
				}
				tmp = !tmp3;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
		}
	}
	return true;
};
hxGeomAlgo_PolyTools.segmentIntersect = function(p0,p1,q0,q1) {
	var intersectionPoint;
	var a1;
	var a2;
	var b1;
	var b2;
	var c1;
	var c2;
	a1 = p1.y - p0.y;
	b1 = p0.x - p1.x;
	c1 = p1.x * p0.y - p0.x * p1.y;
	a2 = q1.y - q0.y;
	b2 = q0.x - q1.x;
	c2 = q1.x * q0.y - q0.x * q1.y;
	var denom = a1 * b2 - a2 * b1;
	if(denom == 0) {
		return null;
	}
	intersectionPoint = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
	intersectionPoint.x = (b1 * c2 - b2 * c1) / denom;
	intersectionPoint.y = (a2 * c1 - a1 * c2) / denom;
	var x = intersectionPoint.x - p1.x;
	var x1 = intersectionPoint.y - p1.y;
	var x2 = p0.x - p1.x;
	var x3 = p0.y - p1.y;
	if(x * x + x1 * x1 > x2 * x2 + x3 * x3) {
		return null;
	}
	var x4 = intersectionPoint.x - p0.x;
	var x5 = intersectionPoint.y - p0.y;
	var x6 = p0.x - p1.x;
	var x7 = p0.y - p1.y;
	if(x4 * x4 + x5 * x5 > x6 * x6 + x7 * x7) {
		return null;
	}
	var x8 = intersectionPoint.x - q1.x;
	var x9 = intersectionPoint.y - q1.y;
	var x10 = q0.x - q1.x;
	var x11 = q0.y - q1.y;
	if(x8 * x8 + x9 * x9 > x10 * x10 + x11 * x11) {
		return null;
	}
	var x12 = intersectionPoint.x - q0.x;
	var x13 = intersectionPoint.y - q0.y;
	var x14 = q0.x - q1.x;
	var x15 = q0.y - q1.y;
	if(x12 * x12 + x13 * x13 > x14 * x14 + x15 * x15) {
		return null;
	}
	return intersectionPoint;
};
hxGeomAlgo_PolyTools.findDuplicatePoints = function(poly,consecutiveOnly,wrapAround) {
	if(wrapAround == null) {
		wrapAround = true;
	}
	if(consecutiveOnly == null) {
		consecutiveOnly = true;
	}
	var len = poly.length;
	if(len <= 1) {
		return [];
	}
	var dupIndices = [];
	var _g1 = 0;
	var _g = len - 1;
	while(_g1 < _g) {
		var i = _g1++;
		var j = i + 1;
		while(j < len) {
			var this1 = poly[i];
			var p = poly[j];
			var foundDup = this1 != null && p != null && p.x == this1.x && p.y == this1.y;
			if(foundDup) {
				dupIndices.push(i);
			}
			if(consecutiveOnly || foundDup && !consecutiveOnly) {
				break;
			}
			++j;
		}
	}
	var tmp;
	if(wrapAround && consecutiveOnly) {
		var this2 = poly[0];
		var p1 = poly[len - 1];
		if(this2 != null && p1 != null && p1.x == this2.x) {
			tmp = p1.y == this2.y;
		} else {
			tmp = false;
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		dupIndices.push(len - 1);
	}
	return dupIndices;
};
hxGeomAlgo_PolyTools.intersection = function(p1,p2,q1,q2) {
	var res = null;
	var a1 = p2.y - p1.y;
	var b1 = p1.x - p2.x;
	var c1 = a1 * p1.x + b1 * p1.y;
	var a2 = q2.y - q1.y;
	var b2 = q1.x - q2.x;
	var c2 = a2 * q1.x + b2 * q1.y;
	var det = a1 * b2 - a2 * b1;
	if(!(Math.abs(det) <= hxGeomAlgo_PolyTools.EPSILON)) {
		res = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
		res.x = (b2 * c1 - b1 * c2) / det;
		res.y = (a1 * c2 - a2 * c1) / det;
	}
	return res;
};
hxGeomAlgo_PolyTools.isReflex = function(poly,idx) {
	var idx1 = idx - 1;
	var len = poly.length;
	while(idx1 < 0) idx1 += len;
	var p = poly[idx1 % len];
	var idx2 = idx;
	var len1 = poly.length;
	while(idx2 < 0) idx2 += len1;
	var a = poly[idx2 % len1];
	var idx3 = idx + 1;
	var len2 = poly.length;
	while(idx3 < 0) idx3 += len2;
	var b = poly[idx3 % len2];
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) < 0;
};
hxGeomAlgo_PolyTools.at = function(poly,idx) {
	var len = poly.length;
	while(idx < 0) idx += len;
	return poly[idx % len];
};
hxGeomAlgo_PolyTools.side = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y);
};
hxGeomAlgo_PolyTools.isLeft = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) > 0;
};
hxGeomAlgo_PolyTools.isLeftOrOn = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) >= 0;
};
hxGeomAlgo_PolyTools.isRight = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) < 0;
};
hxGeomAlgo_PolyTools.isRightOrOn = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) <= 0;
};
hxGeomAlgo_PolyTools.isCollinear = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) == 0;
};
hxGeomAlgo_PolyTools.distance = function(v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	return Math.sqrt(x * x + x1 * x1);
};
hxGeomAlgo_PolyTools.distanceToSegment = function(p,v,w) {
	return Math.sqrt(hxGeomAlgo_PolyTools.distanceToSegmentSquared(p,v,w));
};
hxGeomAlgo_PolyTools.distanceSquared = function(v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	return x * x + x1 * x1;
};
hxGeomAlgo_PolyTools.distanceToSegmentSquared = function(p,v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	var l2 = x * x + x1 * x1;
	if(l2 == 0) {
		var x2 = p.x - v.x;
		var x3 = p.y - v.y;
		return x2 * x2 + x3 * x3;
	}
	var t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;
	if(t < 0) {
		var x4 = p.x - v.x;
		var x5 = p.y - v.y;
		return x4 * x4 + x5 * x5;
	}
	if(t > 1) {
		var x6 = p.x - w.x;
		var x7 = p.y - w.y;
		return x6 * x6 + x7 * x7;
	}
	var this1 = hxGeomAlgo_PolyTools.point;
	this1.x = v.x + t * (w.x - v.x);
	this1.y = v.y + t * (w.y - v.y);
	var w1 = hxGeomAlgo_PolyTools.point;
	var x8 = p.x - w1.x;
	var x9 = p.y - w1.y;
	return x8 * x8 + x9 * x9;
};
hxGeomAlgo_PolyTools.meet = function(p,q) {
	return new hxGeomAlgo_HomogCoord(p.y - q.y,q.x - p.x,p.x * q.y - p.y * q.x);
};
hxGeomAlgo_PolyTools.dot = function(p,q) {
	return p.x * q.x + p.y * q.y;
};
hxGeomAlgo_PolyTools.sqr = function(x) {
	return x * x;
};
hxGeomAlgo_PolyTools.eq = function(a,b) {
	return Math.abs(a - b) <= hxGeomAlgo_PolyTools.EPSILON;
};
hxGeomAlgo_PolyTools.clear = function(array) {
	array.length = 0;
};
hxGeomAlgo_PolyTools.toFloatArray = function(poly,out) {
	if(out != null) {
		out = out;
	} else {
		out = [];
	}
	var _g = 0;
	while(_g < poly.length) {
		var p = poly[_g];
		++_g;
		out.push(p.x);
		out.push(p.y);
	}
	return out;
};
hxGeomAlgo_PolyTools.reverseFloatArray = function(poly,inPlace) {
	if(inPlace == null) {
		inPlace = false;
	}
	var res = inPlace ? poly : [];
	var nPoints = poly.length >> 1;
	var _g1 = 0;
	var _g = nPoints;
	while(_g1 < _g) {
		var i = _g1++;
		var xPos = (nPoints - i - 1) * 2;
		res[i * 2] = poly[xPos];
		res[i * 2 + 1] = poly[xPos + 1];
	}
	return res;
};
hxGeomAlgo_PolyTools.flatten = function(array,out) {
	var res = out != null ? out : [];
	var _g = 0;
	while(_g < array.length) {
		var arr = array[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < arr.length) {
			var item = arr[_g1];
			++_g1;
			res.push(item);
		}
	}
	return res;
};
hxGeomAlgo_PolyTools.toPointArray = function(poly,out) {
	if(out != null) {
		out = out;
	} else {
		out = [];
	}
	var size = poly.length;
	if(poly.length % 2 == 1) {
		--size;
	}
	var _g1 = 0;
	var _g = size >> 1;
	while(_g1 < _g) {
		var i = _g1++;
		out.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(poly[i * 2],poly[i * 2 + 1]));
	}
	return out;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var msignal_Signal = function(valueClasses) {
	if(valueClasses == null) {
		valueClasses = [];
	}
	this.valueClasses = valueClasses;
	this.slots = msignal_SlotList.NIL;
	this.priorityBased = false;
};
$hxClasses["msignal.Signal"] = msignal_Signal;
msignal_Signal.__name__ = ["msignal","Signal"];
msignal_Signal.prototype = {
	add: function(listener) {
		return this.registerListener(listener);
	}
	,addOnce: function(listener) {
		return this.registerListener(listener,true);
	}
	,addWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,false,priority);
	}
	,addOnceWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,true,priority);
	}
	,remove: function(listener) {
		var slot = this.slots.find(listener);
		if(slot == null) {
			return null;
		}
		this.slots = this.slots.filterNot(listener);
		return slot;
	}
	,removeAll: function() {
		this.slots = msignal_SlotList.NIL;
	}
	,registerListener: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		if(this.registrationPossible(listener,once)) {
			var newSlot = this.createSlot(listener,once,priority);
			if(!this.priorityBased && priority != 0) {
				this.priorityBased = true;
			}
			if(!this.priorityBased && priority == 0) {
				this.slots = this.slots.prepend(newSlot);
			} else {
				this.slots = this.slots.insertWithPriority(newSlot);
			}
			return newSlot;
		}
		return this.slots.find(listener);
	}
	,registrationPossible: function(listener,once) {
		if(!this.slots.nonEmpty) {
			return true;
		}
		var existingSlot = this.slots.find(listener);
		if(existingSlot == null) {
			return true;
		}
		return false;
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return null;
	}
	,get_numListeners: function() {
		return this.slots.get_length();
	}
	,__class__: msignal_Signal
};
var msignal_Signal0 = function() {
	msignal_Signal.call(this);
};
$hxClasses["msignal.Signal0"] = msignal_Signal0;
msignal_Signal0.__name__ = ["msignal","Signal0"];
msignal_Signal0.__super__ = msignal_Signal;
msignal_Signal0.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function() {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute();
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot0(this,listener,once,priority);
	}
	,__class__: msignal_Signal0
});
var msignal_Signal1 = function(type) {
	msignal_Signal.call(this,[type]);
};
$hxClasses["msignal.Signal1"] = msignal_Signal1;
msignal_Signal1.__name__ = ["msignal","Signal1"];
msignal_Signal1.__super__ = msignal_Signal;
msignal_Signal1.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot1(this,listener,once,priority);
	}
	,__class__: msignal_Signal1
});
var msignal_Signal2 = function(type1,type2) {
	msignal_Signal.call(this,[type1,type2]);
};
$hxClasses["msignal.Signal2"] = msignal_Signal2;
msignal_Signal2.__name__ = ["msignal","Signal2"];
msignal_Signal2.__super__ = msignal_Signal;
msignal_Signal2.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value1,value2) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value1,value2);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot2(this,listener,once,priority);
	}
	,__class__: msignal_Signal2
});
var msignal_Slot = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	this.signal = signal;
	this.set_listener(listener);
	this.once = once;
	this.priority = priority;
	this.enabled = true;
};
$hxClasses["msignal.Slot"] = msignal_Slot;
msignal_Slot.__name__ = ["msignal","Slot"];
msignal_Slot.prototype = {
	remove: function() {
		this.signal.remove(this.listener);
	}
	,set_listener: function(value) {
		return this.listener = value;
	}
	,__class__: msignal_Slot
};
var msignal_Slot0 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot0"] = msignal_Slot0;
msignal_Slot0.__name__ = ["msignal","Slot0"];
msignal_Slot0.__super__ = msignal_Slot;
msignal_Slot0.prototype = $extend(msignal_Slot.prototype,{
	execute: function() {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		this.listener();
	}
	,__class__: msignal_Slot0
});
var msignal_Slot1 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot1"] = msignal_Slot1;
msignal_Slot1.__name__ = ["msignal","Slot1"];
msignal_Slot1.__super__ = msignal_Slot;
msignal_Slot1.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param != null) {
			value1 = this.param;
		}
		this.listener(value1);
	}
	,__class__: msignal_Slot1
});
var msignal_Slot2 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot2"] = msignal_Slot2;
msignal_Slot2.__name__ = ["msignal","Slot2"];
msignal_Slot2.__super__ = msignal_Slot;
msignal_Slot2.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1,value2) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param1 != null) {
			value1 = this.param1;
		}
		if(this.param2 != null) {
			value2 = this.param2;
		}
		this.listener(value1,value2);
	}
	,__class__: msignal_Slot2
});
var msignal_SlotList = function(head,tail) {
	this.nonEmpty = false;
	if(head == null && tail == null) {
		this.nonEmpty = false;
	} else if(head != null) {
		this.head = head;
		this.tail = tail == null ? msignal_SlotList.NIL : tail;
		this.nonEmpty = true;
	}
};
$hxClasses["msignal.SlotList"] = msignal_SlotList;
msignal_SlotList.__name__ = ["msignal","SlotList"];
msignal_SlotList.prototype = {
	get_length: function() {
		if(!this.nonEmpty) {
			return 0;
		}
		if(this.tail == msignal_SlotList.NIL) {
			return 1;
		}
		var result = 0;
		var p = this;
		while(p.nonEmpty) {
			++result;
			p = p.tail;
		}
		return result;
	}
	,prepend: function(slot) {
		return new msignal_SlotList(slot,this);
	}
	,append: function(slot) {
		if(slot == null) {
			return this;
		}
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		if(this.tail == msignal_SlotList.NIL) {
			return new msignal_SlotList(slot).prepend(this.head);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,insertWithPriority: function(slot) {
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		var priority = slot.priority;
		if(priority >= this.head.priority) {
			return this.prepend(slot);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(priority > current.head.priority) {
				subClone.tail = current.prepend(slot);
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,filterNot: function(listener) {
		if(!this.nonEmpty || listener == null) {
			return this;
		}
		if(Reflect.compareMethods(this.head.listener,listener)) {
			return this.tail;
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(Reflect.compareMethods(current.head.listener,listener)) {
				subClone.tail = current.tail;
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		return this;
	}
	,contains: function(listener) {
		if(!this.nonEmpty) {
			return false;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return true;
			}
			p = p.tail;
		}
		return false;
	}
	,find: function(listener) {
		if(!this.nonEmpty) {
			return null;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return p.head;
			}
			p = p.tail;
		}
		return null;
	}
	,__class__: msignal_SlotList
};
var troshx_components_Bout = function() {
	this.roundCount = 0;
	this.secondTempo = false;
	this.combatants = [];
	this.s = 0;
	this.c = 0;
};
$hxClasses["troshx.components.Bout"] = troshx_components_Bout;
troshx_components_Bout.__name__ = ["troshx","components","Bout"];
troshx_components_Bout.prototype = {
	step: function(stepAction) {
		if(stepAction == 0) {
			this.s++;
		} else if(stepAction == 1) {
			this.s = 0;
			this.c++;
		} else if(stepAction == 2) {
			this.s = 0;
			this.c = 0;
			this.roundCount++;
		}
	}
	,__class__: troshx_components_Bout
};
var troshx_components_FightNode = function(label,charSheet,side) {
	if(side == null) {
		side = 0;
	}
	this.label = label;
	this.charSheet = charSheet;
	this.fight = new troshx_components_FightState();
	this.sideIndex = side;
};
$hxClasses["troshx.components.FightNode"] = troshx_components_FightNode;
troshx_components_FightNode.__name__ = ["troshx","components","FightNode"];
troshx_components_FightNode.prototype = {
	__class__: troshx_components_FightNode
};
var troshx_components_FightState = function() {
	this.defensiveManevers = [];
	this.attackManuevers = [];
	this.lastAttacking = false;
	this.cp = 0;
	this.initiative = 0;
};
$hxClasses["troshx.components.FightState"] = troshx_components_FightState;
troshx_components_FightState.__name__ = ["troshx","components","FightState"];
troshx_components_FightState.prototype = {
	__class__: troshx_components_FightState
};
var troshx_core_BodyChar = $hx_exports["troshx"]["core"]["BodyChar"] = function() {
	this.zones = [];
	this.zones[0] = null;
	this.zonesB = [];
	this.zones[1] = null;
};
$hxClasses["troshx.core.BodyChar"] = troshx_core_BodyChar;
troshx_core_BodyChar.__name__ = ["troshx","core","BodyChar"];
troshx_core_BodyChar.getEmptyBodyPartTypeDef = function() {
	return { BL : 0, KD : null, lev : 0, d : 0, ko : null, shock : 0, shockWP : 0, pain : 0, painWP : 0};
};
troshx_core_BodyChar.getEmptyWoundLocation = function(id) {
	return { id : id, cut : [], puncture : [], bludgeon : []};
};
troshx_core_BodyChar.getCleanArrayOfWound = function(dirtyArr) {
	var cleanArr = [];
	var _g1 = 0;
	var _g = dirtyArr.length;
	while(_g1 < _g) {
		var i = _g1++;
		cleanArr[i] = troshx_core_BodyChar.getBodyPartOf(dirtyArr[i]);
	}
	return cleanArr;
};
troshx_core_BodyChar.getBodyPartOf = function(obj) {
	var theBodyPart = troshx_core_BodyChar.getEmptyBodyPartTypeDef();
	var _g = 0;
	var _g1 = Reflect.fields(theBodyPart);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		if(Object.prototype.hasOwnProperty.call(obj,f)) {
			theBodyPart[f] = Reflect.field(obj,f);
		}
	}
	return theBodyPart;
};
troshx_core_BodyChar.prototype = {
	getAllWoundLocations: function() {
		var arr = [];
		var partsMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(this.partsCut);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(__map_reserved[f] != null) {
				partsMap.setReserved(f,true);
			} else {
				partsMap.h[f] = true;
			}
		}
		var _g2 = 0;
		var _g11 = Reflect.fields(this.partsBludgeon);
		while(_g2 < _g11.length) {
			var f1 = _g11[_g2];
			++_g2;
			if(__map_reserved[f1] != null) {
				partsMap.setReserved(f1,true);
			} else {
				partsMap.h[f1] = true;
			}
		}
		var _g3 = 0;
		var _g12 = Reflect.fields(this.partsPuncture);
		while(_g3 < _g12.length) {
			var f2 = _g12[_g3];
			++_g3;
			if(__map_reserved[f2] != null) {
				partsMap.setReserved(f2,true);
			} else {
				partsMap.h[f2] = true;
			}
		}
		var f3 = partsMap.keys();
		while(f3.hasNext()) {
			var f4 = f3.next();
			var woundLocation = troshx_core_BodyChar.getEmptyWoundLocation(f4);
			if(Object.prototype.hasOwnProperty.call(this.partsCut,f4)) {
				woundLocation.cut = troshx_core_BodyChar.getCleanArrayOfWound(Reflect.field(this.partsCut,f4));
			}
			if(Object.prototype.hasOwnProperty.call(this.partsPuncture,f4)) {
				woundLocation.puncture = troshx_core_BodyChar.getCleanArrayOfWound(Reflect.field(this.partsPuncture,f4));
			}
			if(Object.prototype.hasOwnProperty.call(this.partsBludgeon,f4)) {
				woundLocation.bludgeon = troshx_core_BodyChar.getCleanArrayOfWound(Reflect.field(this.partsBludgeon,f4));
			}
			arr.push(woundLocation);
		}
		return arr;
	}
	,getTargetZoneCost: function(index) {
		return 0;
	}
	,getWound: function(level,manuever,weapon,targetZone,rand) {
		if(rand == null) {
			rand = -1;
		}
		--level;
		var zs;
		var woundType;
		var damageTable;
		var damageTableStr;
		if(manuever.damageType == 3 || weapon.blunt) {
			zs = this.zonesB;
			damageTable = this.partsBludgeon;
			woundType = 4;
			damageTableStr = "bludgeoning";
		} else {
			zs = this.zones;
			var isThrusting = targetZone >= this.thrustStartIndex;
			if(isThrusting) {
				damageTable = this.partsPuncture;
			} else {
				damageTable = this.partsCut;
			}
			if(isThrusting) {
				woundType = 2;
			} else {
				woundType = 1;
			}
			if(isThrusting) {
				damageTableStr = "puncturing";
			} else {
				damageTableStr = "cutting";
			}
		}
		if(rand < 0) {
			rand = Math.random();
		}
		var part = zs[targetZone].getBodyPart(rand);
		if(part == "") {
			return null;
		}
		var row = Reflect.field(damageTable,part);
		if(row == null) {
			throw new js__$Boot_HaxeError("Could not find row:" + part + ", " + damageTableStr);
		}
		var damagePart = row[level];
		return { part : part, level : level, type : woundType, entry : damagePart};
	}
	,__class__: troshx_core_BodyChar
};
var troshx_core_BoutMessage = function() {
};
$hxClasses["troshx.core.BoutMessage"] = troshx_core_BoutMessage;
troshx_core_BoutMessage.__name__ = ["troshx","core","BoutMessage"];
troshx_core_BoutMessage.create = function(type,text) {
	if(type == null) {
		type = 0;
	}
	var me = new troshx_core_BoutMessage();
	me.type = type;
	me.text = text;
	return me;
};
troshx_core_BoutMessage.prototype = {
	__class__: troshx_core_BoutMessage
};
var troshx_core_CharSave = function(label,data,description) {
	if(description == null) {
		description = "";
	}
	this.label = label;
	this.savedData = data;
	this.description = description;
};
$hxClasses["troshx.core.CharSave"] = troshx_core_CharSave;
troshx_core_CharSave.__name__ = ["troshx","core","CharSave"];
troshx_core_CharSave.prototype = {
	__class__: troshx_core_CharSave
};
var troshx_core_CharSheet = function() {
	this.cpDepletion = 0;
	this.bloodLostSoFar = 0;
	this.profeciencies = { };
};
$hxClasses["troshx.core.CharSheet"] = troshx_core_CharSheet;
troshx_core_CharSheet.__name__ = ["troshx","core","CharSheet"];
troshx_core_CharSheet.createBase = function(name,profeciencies,bodyType,weapon,weaponOffHand,baseAttr) {
	if(baseAttr == null) {
		baseAttr = 5;
	}
	var c = new troshx_core_CharSheet();
	c.name = name;
	c.wounds = { };
	c.profeciencies = profeciencies;
	c.weapon = weapon;
	c.weaponOffhand = weaponOffHand;
	c.resetAllAttributes(baseAttr);
	c.refreshDefaultProfs();
	c.bodyType = bodyType;
	return c;
};
troshx_core_CharSheet.prototype = {
	refreshDefaultProfs: function() {
		var profReference = this.cloneObj(this.profeciencies);
		var _g = 0;
		var _g1 = Reflect.fields(profReference);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var baseScore = profReference[p];
			var prof = troshx_tros_ProfeciencySheet.getProfeciency(p);
			if(prof == null) {
				throw new js__$Boot_HaxeError("SHould not be!:" + p);
			}
			var defaults = prof.defaults;
			var _g2 = 0;
			var _g3 = Reflect.fields(defaults);
			while(_g2 < _g3.length) {
				var d = _g3[_g2];
				++_g2;
				if(troshx_tros_ProfeciencySheet.getProfeciency(d) == null) {
					continue;
				}
				var defaultedScore = baseScore - defaults[d] | 0;
				var curCompareScore = Object.prototype.hasOwnProperty.call(this.profeciencies,d) ? Reflect.field(this.profeciencies,d) : 0;
				if(defaultedScore > 6) {
					defaultedScore = 6;
				}
				if(defaultedScore > curCompareScore) {
					this.profeciencies[d] = defaultedScore;
				}
			}
		}
	}
	,clone: function() {
		var c = new troshx_core_CharSheet();
		c.name = this.name;
		c.strength = this.strength;
		c.agility = this.agility;
		c.toughness = this.toughness;
		c.endurance = this.endurance;
		c.health = this.health;
		c.willpower = this.willpower;
		c.wit = this.wit;
		c.mentalapt = this.mentalapt;
		c.social = this.social;
		c.perception = this.perception;
		c.profeciencies = this.cloneObj(this.profeciencies);
		c.weapon = this.weapon;
		c.weaponOffhand = this.weaponOffhand;
		c.profeciencyIdCache = this.profeciencyIdCache;
		c.bodyType = this.bodyType;
		c.wounds = { };
		return c;
	}
	,cloneObj: function(obj) {
		var o = { };
		var _g = 0;
		var _g1 = Reflect.fields(obj);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			o[p] = Reflect.field(obj,p);
		}
		return o;
	}
	,resetAllAttributes: function(val) {
		this.strength = val;
		this.agility = val;
		this.toughness = val;
		this.endurance = val;
		this.health = val;
		this.willpower = val;
		this.wit = val;
		this.mentalapt = val;
		this.social = val;
		this.perception = val;
	}
	,invalidateHandEquipment: function() {
		this.profeciencyIdCache = null;
	}
	,getReflex: function() {
		return (this.agility + this.wit) / 2 | 0;
	}
	,getAim: function() {
		return (this.agility + this.perception) / 2 | 0;
	}
	,getKnockdown: function() {
		return (this.strength + this.agility) / 2 | 0;
	}
	,getKnockout: function() {
		return this.toughness + this.willpower / 2 | 0;
	}
	,getSpeed: function() {
		return (this.strength + this.agility + this.endurance) / 2 | 0;
	}
	,getTotalBloodLost: function() {
		var accum = 0;
		var _g = 0;
		var _g1 = Reflect.fields(this.wounds);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var w = Reflect.field(this.wounds,p);
			if(w.BL) {
				accum += w.BL;
			}
		}
		return accum;
	}
	,getCurrentHealth: function() {
		return this.health - this.bloodLostSoFar;
	}
	,criticalCondition: function() {
		return this.getCurrentHealth() == 1;
	}
	,isDeadOrComa: function() {
		return this.getCurrentHealth() <= 0;
	}
	,canNoLongerFight: function() {
		return this.getMeleeCombatPoolAmount() <= 0;
	}
	,outOfAction: function() {
		if(!this.canNoLongerFight()) {
			return this.isDeadOrComa();
		} else {
			return true;
		}
	}
	,getTotalPain: function() {
		var accum = 0;
		var _g = 0;
		var _g1 = Reflect.fields(this.wounds);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var w = Reflect.field(this.wounds,p);
			accum += w.pain;
		}
		return accum;
	}
	,pickBestProfeciency: function(weapProfs) {
		var highestScore = 0;
		var highestProf = "";
		var _g = 0;
		var _g1 = Reflect.fields(this.profeciencies);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var _g3 = 0;
			var _g2 = weapProfs.length;
			while(_g3 < _g2) {
				var k = _g3++;
				var profId = weapProfs[k];
				if(profId == p) {
					var score = Reflect.field(this.profeciencies,profId);
					if(score > highestScore) {
						highestScore = score;
						highestProf = profId;
					}
				}
			}
		}
		return highestProf;
	}
	,getMeleeProfeciencyId: function() {
		this.profeciencyIdCache = "";
		if(this.weapon != null) {
			this.profeciencyIdCache = this.pickBestProfeciency(this.weapon.profeciencies);
		} else if(this.weaponOffhand == null || !this.weaponOffhand.shield) {
			this.profeciencyIdCache = "pugilism";
		}
		var tmp = this.weaponOffhand != null;
		return this.profeciencyIdCache;
	}
	,getMeleeProfeciencyIdCached: function() {
		if(this.profeciencyIdCache != null) {
			return this.profeciencyIdCache;
		} else {
			return this.getMeleeProfeciencyId();
		}
	}
	,getMeleeProfeciencyLevel: function() {
		if(this.profeciencyIdCache == null) {
			this.profeciencyIdCache = this.getMeleeProfeciencyId();
		}
		if(this.profeciencyIdCache != "") {
			if(Reflect.field(this.profeciencies,this.profeciencyIdCache) != null) {
				return Reflect.field(this.profeciencies,this.profeciencyIdCache);
			} else {
				return 0;
			}
		} else {
			return 0;
		}
	}
	,getMeleeCombatPoolAmount: function(carryOverShock) {
		if(carryOverShock == null) {
			carryOverShock = 0;
		}
		var amount = this.getMeleeProfeciencyLevel() + this.getReflex() - (this.cpDepletion = Math.max(this.getTotalPain(),carryOverShock) | 0);
		if(amount > 0 && this.criticalCondition()) {
			amount = amount * .5 | 0;
		}
		if(amount < 0) {
			amount = 0;
		}
		return amount;
	}
	,getManueverTN: function(manuever,attacking,enemyManuever,enemyDiceRolled,enemyTargetZone) {
		if(enemyTargetZone == null) {
			enemyTargetZone = 0;
		}
		if(enemyDiceRolled == null) {
			enemyDiceRolled = 0;
		}
		if(manuever.defaultTN != 0) {
			return manuever.defaultTN;
		}
		var useWeapon;
		if(attacking) {
			if(manuever.offHanded) {
				useWeapon = this.weaponOffhand;
			} else {
				useWeapon = this.weapon;
			}
			if(useWeapon == null) {
				useWeapon = this.getUnarmedWeapon();
			}
			if(manuever.attackTypes == 1) {
				return useWeapon.atn;
			} else if(manuever.attackTypes == 2) {
				return useWeapon.atn2;
			} else if(manuever.damageType == 0) {
				if(useWeapon.blunt) {
					if(useWeapon.atn2 != 0) {
						return useWeapon.atn2;
					} else {
						return useWeapon.atn;
					}
				} else {
					return useWeapon.atn;
				}
			} else if(manuever.damageType == 2) {
				return useWeapon.atn2;
			} else {
				return useWeapon.atn;
			}
		} else {
			var usingOffhand = manuever.isDefensiveOffHanded();
			if(usingOffhand) {
				useWeapon = this.weaponOffhand;
			} else {
				useWeapon = this.weapon;
			}
			if(useWeapon == null) {
				useWeapon = this.getUnarmedWeapon();
			}
			if(usingOffhand && useWeapon.shieldLimit != 0 && enemyDiceRolled > useWeapon.shieldLimit) {
				return 0;
			}
			if(manuever.manueverType == 0) {
				if(enemyDiceRolled <= 4 && enemyTargetZone >= this.bodyType.thrustStartIndex) {
					if(useWeapon.dntT != 0) {
						return useWeapon.dntT;
					} else {
						return useWeapon.dtn;
					}
				} else {
					return useWeapon.dtn;
				}
			} else {
				return useWeapon.dtn;
			}
		}
	}
	,getUnarmedWeapon: function() {
		var _this = troshx_tros_WeaponSheet.HASH;
		if(__map_reserved["name"] != null) {
			return _this.getReserved("name");
		} else {
			return _this.h["name"];
		}
	}
	,getAtkZoneDesc: function(index,weapon) {
		if(weapon == null) {
			weapon = this.getUnarmedWeapon();
		}
		var zoneArr = weapon.blunt ? this.bodyType.zonesB : this.bodyType.zones;
		return zoneArr[index].name;
	}
	,getPrimaryWeaponUsed: function() {
		if(this.weapon != null) {
			return this.weapon;
		} else {
			return this.getUnarmedWeapon();
		}
	}
	,inflictWound: function(level,manuever,weapon,targetZone) {
		var painInflicted;
		var shockInflicted;
		if(level > 5) {
			throw new js__$Boot_HaxeError("should not be level >5");
		}
		var wound = this.bodyType.getWound(level,manuever,weapon,targetZone);
		if(wound == null) {
			return null;
		}
		var existingWound = Object.prototype.hasOwnProperty.call(this.wounds,wound.part) ? this.wounds[wound.part] : troshx_util_LibUtil.setFieldChain(this.wounds,wound.part,{ pain : 0, BL : 0, shock : 0, woundTypes : 0});
		existingWound.woundTypes |= wound.type;
		var woundEntry = wound.entry;
		if(woundEntry.shock == -1) {
			shockInflicted = this.getMeleeProfeciencyLevel() + this.getReflex();
		} else {
			shockInflicted = woundEntry.shock;
		}
		if(woundEntry.pain == -1) {
			painInflicted = this.getMeleeProfeciencyLevel() + this.getReflex();
		} else {
			painInflicted = woundEntry.pain;
		}
		shockInflicted -= woundEntry.shockWP * this.willpower;
		painInflicted -= woundEntry.painWP * this.willpower;
		if(painInflicted > existingWound.pain) {
			existingWound.pain = painInflicted;
		}
		if(shockInflicted > existingWound.shock) {
			existingWound.shock = shockInflicted;
		}
		if(woundEntry.BL > existingWound.BL) {
			existingWound.BL = woundEntry.BL;
		}
		existingWound.d = woundEntry.d;
		if(isNaN(shockInflicted)) {
			throw new js__$Boot_HaxeError("SHock inflicted is NAN:" + wound.part + ", " + level);
		}
		wound.shock = shockInflicted;
		wound.d = woundEntry.d;
		return wound;
	}
	,__class__: troshx_core_CharSheet
};
var troshx_core_IBoutController = function() { };
$hxClasses["troshx.core.IBoutController"] = troshx_core_IBoutController;
troshx_core_IBoutController.__name__ = ["troshx","core","IBoutController"];
troshx_core_IBoutController.prototype = {
	__class__: troshx_core_IBoutController
};
var troshx_core_IBoutModel = function() { };
$hxClasses["troshx.core.IBoutModel"] = troshx_core_IBoutModel;
troshx_core_IBoutModel.__name__ = ["troshx","core","IBoutModel"];
troshx_core_IBoutModel.prototype = {
	__class__: troshx_core_IBoutModel
};
var troshx_core_IUid = function() { };
$hxClasses["troshx.core.IUid"] = troshx_core_IUid;
troshx_core_IUid.__name__ = ["troshx","core","IUid"];
troshx_core_IUid.prototype = {
	__class__: troshx_core_IUid
};
var troshx_core_Manuever = $hx_exports["troshx"]["core"]["Manuever"] = function(id,name,cost) {
	if(cost == null) {
		cost = 0;
	}
	this.type = 0;
	this.id = id;
	this.name = name;
	this.cost = cost;
	this.usingHands = 0;
	this.defaultTN = 0;
	this.customRange = 0;
	this.customMinRange = 0;
	this.stanceModifier = 2;
	this.attackTypes = 1 | 2;
	this.damageType = 0;
	this.requiredLevel = 0;
	this.spamPenalty = 0;
	this.spamIndividualOnly = false;
	this.regionMask = 0;
	this.offHanded = false;
	this.evasive = 0;
	this.manueverType = 0;
};
$hxClasses["troshx.core.Manuever"] = troshx_core_Manuever;
troshx_core_Manuever.__name__ = ["troshx","core","Manuever"];
troshx_core_Manuever.isThrustingMotion = function(targetzone,toBody) {
	return targetzone >= toBody.thrustStartIndex;
};
troshx_core_Manuever.prototype = {
	gotResolveEvasive: function() {
		return (this.evasive & -2) != 0;
	}
	,isDefensiveOffHanded: function() {
		if(this.attackTypes != 1) {
			return this.offHanded;
		} else {
			return true;
		}
	}
	,_dmgType: function(val) {
		this.damageType = val;
		return this;
	}
	,_offHanded: function(val) {
		this.offHanded = val;
		return this;
	}
	,_evasive: function(val) {
		this.evasive = val | 1;
		return this;
	}
	,_tn: function(val) {
		this.defaultTN = val;
		return this;
	}
	,_atkTypes: function(val) {
		this.attackTypes = val;
		return this;
	}
	,_range: function(val) {
		this.customRange = val;
		return this;
	}
	,_rangeMin: function(val) {
		this.customMinRange = val;
		return this;
	}
	,_lev: function(val) {
		this.requiredLevel = val;
		return this;
	}
	,_spamPenalize: function(val,spamIndividualOnly) {
		if(spamIndividualOnly == null) {
			spamIndividualOnly = false;
		}
		this.spamPenalty = val;
		this.spamIndividualOnly = spamIndividualOnly;
		return this;
	}
	,_stanceModifier: function(val) {
		this.stanceModifier = val;
		return this;
	}
	,_regions: function(val) {
		this.regionMask = val;
		return this;
	}
	,_customRequire: function(requirements) {
		this.customRequirements = requirements;
		if(requirements == null) {
			this.devTempDisabled = true;
		}
		return this;
	}
	,_customPreResolve: function() {
		this.devTempDisabled = true;
		return this;
	}
	,_customPostResolve: function() {
		this.devTempDisabled = true;
		return this;
	}
	,_customResolve: function() {
		this.devTempDisabled = true;
		return this;
	}
	,_customDamage: function(method) {
		this.customDamageModiferMethod = method;
		return this;
	}
	,_customReflex: function() {
		return this;
	}
	,_customRange: function() {
		return this;
	}
	,_customSplit: function() {
		this.devTempDisabled = true;
		return this;
	}
	,isTypeAttacking: function() {
		return this.type == 2;
	}
	,__class__: troshx_core_Manuever
};
var troshx_core_ManueverStack = function() {
	this.stack = [];
};
$hxClasses["troshx.core.ManueverStack"] = troshx_core_ManueverStack;
troshx_core_ManueverStack.__name__ = ["troshx","core","ManueverStack"];
troshx_core_ManueverStack.prototype = {
	reset: function() {
		this.stack.length = 0;
	}
	,reverseOrder: function() {
		this.stack.reverse();
	}
	,pushManuever: function(manueverObj) {
		this.stack.push(manueverObj);
	}
	,sortOnLowestToHighestReflex: function() {
		haxe_ds_ArraySort.sort(this.stack,function(a,b) {
			if(a.reflexScore != b.reflexScore) {
				if(a.reflexScore > b.reflexScore) {
					return 1;
				} else {
					return -1;
				}
			} else {
				return 0;
			}
		});
	}
	,sortOnHighestToLowestReflex: function(property) {
		haxe_ds_ArraySort.sort(this.stack,function(a,b) {
			if(a.reflexScore != b.reflexScore) {
				if(a.reflexScore > b.reflexScore) {
					return -1;
				} else {
					return 1;
				}
			} else {
				return 0;
			}
		});
	}
	,__class__: troshx_core_ManueverStack
};
var troshx_core_Profeciency = function(id,name,offensiveManuevers,defensiveManuevers,atkCosts,defCosts,defaults) {
	this.id = id;
	this.name = name;
	this.offensiveManuevers = offensiveManuevers;
	this.defensiveManuevers = defensiveManuevers;
	this.atkCosts = atkCosts != null ? atkCosts : { };
	this.defCosts = defCosts != null ? defCosts : { };
	this.defaults = defaults != null ? defaults : { };
};
$hxClasses["troshx.core.Profeciency"] = troshx_core_Profeciency;
troshx_core_Profeciency.__name__ = ["troshx","core","Profeciency"];
troshx_core_Profeciency.prototype = {
	__class__: troshx_core_Profeciency
};
var troshx_core_Weapon = $hx_exports["troshx"]["core"]["Weapon"] = function(name,profGroups) {
	this.name = name;
	this.profeciencies = profGroups;
	this.attrBaseIndex = 0;
	this.drawCutModifier = 0;
	this.damage = 0;
	this.damage2 = 0;
	this.damage3 = 0;
	this.atn = 0;
	this.atn2 = 0;
	this.dtn = 0;
	this.dtn2 = 0;
	this.twoHanded = false;
	this.rangedWeapon = false;
	this.shield = false;
	this.shieldLimit = 0;
	this.cpPenalty = 0;
	this.movePenalty = 0;
	this.blunt = false;
	this.hooking = 0;
};
$hxClasses["troshx.core.Weapon"] = troshx_core_Weapon;
troshx_core_Weapon.__name__ = ["troshx","core","Weapon"];
troshx_core_Weapon.createDyn = function(name,profGroups,properties) {
	var weap = new troshx_core_Weapon(name,profGroups);
	var _g = 0;
	var _g1 = Reflect.fields(properties);
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		weap[p] = Reflect.field(properties,p);
	}
	return weap;
};
troshx_core_Weapon.prototype = {
	getDamageTo: function(body,manuever,targetZone,margin,strength) {
		var dmg;
		if(this.damage3 != 0 && (this.blunt || manuever.damageType == 3)) {
			dmg = this.damage3;
		} else if(targetZone >= body.thrustStartIndex) {
			dmg = this.damage2;
		} else {
			dmg = this.damage;
		}
		dmg += margin;
		if(this.attrBaseIndex == 0) {
			dmg += strength;
		}
		return dmg;
	}
	,getHookingATN: function(tieBiasToThrust) {
		if(tieBiasToThrust == null) {
			tieBiasToThrust = false;
		}
		var strikeATN = (this.hooking & 1) != 0 ? this.atn : 0;
		var thrustATN = (this.hooking & 2) != 0 ? this.atn2 : 0;
		if(strikeATN != 0 && thrustATN != 0) {
			if(!tieBiasToThrust) {
				if(thrustATN < strikeATN) {
					return -thrustATN;
				} else {
					return strikeATN;
				}
			} else if(strikeATN < thrustATN) {
				return strikeATN;
			} else {
				return -thrustATN;
			}
		} else if(strikeATN == 0) {
			return -thrustATN;
		} else {
			return strikeATN;
		}
	}
	,getHookingATNType: function(tieBiasToThrust) {
		if(tieBiasToThrust == null) {
			tieBiasToThrust = false;
		}
		var strikeATN = (this.hooking & 1) != 0 ? this.atn : 0;
		var thrustATN = (this.hooking & 2) != 0 ? this.atn2 : 0;
		if(strikeATN != 0 && thrustATN != 0) {
			if(!tieBiasToThrust) {
				if(thrustATN < strikeATN) {
					return -thrustATN;
				} else {
					return strikeATN;
				}
			} else if(strikeATN < thrustATN) {
				return strikeATN;
			} else {
				return -thrustATN;
			}
		} else if(strikeATN == 0) {
			return -thrustATN;
		} else {
			return strikeATN;
		}
	}
	,getInlineTest: function() {
		var abc = 3;
		var weap = this.weaponListInlineTest[0];
		var testVar = abc + 5 + (Math.random() * this.dtn2 | 0);
		testVar += this.damage;
		var resultant = this.damage2 + testVar + 99999.22222;
		var testVar1 = 5 + (Math.random() * weap.dtn2 | 0);
		testVar1 += weap.damage;
		var resultant1 = resultant + (weap.damage2 + testVar1);
		return resultant1;
	}
	,getInlineTest2: function(val,val2) {
		if(val2 == null) {
			val2 = 5;
		}
		if(val == null) {
			val = 0;
		}
		var testVar = val + val2 + (Math.random() * this.dtn2 | 0);
		testVar += this.damage;
		return this.damage2 + testVar;
	}
	,__class__: troshx_core_Weapon
};
var troshx_core_ZoneBody = function() {
	this.weightsTotal = 0;
};
$hxClasses["troshx.core.ZoneBody"] = troshx_core_ZoneBody;
troshx_core_ZoneBody.__name__ = ["troshx","core","ZoneBody"];
troshx_core_ZoneBody.create = function(name,partWeights,parts,weightsTotal) {
	if(weightsTotal == null) {
		weightsTotal = 0;
	}
	var zb = new troshx_core_ZoneBody();
	zb.name = name;
	zb.parts = parts;
	zb.partWeights = partWeights;
	zb.weightsTotal = weightsTotal;
	if(weightsTotal == 0) {
		zb.recalcWeightsTotal();
	}
	return zb;
};
troshx_core_ZoneBody.prototype = {
	recalcWeightsTotal: function() {
		var accum = 0;
		var i = this.partWeights.length;
		while(--i > -1) accum += this.partWeights[i];
		this.weightsTotal = accum;
	}
	,getBodyPart: function(floatRatio) {
		floatRatio *= this.weightsTotal;
		var accum = 0;
		var result = 0;
		var _g1 = 0;
		var _g = this.partWeights.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(floatRatio < accum) {
				break;
			}
			accum += this.partWeights[i];
			result = i;
		}
		return this.parts[result];
	}
	,__class__: troshx_core_ZoneBody
};
var troshx_ds_IMatchArray = function() { };
$hxClasses["troshx.ds.IMatchArray"] = troshx_ds_IMatchArray;
troshx_ds_IMatchArray.__name__ = ["troshx","ds","IMatchArray"];
troshx_ds_IMatchArray.prototype = {
	__class__: troshx_ds_IMatchArray
};
var troshx_ds_HashedArray = function() {
	this.hash = { };
	this.list = [];
};
$hxClasses["troshx.ds.HashedArray"] = troshx_ds_HashedArray;
troshx_ds_HashedArray.__name__ = ["troshx","ds","HashedArray"];
troshx_ds_HashedArray.__interfaces__ = [troshx_ds_IMatchArray];
troshx_ds_HashedArray.prototype = {
	filter: function(handler) {
		this.list = this.list.filter(handler);
		this.rehash();
	}
	,rehash: function() {
		var theHash = { };
		var _g1 = 0;
		var _g = this.list.length;
		while(_g1 < _g) {
			var i = _g1++;
			var item = this.list[i];
			theHash[item.get_uid()] = item;
		}
		this.hash = theHash;
	}
	,add: function(item) {
		var uid = item.get_uid();
		if(!this.hashContains(item)) {
			this.hash[uid] = item;
			this.list.push(item);
		} else {
			var fw = this.hash[uid];
			fw.updateAgainst(item);
		}
	}
	,indexOf: function(item) {
		var _g1 = 0;
		var _g = this.list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.list[i].get_uid() == item.get_uid()) {
				return i;
			}
		}
		return -1;
	}
	,'delete': function(item) {
		var uid = item.get_uid();
		if(this.hashContains(item)) {
			Reflect.deleteField(this.hash,uid);
		} else {
			console.log("Warning: No item found to be removed for uid:" + item.get_uid());
		}
		var index = this.indexOf(item);
		if(index >= 0) {
			this.list.splice(index,1);
		} else {
			console.log("Warning: No item found to be removed for array index:" + index);
		}
	}
	,contains: function(item) {
		return this.hashContains(item);
	}
	,containsId: function(ider) {
		return Object.prototype.hasOwnProperty.call(this.hash,ider);
	}
	,hashContains: function(item) {
		var o = this.hash;
		var field = item.get_uid();
		return Object.prototype.hasOwnProperty.call(o,field);
	}
	,findById: function(id) {
		return Reflect.field(this.hash,id);
	}
	,listContains: function(item) {
		return this.indexOf(item) >= 0;
	}
	,__class__: troshx_ds_HashedArray
};
var troshx_ds_IDMatchArray = function() {
	this.list = [];
};
$hxClasses["troshx.ds.IDMatchArray"] = troshx_ds_IDMatchArray;
troshx_ds_IDMatchArray.__name__ = ["troshx","ds","IDMatchArray"];
troshx_ds_IDMatchArray.__interfaces__ = [troshx_ds_IMatchArray];
troshx_ds_IDMatchArray.prototype = {
	filter: function(handler) {
		this.list = this.list.filter(handler);
	}
	,add: function(item) {
		var uid = item.get_uid();
		var matchingItem = this.getMatchingItem(item);
		if(matchingItem == null) {
			this.list.push(item);
		} else {
			matchingItem.updateAgainst(item);
			var testIndex;
			var tmp;
			if(item != matchingItem) {
				testIndex = this.list.indexOf(item);
				tmp = testIndex >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				this.list.splice(testIndex,1);
			}
		}
	}
	,'delete': function(item) {
		var uid = item.get_uid();
		if(!this.contains(item)) {
			console.log("Warning: No item found to be removed for uid:" + item.get_uid());
		}
		var index = this.list.indexOf(item);
		if(index >= 0) {
			this.list.splice(index,1);
		} else {
			console.log("Warning: No item found to be removed for array index:" + index);
		}
	}
	,contains: function(item) {
		var _g1 = 0;
		var _g = this.list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.list[i].get_uid() == item.get_uid()) {
				return true;
			}
		}
		return false;
	}
	,splicedAgainst: function(item) {
		var spliceIndex = -1;
		var spliceItem = null;
		var _g1 = 0;
		var _g = this.list.length;
		while(_g1 < _g) {
			var i = _g1++;
			var a = this.list[i];
			if(a.get_uid() == item.get_uid()) {
				spliceItem = a;
				spliceIndex = i;
				break;
			}
		}
		if(spliceItem != null) {
			if(spliceItem.spliceAgainst(item) <= 0) {
				this.list.splice(spliceIndex,1);
			}
			return true;
		}
		return false;
	}
	,getMatchingItem: function(item) {
		var _g1 = 0;
		var _g = this.list.length;
		while(_g1 < _g) {
			var i = _g1++;
			var a = this.list[i];
			if(a.get_uid() == item.get_uid()) {
				return a;
			}
		}
		return null;
	}
	,listContains: function(item) {
		return this.list.indexOf(item) >= 0;
	}
	,get_length: function() {
		return this.list.length;
	}
	,__class__: troshx_ds_IDMatchArray
};
var troshx_ds_IUpdateWith = function() { };
$hxClasses["troshx.ds.IUpdateWith"] = troshx_ds_IUpdateWith;
troshx_ds_IUpdateWith.__name__ = ["troshx","ds","IUpdateWith"];
troshx_ds_IUpdateWith.prototype = {
	__class__: troshx_ds_IUpdateWith
};
var troshx_ds_IValidable = function() { };
$hxClasses["troshx.ds.IValidable"] = troshx_ds_IValidable;
troshx_ds_IValidable.__name__ = ["troshx","ds","IValidable"];
troshx_ds_IValidable.prototype = {
	__class__: troshx_ds_IValidable
};
var troshx_ds_ValueHolder = function(v) {
	this.value = v;
};
$hxClasses["troshx.ds.ValueHolder"] = troshx_ds_ValueHolder;
troshx_ds_ValueHolder.__name__ = ["troshx","ds","ValueHolder"];
troshx_ds_ValueHolder.prototype = {
	__class__: troshx_ds_ValueHolder
};
var troshx_ds_ValueHolder_$Int = function(v) {
	this.value = v;
};
$hxClasses["troshx.ds.ValueHolder_Int"] = troshx_ds_ValueHolder_$Int;
troshx_ds_ValueHolder_$Int.__name__ = ["troshx","ds","ValueHolder_Int"];
troshx_ds_ValueHolder_$Int.prototype = {
	__class__: troshx_ds_ValueHolder_$Int
};
var troshx_sos_core_BoonBane = function(name,costs) {
	this.name = name;
	this.costs = costs;
	this.flags = 0;
	this.clampRank = false;
	this.multipleTimes = 0;
	this.channels = 0;
	this.superChannels = 0;
};
$hxClasses["troshx.sos.core.BoonBane"] = troshx_sos_core_BoonBane;
troshx_sos_core_BoonBane.__name__ = ["troshx","sos","core","BoonBane"];
troshx_sos_core_BoonBane.prototype = {
	isAvailableCharacterCreation: function() {
		return this.costs != troshx_sos_core_BoonBane.COSTLESS_ARRAY;
	}
	,get_uid: function() {
		return this.name;
	}
	,__class__: troshx_sos_core_BoonBane
};
var troshx_sos_core_Boon = function(name,costs) {
	troshx_sos_core_BoonBane.call(this,name,costs);
};
$hxClasses["troshx.sos.core.Boon"] = troshx_sos_core_Boon;
troshx_sos_core_Boon.__name__ = ["troshx","sos","core","Boon"];
troshx_sos_core_Boon.__super__ = troshx_sos_core_BoonBane;
troshx_sos_core_Boon.prototype = $extend(troshx_sos_core_BoonBane.prototype,{
	getEmptyAssignInstance: function($char) {
		return new troshx_sos_core_BoonAssign();
	}
	,getAssign: function(rank,$char) {
		var me = this.getEmptyAssignInstance($char);
		me.boon = this;
		me.rank = rank;
		return me;
	}
	,__class__: troshx_sos_core_Boon
});
var troshx_sos_bnb_Allies = function() {
	troshx_sos_core_Boon.call(this,"Allies",[1,5,10]);
	this.clampRank = true;
	this.multipleTimes = -2;
};
$hxClasses["troshx.sos.bnb.Allies"] = troshx_sos_bnb_Allies;
troshx_sos_bnb_Allies.__name__ = ["troshx","sos","bnb","Allies"];
troshx_sos_bnb_Allies.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Allies.prototype = $extend(troshx_sos_core_Boon.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_AlliesAssign();
	}
	,__class__: troshx_sos_bnb_Allies
});
var troshx_sos_bnb_IBuildUIFields = function() { };
$hxClasses["troshx.sos.bnb.IBuildUIFields"] = troshx_sos_bnb_IBuildUIFields;
troshx_sos_bnb_IBuildUIFields.__name__ = ["troshx","sos","bnb","IBuildUIFields"];
var troshx_sos_core_BoonBaneAssign = function() {
	this._minRequired = 0;
	this._canceled = false;
	this._forcePermanent = false;
	this.discount = 0;
};
$hxClasses["troshx.sos.core.BoonBaneAssign"] = troshx_sos_core_BoonBaneAssign;
troshx_sos_core_BoonBaneAssign.__name__ = ["troshx","sos","core","BoonBaneAssign"];
troshx_sos_core_BoonBaneAssign.__interfaces__ = [troshx_core_IUid];
troshx_sos_core_BoonBaneAssign.prototype = {
	freeze: function() {
	}
	,unfreezeAll: function() {
	}
	,dontCountCost: function() {
		if(!this._canceled) {
			return this._forcePermanent;
		} else {
			return true;
		}
	}
	,cleanup: function() {
	}
	,cleanupUIArrays: function() {
	}
	,onFurtherAdded: function($char) {
	}
	,onRemoved: function($char) {
	}
	,onInited: function($char) {
	}
	,getQty: function() {
		return 1;
	}
	,getCost: function(rank) {
		return 0;
	}
	,getCosting: function(bb,rank) {
		return bb.costs[rank - 1];
	}
	,isValid: function() {
		return true;
	}
	,getBoonOrBane: function() {
		return null;
	}
	,getUIFields: function() {
		return null;
	}
	,get_uid: function() {
		return "";
	}
	,__class__: troshx_sos_core_BoonBaneAssign
};
var troshx_sos_core_BoonAssign = function() {
	troshx_sos_core_BoonBaneAssign.call(this);
};
$hxClasses["troshx.sos.core.BoonAssign"] = troshx_sos_core_BoonAssign;
troshx_sos_core_BoonAssign.__name__ = ["troshx","sos","core","BoonAssign"];
troshx_sos_core_BoonAssign.__interfaces__ = [troshx_ds_IUpdateWith];
troshx_sos_core_BoonAssign.__super__ = troshx_sos_core_BoonBaneAssign;
troshx_sos_core_BoonAssign.prototype = $extend(troshx_sos_core_BoonBaneAssign.prototype,{
	getMaxLength: function(costBase,curLength) {
		return (this._remainingCached + curLength * costBase) / costBase | 0;
	}
	,clampLength: function(length,minClamp) {
		if(minClamp == null) {
			minClamp = 1;
		}
		if(length >= minClamp) {
			return length;
		} else {
			return minClamp;
		}
	}
	,bitmaskIndexCanBeToggledAtCost: function(index,value,cost) {
		var curChecked = (value & 1 << index) != 0;
		var b = this._remainingCached >= cost;
		if(!curChecked) {
			return b;
		} else {
			return true;
		}
	}
	,updateRemainingCache: function(totalRemaining) {
		this._remainingCached = totalRemaining;
	}
	,get_uid: function() {
		return this.boon.name;
	}
	,getCost: function(rank) {
		return this.boon.costs[(rank < 2 ? 1 : rank) - 1];
	}
	,getBaseCost: function(rank) {
		return this.boon.costs[(rank < 2 ? 1 : rank) - 1];
	}
	,getBoonOrBane: function() {
		return this.boon;
	}
	,getUIFields: function() {
		return null;
	}
	,toString: function() {
		return "[BoonAssign: " + this.boon.name + "]";
	}
	,updateAgainst: function(ref) {
	}
	,spliceAgainst: function(ref) {
		return 0;
	}
	,__class__: troshx_sos_core_BoonAssign
});
var troshx_sos_bnb_AlliesAssign = function() {
	this.__hasUIFields__ = true;
	this.majorPowerList = [];
	this.moderatePowerList = [];
	this.minorPowerList = [""];
	troshx_sos_core_BoonAssign.call(this);
};
$hxClasses["troshx.sos.bnb.AlliesAssign"] = troshx_sos_bnb_AlliesAssign;
troshx_sos_bnb_AlliesAssign.__name__ = ["troshx","sos","bnb","AlliesAssign"];
troshx_sos_bnb_AlliesAssign.__super__ = troshx_sos_core_BoonAssign;
troshx_sos_bnb_AlliesAssign.prototype = $extend(troshx_sos_core_BoonAssign.prototype,{
	getQty: function() {
		return this.minorPowerList.length + this.moderatePowerList.length + this.majorPowerList.length;
	}
	,getMaxLengthCost: function(costBase,length) {
		var b = length * costBase;
		return b;
	}
	,getCost: function(rank) {
		return this.getMaxLengthCost(1,this.minorPowerList.length) + this.getMaxLengthCost(5,this.moderatePowerList.length) + this.getMaxLengthCost(10,this.majorPowerList.length);
	}
	,cleanupUIArrays: function() {
		var length = this.minorPowerList.length;
		this.minorPowerList = this.minorPowerList.slice(0,(this._remainingCached + (length >= 1 ? length : 1)) / 1 | 0);
		this.moderatePowerList = this.moderatePowerList.slice(0,(this._remainingCached + this.moderatePowerList.length * 5) / 5 | 0);
		this.majorPowerList = this.majorPowerList.slice(0,(this._remainingCached + this.majorPowerList.length * 10) / 10 | 0);
	}
	,getUIFields: function() {
		var length = this.minorPowerList.length;
		return [{ prop : "minorPowerList", minLength : 0, maxLength : (this._remainingCached + (length >= 1 ? length : 1)) / 1 | 0, of : "String", defaultValue : "", type : "Array", label : "Minor Power List"},{ prop : "moderatePowerList", minLength : 0, maxLength : (this._remainingCached + this.moderatePowerList.length * 5) / 5 | 0, of : "String", defaultValue : "", type : "Array", label : "Moderate Power List"},{ prop : "majorPowerList", minLength : 0, maxLength : (this._remainingCached + this.majorPowerList.length * 10) / 10 | 0, of : "String", defaultValue : "", type : "Array", label : "Major Power List"},{ prop : "notes", type : "textarea", label : "Notes"}];
	}
	,__class__: troshx_sos_bnb_AlliesAssign
});
var troshx_sos_core_Bane = function(name,costs) {
	troshx_sos_core_BoonBane.call(this,name,costs);
	this.isBane = true;
};
$hxClasses["troshx.sos.core.Bane"] = troshx_sos_core_Bane;
troshx_sos_core_Bane.__name__ = ["troshx","sos","core","Bane"];
troshx_sos_core_Bane.__super__ = troshx_sos_core_BoonBane;
troshx_sos_core_Bane.prototype = $extend(troshx_sos_core_BoonBane.prototype,{
	getEmptyAssignInstance: function($char) {
		return new troshx_sos_core_BaneAssign();
	}
	,getAssign: function(rank,$char) {
		var me = this.getEmptyAssignInstance($char);
		me.bane = this;
		me.rank = rank;
		return me;
	}
	,__class__: troshx_sos_core_Bane
});
var troshx_sos_bnb_BadEyes = function() {
	troshx_sos_core_Bane.call(this,"Bad Eyes",[4,6]);
	this.channels = 1;
	this.flags = 2;
};
$hxClasses["troshx.sos.bnb.BadEyes"] = troshx_sos_bnb_BadEyes;
troshx_sos_bnb_BadEyes.__name__ = ["troshx","sos","bnb","BadEyes"];
troshx_sos_bnb_BadEyes.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_BadEyes.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_BadEyes
});
var troshx_sos_bnb_Banes = function() {
};
$hxClasses["troshx.sos.bnb.Banes"] = troshx_sos_bnb_Banes;
troshx_sos_bnb_Banes.__name__ = ["troshx","sos","bnb","Banes"];
troshx_sos_bnb_Banes.getList = function() {
	return [new troshx_sos_bnb_ArrowMagnet(),new troshx_sos_bnb_BadEars(),new troshx_sos_bnb_BadEyes(),new troshx_sos_bnb_BadReputation(),new troshx_sos_bnb_BarrenOrSterility(),new troshx_sos_bnb_Bigoted(),new troshx_sos_bnb_Blind(),new troshx_sos_bnb_Braggart(),new troshx_sos_bnb_BrainDamage(),new troshx_sos_bnb_BrokenLimb(),new troshx_sos_bnb_CompleteMonster(),new troshx_sos_bnb_Craven(),new troshx_sos_bnb_CrippledLimb(),new troshx_sos_bnb_Debt(),new troshx_sos_bnb_DirePast(),new troshx_sos_bnb_Enemies(),new troshx_sos_bnb_FacialDeformity(),new troshx_sos_bnb_Fat(),new troshx_sos_bnb_Frail(),new troshx_sos_bnb_Haemophilia(),new troshx_sos_bnb_Honorable(),new troshx_sos_bnb_Hothead(),new troshx_sos_bnb_LastingPain(),new troshx_sos_bnb_Mute(),new troshx_sos_bnb_Oath(),new troshx_sos_bnb_OldWound(),new troshx_sos_bnb_OneEyed(),new troshx_sos_bnb_Poor(),new troshx_sos_bnb_SeveredLimb(),new troshx_sos_bnb_Sheltered(),new troshx_sos_bnb_Short(),new troshx_sos_bnb_Skinny(),new troshx_sos_bnb_TechnologicallyImpaired(),new troshx_sos_bnb_UnhappilyMarried(),new troshx_sos_bnb_Virtuous(),new troshx_sos_bnb_Wanted()];
};
troshx_sos_bnb_Banes.prototype = {
	__class__: troshx_sos_bnb_Banes
};
var troshx_sos_core_BaneAssign = function() {
	troshx_sos_core_BoonBaneAssign.call(this);
};
$hxClasses["troshx.sos.core.BaneAssign"] = troshx_sos_core_BaneAssign;
troshx_sos_core_BaneAssign.__name__ = ["troshx","sos","core","BaneAssign"];
troshx_sos_core_BaneAssign.__interfaces__ = [troshx_ds_IUpdateWith];
troshx_sos_core_BaneAssign.__super__ = troshx_sos_core_BoonBaneAssign;
troshx_sos_core_BaneAssign.prototype = $extend(troshx_sos_core_BoonBaneAssign.prototype,{
	get_uid: function() {
		return this.bane.name;
	}
	,getCost: function(rank) {
		return this.bane.costs[(rank < 2 ? 1 : rank) - 1];
	}
	,getBaseCost: function(rank) {
		return this.bane.costs[(rank < 2 ? 1 : rank) - 1];
	}
	,getBoonOrBane: function() {
		return this.bane;
	}
	,getUIFields: function() {
		return null;
	}
	,toString: function() {
		return "[BaneAssign: " + this.bane.name + "]";
	}
	,updateAgainst: function(ref) {
	}
	,spliceAgainst: function(ref) {
		return 0;
	}
	,__class__: troshx_sos_core_BaneAssign
});
var troshx_sos_bnb_BaneNotesAssign = function() {
	this.__hasUIFields__ = true;
	this.notes = "";
	troshx_sos_core_BaneAssign.call(this);
};
$hxClasses["troshx.sos.bnb.BaneNotesAssign"] = troshx_sos_bnb_BaneNotesAssign;
troshx_sos_bnb_BaneNotesAssign.__name__ = ["troshx","sos","bnb","BaneNotesAssign"];
troshx_sos_bnb_BaneNotesAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_BaneNotesAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	getUIFields: function() {
		return [{ prop : "notes", type : "textarea", label : "Notes"}];
	}
	,__class__: troshx_sos_bnb_BaneNotesAssign
});
var troshx_sos_bnb_ArrowMagnet = function() {
	troshx_sos_core_Bane.call(this,"Arrow Magnet",[3]);
};
$hxClasses["troshx.sos.bnb.ArrowMagnet"] = troshx_sos_bnb_ArrowMagnet;
troshx_sos_bnb_ArrowMagnet.__name__ = ["troshx","sos","bnb","ArrowMagnet"];
troshx_sos_bnb_ArrowMagnet.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_ArrowMagnet.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_ArrowMagnet
});
var troshx_sos_bnb_BadEars = function() {
	troshx_sos_core_Bane.call(this,"Bad Ears",[2,4]);
	this.channels = 2;
	this.flags = 2;
};
$hxClasses["troshx.sos.bnb.BadEars"] = troshx_sos_bnb_BadEars;
troshx_sos_bnb_BadEars.__name__ = ["troshx","sos","bnb","BadEars"];
troshx_sos_bnb_BadEars.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_BadEars.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_BadEars
});
var troshx_sos_bnb_BadReputation = function() {
	troshx_sos_core_Bane.call(this,"Bad Reputation",[3,6,9]);
};
$hxClasses["troshx.sos.bnb.BadReputation"] = troshx_sos_bnb_BadReputation;
troshx_sos_bnb_BadReputation.__name__ = ["troshx","sos","bnb","BadReputation"];
troshx_sos_bnb_BadReputation.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_BadReputation.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_BadReputation
});
var troshx_sos_bnb_Bigoted = function() {
	troshx_sos_core_Bane.call(this,"Bigoted",[5]);
};
$hxClasses["troshx.sos.bnb.Bigoted"] = troshx_sos_bnb_Bigoted;
troshx_sos_bnb_Bigoted.__name__ = ["troshx","sos","bnb","Bigoted"];
troshx_sos_bnb_Bigoted.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Bigoted.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Bigoted
});
var troshx_sos_bnb_Blind = function() {
	troshx_sos_core_Bane.call(this,"Blind",[20]);
	this.flags = 2;
	this.superChannels = 65;
};
$hxClasses["troshx.sos.bnb.Blind"] = troshx_sos_bnb_Blind;
troshx_sos_bnb_Blind.__name__ = ["troshx","sos","bnb","Blind"];
troshx_sos_bnb_Blind.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Blind.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Blind
});
var troshx_sos_bnb_Braggart = function() {
	troshx_sos_core_Bane.call(this,"Braggart",[3]);
};
$hxClasses["troshx.sos.bnb.Braggart"] = troshx_sos_bnb_Braggart;
troshx_sos_bnb_Braggart.__name__ = ["troshx","sos","bnb","Braggart"];
troshx_sos_bnb_Braggart.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Braggart.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Braggart
});
var troshx_sos_bnb_CompleteMonster = function() {
	troshx_sos_core_Bane.call(this,"Complete Monster",[10]);
	this.channels = 256;
};
$hxClasses["troshx.sos.bnb.CompleteMonster"] = troshx_sos_bnb_CompleteMonster;
troshx_sos_bnb_CompleteMonster.__name__ = ["troshx","sos","bnb","CompleteMonster"];
troshx_sos_bnb_CompleteMonster.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_CompleteMonster.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_CompleteMonster
});
var troshx_sos_bnb_Craven = function() {
	troshx_sos_core_Bane.call(this,"Craven",[4,8]);
	this.channels = 128;
};
$hxClasses["troshx.sos.bnb.Craven"] = troshx_sos_bnb_Craven;
troshx_sos_bnb_Craven.__name__ = ["troshx","sos","bnb","Craven"];
troshx_sos_bnb_Craven.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Craven.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Craven
});
var troshx_sos_bnb_Enemies = function() {
	troshx_sos_core_Bane.call(this,"Enemies",[3,10,15]);
};
$hxClasses["troshx.sos.bnb.Enemies"] = troshx_sos_bnb_Enemies;
troshx_sos_bnb_Enemies.__name__ = ["troshx","sos","bnb","Enemies"];
troshx_sos_bnb_Enemies.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Enemies.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Enemies
});
var troshx_sos_bnb_FacialDeformity = function() {
	troshx_sos_core_Bane.call(this,"Facial Deformity",[2,4,8]);
	this.flags = 2;
};
$hxClasses["troshx.sos.bnb.FacialDeformity"] = troshx_sos_bnb_FacialDeformity;
troshx_sos_bnb_FacialDeformity.__name__ = ["troshx","sos","bnb","FacialDeformity"];
troshx_sos_bnb_FacialDeformity.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_FacialDeformity.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_FacialDeformity
});
var troshx_sos_bnb_Frail = function() {
	troshx_sos_core_Bane.call(this,"Frail",[8]);
	this.channels = 32;
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(12,"Frail",-1)];
};
$hxClasses["troshx.sos.bnb.Frail"] = troshx_sos_bnb_Frail;
troshx_sos_bnb_Frail.__name__ = ["troshx","sos","bnb","Frail"];
troshx_sos_bnb_Frail.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Frail.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Frail
});
var troshx_sos_bnb_Haemophilia = function() {
	troshx_sos_core_Bane.call(this,"Haemophilia",[8]);
	this.flags = 2;
};
$hxClasses["troshx.sos.bnb.Haemophilia"] = troshx_sos_bnb_Haemophilia;
troshx_sos_bnb_Haemophilia.__name__ = ["troshx","sos","bnb","Haemophilia"];
troshx_sos_bnb_Haemophilia.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Haemophilia.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Haemophilia
});
var troshx_sos_bnb_Hothead = function() {
	troshx_sos_core_Bane.call(this,"Hothead",[3]);
};
$hxClasses["troshx.sos.bnb.Hothead"] = troshx_sos_bnb_Hothead;
troshx_sos_bnb_Hothead.__name__ = ["troshx","sos","bnb","Hothead"];
troshx_sos_bnb_Hothead.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Hothead.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Hothead
});
var troshx_sos_bnb_Honorable = function() {
	troshx_sos_core_Bane.call(this,"Honorable",[5]);
	this.channels = 256;
};
$hxClasses["troshx.sos.bnb.Honorable"] = troshx_sos_bnb_Honorable;
troshx_sos_bnb_Honorable.__name__ = ["troshx","sos","bnb","Honorable"];
troshx_sos_bnb_Honorable.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Honorable.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Honorable
});
var troshx_sos_bnb_Mute = function() {
	troshx_sos_core_Bane.call(this,"Mute",[5,8]);
	this.flags = 2;
};
$hxClasses["troshx.sos.bnb.Mute"] = troshx_sos_bnb_Mute;
troshx_sos_bnb_Mute.__name__ = ["troshx","sos","bnb","Mute"];
troshx_sos_bnb_Mute.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Mute.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Mute
});
var troshx_sos_bnb_OneEyed = function() {
	troshx_sos_core_Bane.call(this,"One-Eyed",[10]);
	this.flags = 2;
	this.channels = 64;
	var m = troshx_sos_core_StaticModifier.create(13,"One-Eyed",-1);
	m.next = troshx_sos_core_StaticModifier.create(15,"One-Eyed",-2);
	this.staticModifiers = [m];
};
$hxClasses["troshx.sos.bnb.OneEyed"] = troshx_sos_bnb_OneEyed;
troshx_sos_bnb_OneEyed.__name__ = ["troshx","sos","bnb","OneEyed"];
troshx_sos_bnb_OneEyed.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_OneEyed.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_OneEyed
});
var troshx_sos_bnb_Sheltered = function() {
	troshx_sos_core_Bane.call(this,"Sheltered",[2,4,6]);
	this.flags = 1;
	this.channels = 16;
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(20,"Sheltered (i)",-1),troshx_sos_core_StaticModifier.create(20,"Sheltered (ii)",-2),troshx_sos_core_StaticModifier.create(20,"Sheltered (iii)",-3)];
};
$hxClasses["troshx.sos.bnb.Sheltered"] = troshx_sos_bnb_Sheltered;
troshx_sos_bnb_Sheltered.__name__ = ["troshx","sos","bnb","Sheltered"];
troshx_sos_bnb_Sheltered.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Sheltered.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Sheltered
});
var troshx_sos_bnb_Short = function() {
	troshx_sos_core_Bane.call(this,"Short",[8,15]);
	this.channels = 512;
	var m = troshx_sos_core_StaticModifier.create(14,"Short (i)",-1);
	m.next = troshx_sos_core_StaticModifier.create(9,"Short (i)",-1);
	var m2 = troshx_sos_core_StaticModifier.create(14,"Short (ii)",-2);
	m2.next = troshx_sos_core_StaticModifier.create(9,"Short (ii)",-2);
	this.staticModifiers = [m,m2];
};
$hxClasses["troshx.sos.bnb.Short"] = troshx_sos_bnb_Short;
troshx_sos_bnb_Short.__name__ = ["troshx","sos","bnb","Short"];
troshx_sos_bnb_Short.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Short.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Short
});
var troshx_sos_bnb_TechnologicallyImpaired = function() {
	troshx_sos_core_Bane.call(this,"Technologically Impaired",[5]);
};
$hxClasses["troshx.sos.bnb.TechnologicallyImpaired"] = troshx_sos_bnb_TechnologicallyImpaired;
troshx_sos_bnb_TechnologicallyImpaired.__name__ = ["troshx","sos","bnb","TechnologicallyImpaired"];
troshx_sos_bnb_TechnologicallyImpaired.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_TechnologicallyImpaired.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_TechnologicallyImpaired
});
var troshx_sos_bnb_UnhappilyMarried = function() {
	troshx_sos_core_Bane.call(this,"Unhappily Married",[1,2,3]);
};
$hxClasses["troshx.sos.bnb.UnhappilyMarried"] = troshx_sos_bnb_UnhappilyMarried;
troshx_sos_bnb_UnhappilyMarried.__name__ = ["troshx","sos","bnb","UnhappilyMarried"];
troshx_sos_bnb_UnhappilyMarried.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_UnhappilyMarried.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_UnhappilyMarried
});
var troshx_sos_bnb_Virtuous = function() {
	troshx_sos_core_Bane.call(this,"Virtuous",[5]);
};
$hxClasses["troshx.sos.bnb.Virtuous"] = troshx_sos_bnb_Virtuous;
troshx_sos_bnb_Virtuous.__name__ = ["troshx","sos","bnb","Virtuous"];
troshx_sos_bnb_Virtuous.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Virtuous.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Virtuous
});
var troshx_sos_bnb_Wanted = function() {
	troshx_sos_core_Bane.call(this,"Wanted",[5,10,15]);
};
$hxClasses["troshx.sos.bnb.Wanted"] = troshx_sos_bnb_Wanted;
troshx_sos_bnb_Wanted.__name__ = ["troshx","sos","bnb","Wanted"];
troshx_sos_bnb_Wanted.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Wanted.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Wanted
});
var troshx_sos_bnb_BarrenOrSterility = function() {
	troshx_sos_core_Bane.call(this,"Barren/Sterility",[1,3]);
	this.flags = 2;
	this.conditions = [null,new troshx_sos_bnb_EunuchCondition()];
};
$hxClasses["troshx.sos.bnb.BarrenOrSterility"] = troshx_sos_bnb_BarrenOrSterility;
troshx_sos_bnb_BarrenOrSterility.__name__ = ["troshx","sos","bnb","BarrenOrSterility"];
troshx_sos_bnb_BarrenOrSterility.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_BarrenOrSterility.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_BarrenOrSterility
});
var troshx_sos_core_BoonBaneCondition = function() {
};
$hxClasses["troshx.sos.core.BoonBaneCondition"] = troshx_sos_core_BoonBaneCondition;
troshx_sos_core_BoonBaneCondition.__name__ = ["troshx","sos","core","BoonBaneCondition"];
troshx_sos_core_BoonBaneCondition.prototype = {
	valid: function($char) {
		return true;
	}
	,__class__: troshx_sos_core_BoonBaneCondition
};
var troshx_sos_bnb_EunuchCondition = function() {
	troshx_sos_core_BoonBaneCondition.call(this);
};
$hxClasses["troshx.sos.bnb.EunuchCondition"] = troshx_sos_bnb_EunuchCondition;
troshx_sos_bnb_EunuchCondition.__name__ = ["troshx","sos","bnb","EunuchCondition"];
troshx_sos_bnb_EunuchCondition.__super__ = troshx_sos_core_BoonBaneCondition;
troshx_sos_bnb_EunuchCondition.prototype = $extend(troshx_sos_core_BoonBaneCondition.prototype,{
	valid: function($char) {
		return $char.gender == 0;
	}
	,__class__: troshx_sos_bnb_EunuchCondition
});
var troshx_sos_bnb_Boons = function() {
};
$hxClasses["troshx.sos.bnb.Boons"] = troshx_sos_bnb_Boons;
troshx_sos_bnb_Boons.__name__ = ["troshx","sos","bnb","Boons"];
troshx_sos_bnb_Boons.getList = function() {
	return [new troshx_sos_bnb_Allies(),new troshx_sos_bnb_Ambidextrous(),new troshx_sos_bnb_AnimalAffinity(),new troshx_sos_bnb_Beautiful(),new troshx_sos_bnb_Berserker(),new troshx_sos_bnb_Bloodthirsty(),new troshx_sos_bnb_Brave(),new troshx_sos_bnb_Contacts(),new troshx_sos_bnb_DirectionSense(),new troshx_sos_bnb_Estate(),new troshx_sos_bnb_Famous(),new troshx_sos_bnb_Favor(),new troshx_sos_bnb_FolksBackHome(),new troshx_sos_bnb_Follower(),new troshx_sos_bnb_GoodEars(),new troshx_sos_bnb_GoodEyes(),new troshx_sos_bnb_GoodNose(),new troshx_sos_bnb_HaleAndHearty(),new troshx_sos_bnb_ImpressiveVoice(),new troshx_sos_bnb_KnownForVirtue(),new troshx_sos_bnb_Language(),new troshx_sos_bnb_Literate(),new troshx_sos_bnb_NaturalBornKiller(),new troshx_sos_bnb_NaturalLeader(),new troshx_sos_bnb_Rich(),new troshx_sos_bnb_Robust(),new troshx_sos_bnb_Tall(),new troshx_sos_bnb_TrueGrit()];
};
troshx_sos_bnb_Boons.prototype = {
	__class__: troshx_sos_bnb_Boons
};
var troshx_sos_bnb_BoonNotesAssign = function() {
	this.notes = "";
	troshx_sos_core_BoonAssign.call(this);
};
$hxClasses["troshx.sos.bnb.BoonNotesAssign"] = troshx_sos_bnb_BoonNotesAssign;
troshx_sos_bnb_BoonNotesAssign.__name__ = ["troshx","sos","bnb","BoonNotesAssign"];
troshx_sos_bnb_BoonNotesAssign.__super__ = troshx_sos_core_BoonAssign;
troshx_sos_bnb_BoonNotesAssign.prototype = $extend(troshx_sos_core_BoonAssign.prototype,{
	getUIFields: function() {
		return [];
	}
	,__class__: troshx_sos_bnb_BoonNotesAssign
});
var troshx_sos_bnb_Ambidextrous = function() {
	troshx_sos_core_Boon.call(this,"Ambidextrous",[3]);
	this.flags = 1;
};
$hxClasses["troshx.sos.bnb.Ambidextrous"] = troshx_sos_bnb_Ambidextrous;
troshx_sos_bnb_Ambidextrous.__name__ = ["troshx","sos","bnb","Ambidextrous"];
troshx_sos_bnb_Ambidextrous.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Ambidextrous.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Ambidextrous
});
var troshx_sos_bnb_AnimalAffinity = function() {
	troshx_sos_core_Boon.call(this,"Animal Affinity",[2,4,6]);
};
$hxClasses["troshx.sos.bnb.AnimalAffinity"] = troshx_sos_bnb_AnimalAffinity;
troshx_sos_bnb_AnimalAffinity.__name__ = ["troshx","sos","bnb","AnimalAffinity"];
troshx_sos_bnb_AnimalAffinity.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_AnimalAffinity.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_AnimalAffinity
});
var troshx_sos_bnb_Beautiful = function() {
	troshx_sos_core_Boon.call(this,"Beautiful",[3,6]);
};
$hxClasses["troshx.sos.bnb.Beautiful"] = troshx_sos_bnb_Beautiful;
troshx_sos_bnb_Beautiful.__name__ = ["troshx","sos","bnb","Beautiful"];
troshx_sos_bnb_Beautiful.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Beautiful.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Beautiful
});
var troshx_sos_bnb_Berserker = function() {
	troshx_sos_core_Boon.call(this,"Berserker",[8,12]);
	var m = troshx_sos_core_StaticModifier.create(13,"Berserker",4);
	this.staticModifiers = [m,m];
};
$hxClasses["troshx.sos.bnb.Berserker"] = troshx_sos_bnb_Berserker;
troshx_sos_bnb_Berserker.__name__ = ["troshx","sos","bnb","Berserker"];
troshx_sos_bnb_Berserker.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Berserker.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Berserker
});
var troshx_sos_bnb_Bloodthirsty = function() {
	troshx_sos_core_Boon.call(this,"Bloodthirsty",[4]);
};
$hxClasses["troshx.sos.bnb.Bloodthirsty"] = troshx_sos_bnb_Bloodthirsty;
troshx_sos_bnb_Bloodthirsty.__name__ = ["troshx","sos","bnb","Bloodthirsty"];
troshx_sos_bnb_Bloodthirsty.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Bloodthirsty.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Bloodthirsty
});
var troshx_sos_bnb_Brave = function() {
	troshx_sos_core_Boon.call(this,"Brave",[3]);
};
$hxClasses["troshx.sos.bnb.Brave"] = troshx_sos_bnb_Brave;
troshx_sos_bnb_Brave.__name__ = ["troshx","sos","bnb","Brave"];
troshx_sos_bnb_Brave.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Brave.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Brave
});
var troshx_sos_bnb_Contacts = function() {
	troshx_sos_core_Boon.call(this,"Contacts",[1,4,6,8]);
};
$hxClasses["troshx.sos.bnb.Contacts"] = troshx_sos_bnb_Contacts;
troshx_sos_bnb_Contacts.__name__ = ["troshx","sos","bnb","Contacts"];
troshx_sos_bnb_Contacts.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Contacts.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Contacts
});
var troshx_sos_bnb_DirectionSense = function() {
	troshx_sos_core_Boon.call(this,"Direction Sense",[3]);
};
$hxClasses["troshx.sos.bnb.DirectionSense"] = troshx_sos_bnb_DirectionSense;
troshx_sos_bnb_DirectionSense.__name__ = ["troshx","sos","bnb","DirectionSense"];
troshx_sos_bnb_DirectionSense.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_DirectionSense.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_DirectionSense
});
var troshx_sos_bnb_Famous = function() {
	troshx_sos_core_Boon.call(this,"Famous",[2,4]);
};
$hxClasses["troshx.sos.bnb.Famous"] = troshx_sos_bnb_Famous;
troshx_sos_bnb_Famous.__name__ = ["troshx","sos","bnb","Famous"];
troshx_sos_bnb_Famous.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Famous.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Famous
});
var troshx_sos_bnb_FolksBackHome = function() {
	troshx_sos_core_Boon.call(this,"Folks Back Home",[3,6,8]);
};
$hxClasses["troshx.sos.bnb.FolksBackHome"] = troshx_sos_bnb_FolksBackHome;
troshx_sos_bnb_FolksBackHome.__name__ = ["troshx","sos","bnb","FolksBackHome"];
troshx_sos_bnb_FolksBackHome.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_FolksBackHome.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_FolksBackHome
});
var troshx_sos_bnb_GoodEars = function() {
	troshx_sos_core_Boon.call(this,"Good Ears",[3]);
	this.channels = 2;
};
$hxClasses["troshx.sos.bnb.GoodEars"] = troshx_sos_bnb_GoodEars;
troshx_sos_bnb_GoodEars.__name__ = ["troshx","sos","bnb","GoodEars"];
troshx_sos_bnb_GoodEars.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_GoodEars.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_GoodEars
});
var troshx_sos_bnb_GoodEyes = function() {
	troshx_sos_core_Boon.call(this,"Good Eyes",[3]);
	this.channels = 1;
};
$hxClasses["troshx.sos.bnb.GoodEyes"] = troshx_sos_bnb_GoodEyes;
troshx_sos_bnb_GoodEyes.__name__ = ["troshx","sos","bnb","GoodEyes"];
troshx_sos_bnb_GoodEyes.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_GoodEyes.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_GoodEyes
});
var troshx_sos_bnb_GoodNose = function() {
	troshx_sos_core_Boon.call(this,"Good Nose",[3]);
	this.channels = 4;
};
$hxClasses["troshx.sos.bnb.GoodNose"] = troshx_sos_bnb_GoodNose;
troshx_sos_bnb_GoodNose.__name__ = ["troshx","sos","bnb","GoodNose"];
troshx_sos_bnb_GoodNose.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_GoodNose.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_GoodNose
});
var troshx_sos_bnb_HaleAndHearty = function() {
	troshx_sos_core_Boon.call(this,"Hale and Hearty",[2,4]);
};
$hxClasses["troshx.sos.bnb.HaleAndHearty"] = troshx_sos_bnb_HaleAndHearty;
troshx_sos_bnb_HaleAndHearty.__name__ = ["troshx","sos","bnb","HaleAndHearty"];
troshx_sos_bnb_HaleAndHearty.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_HaleAndHearty.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_HaleAndHearty
});
var troshx_sos_bnb_KnownForVirtue = function() {
	troshx_sos_core_Boon.call(this,"Known for Virtue",[5]);
};
$hxClasses["troshx.sos.bnb.KnownForVirtue"] = troshx_sos_bnb_KnownForVirtue;
troshx_sos_bnb_KnownForVirtue.__name__ = ["troshx","sos","bnb","KnownForVirtue"];
troshx_sos_bnb_KnownForVirtue.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_KnownForVirtue.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_KnownForVirtue
});
var troshx_sos_bnb_NaturalBornKiller = function() {
	troshx_sos_core_Boon.call(this,"Natural Born Killer",[6,12,18]);
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(13,"Natural Born Killer (i)",1),troshx_sos_core_StaticModifier.create(13,"Natural Born Killer (ii)",2),troshx_sos_core_StaticModifier.create(13,"Natural Born Killer (iii)",3)];
};
$hxClasses["troshx.sos.bnb.NaturalBornKiller"] = troshx_sos_bnb_NaturalBornKiller;
troshx_sos_bnb_NaturalBornKiller.__name__ = ["troshx","sos","bnb","NaturalBornKiller"];
troshx_sos_bnb_NaturalBornKiller.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_NaturalBornKiller.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_NaturalBornKiller
});
var troshx_sos_bnb_NaturalLeader = function() {
	troshx_sos_core_Boon.call(this,"Natural Leader",[3]);
};
$hxClasses["troshx.sos.bnb.NaturalLeader"] = troshx_sos_bnb_NaturalLeader;
troshx_sos_bnb_NaturalLeader.__name__ = ["troshx","sos","bnb","NaturalLeader"];
troshx_sos_bnb_NaturalLeader.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_NaturalLeader.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_NaturalLeader
});
var troshx_sos_bnb_Tall = function() {
	troshx_sos_core_Boon.call(this,"Tall",[8,12]);
	this.flags = 1;
	this.channels = 512;
	this.staticModifiers = [null,troshx_sos_core_StaticModifier.create(14,"Tall",1)];
};
$hxClasses["troshx.sos.bnb.Tall"] = troshx_sos_bnb_Tall;
troshx_sos_bnb_Tall.__name__ = ["troshx","sos","bnb","Tall"];
troshx_sos_bnb_Tall.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Tall.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Tall
});
var troshx_sos_bnb_TrueGrit = function() {
	troshx_sos_core_Boon.call(this,"True Grit",[2,4,6]);
	this.flags = 1;
	this.channels = 16;
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(20,"True Grit (i)",1),troshx_sos_core_StaticModifier.create(20,"True Grit (ii)",2),troshx_sos_core_StaticModifier.create(20,"True Grit (iii)",3)];
};
$hxClasses["troshx.sos.bnb.TrueGrit"] = troshx_sos_bnb_TrueGrit;
troshx_sos_bnb_TrueGrit.__name__ = ["troshx","sos","bnb","TrueGrit"];
troshx_sos_bnb_TrueGrit.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_TrueGrit.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_TrueGrit
});
var troshx_sos_bnb_Rich = function() {
	troshx_sos_core_Boon.call(this,"Rich",[1,3,5]);
	this.channels = 8;
	this.flags = 1;
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(19,"Rich (i)",0,1.1),troshx_sos_core_StaticModifier.create(19,"Rich (ii)",0,1.5),troshx_sos_core_StaticModifier.create(19,"Rich (iii)",0,2)];
};
$hxClasses["troshx.sos.bnb.Rich"] = troshx_sos_bnb_Rich;
troshx_sos_bnb_Rich.__name__ = ["troshx","sos","bnb","Rich"];
troshx_sos_bnb_Rich.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Rich.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Rich
});
var troshx_sos_bnb_Robust = function() {
	troshx_sos_core_Boon.call(this,"Robust",[8]);
	this.channels = 32;
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(12,"Robust",1)];
};
$hxClasses["troshx.sos.bnb.Robust"] = troshx_sos_bnb_Robust;
troshx_sos_bnb_Robust.__name__ = ["troshx","sos","bnb","Robust"];
troshx_sos_bnb_Robust.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Robust.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Robust
});
var troshx_sos_bnb_BrainDamage = function() {
	troshx_sos_core_Bane.call(this,"Brain Damage",[4,8]);
	this.flags = 2;
	this.multipleTimes = -2;
	this.clampRank = true;
};
$hxClasses["troshx.sos.bnb.BrainDamage"] = troshx_sos_bnb_BrainDamage;
troshx_sos_bnb_BrainDamage.__name__ = ["troshx","sos","bnb","BrainDamage"];
troshx_sos_bnb_BrainDamage.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_BrainDamage.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_BrainDamageAssign(charSheet);
	}
	,__class__: troshx_sos_bnb_BrainDamage
});
var troshx_sos_bnb_BrainDamageAssign = function($char) {
	this.__hasUIFields__ = true;
	this.intModifier = troshx_sos_core_StaticModifier.create(6,"Brain Damage",0);
	this.count2 = 0;
	this.count1 = 0;
	troshx_sos_core_BaneAssign.call(this);
	this["char"] = $char;
	this.oldWound = new troshx_sos_bnb_OldWound().getAssign(0,$char);
	this.mute = new troshx_sos_bnb_Mute().getAssign(0,$char);
	this.lastingPain = new troshx_sos_bnb_LastingPain().getAssign(0,$char);
	this.badEyes = new troshx_sos_bnb_BadEyes().getAssign(0,$char);
	this.badEars = new troshx_sos_bnb_BadEars().getAssign(0,$char);
	this.blind = new troshx_sos_bnb_Blind().getAssign(0,$char);
	this.oneEyed = new troshx_sos_bnb_OneEyed().getAssign(0,$char);
};
$hxClasses["troshx.sos.bnb.BrainDamageAssign"] = troshx_sos_bnb_BrainDamageAssign;
troshx_sos_bnb_BrainDamageAssign.__name__ = ["troshx","sos","bnb","BrainDamageAssign"];
troshx_sos_bnb_BrainDamageAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_BrainDamageAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	callbackUITrigger: function(obj,prop) {
		this.execute(prop == "count1" ? 0 : 1);
		return this.baneQueue;
	}
	,gainBane: function(baneAssign,rank) {
		var rankSet = baneAssign.bane.clampRank ? 1 : rank;
		if(baneAssign.rank >= rankSet) {
			rankSet = baneAssign.rank;
		}
		baneAssign.rank = rankSet;
		baneAssign._minRequired = rankSet;
		baneAssign.discount = baneAssign._costCached = baneAssign.getCost(rankSet);
		this.baneQueue.push(baneAssign);
	}
	,execute: function(indexRank) {
		this._minRequired = 1;
		var add2;
		if(indexRank == 0) {
			this.count1++;
			add2 = 0;
		} else {
			this.count2++;
			add2 = 2;
		}
		if(this["char"].ingame) {
			this.intModifier.add -= (Math.random() * (indexRank == 0 ? 2 : 5) | 0) + 1;
			if(this.intModifier.add != 0 && !this["char"].hasStaticModifier(this.intModifier)) {
				var _this = this["char"];
				var modifier = this.intModifier;
				if(modifier != null) {
					var t = _this.staticModifierTable[modifier.index];
					t.push(modifier);
					var m = modifier.next;
					while(m != null) {
						t = _this.staticModifierTable[m.index];
						t.push(m);
						m = m.next;
					}
				}
			}
		}
		var _this1 = this["char"].banes;
		var id = this.oldWound.get_uid();
		var otherOldWounds = Reflect.field(_this1.hash,id);
		var _this2 = this["char"].banes;
		var id1 = this.lastingPain.get_uid();
		var otherLastingPain = Reflect.field(_this2.hash,id1);
		if(otherOldWounds == this.oldWound) {
			otherOldWounds = null;
		}
		if(otherLastingPain == this.lastingPain) {
			otherLastingPain = null;
		}
		this.baneQueue = [];
		var rIndex = (Math.random() * 10 | 0) + add2 + 1;
		switch(rIndex) {
		case 1:
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:
			if(this.blind.rank == 0) {
				this.gainBane(this.badEyes,1);
			}
			break;
		case 5:
			this.gainBane(this.badEars,2);
			break;
		case 6:
			this.gainBane(this.oldWound.inflictRandom(),1);
			if(otherOldWounds != null) {
				this.oldWound.mergeWith(otherOldWounds);
			}
			this.gainBane(this.badEars,1);
			break;
		case 7:
			this.gainBane(this.oldWound.inflictRandom(),1);
			if(otherOldWounds != null) {
				this.oldWound.mergeWith(otherOldWounds);
			}
			this.gainBane(this.badEars,2);
			break;
		case 8:
			this.gainBane(this.oldWound.inflictRandom(),1);
			if(otherOldWounds != null) {
				this.oldWound.mergeWith(otherOldWounds);
			}
			if(this.blind.rank == 0) {
				this.gainBane(this.oneEyed,1);
			}
			break;
		case 9:
			this.gainBane(this.oldWound.inflictRandom(),1);
			if(otherOldWounds != null) {
				this.oldWound.mergeWith(otherOldWounds);
			}
			this.gainBane(this.mute,1);
			break;
		case 10:
			this.gainBane(this.oldWound.inflictRandom(),1);
			if(otherOldWounds != null) {
				this.oldWound.mergeWith(otherOldWounds);
			}
			this.gainBane(this.lastingPain.inflictRandomMinor(),1);
			if(otherLastingPain != null) {
				this.lastingPain.mergeWith(otherLastingPain);
			}
			break;
		case 11:
			this.gainBane(this.oldWound.inflictRandom(),1);
			if(otherOldWounds != null) {
				this.oldWound.mergeWith(otherOldWounds);
			}
			this.gainBane(this.lastingPain.inflictRandomMinor(),1);
			if(otherLastingPain != null) {
				this.lastingPain.mergeWith(otherLastingPain);
			}
			if(this["char"].ingame) {
				this["char"].intelligence -= 2;
			}
			break;
		case 12:
			this.gainBane(this.oldWound.inflictRandom(),1);
			if(otherOldWounds != null) {
				this.oldWound.mergeWith(otherOldWounds);
			}
			this.gainBane(this.lastingPain.inflictRandomMajor(),2);
			if(otherLastingPain != null) {
				this.lastingPain.mergeWith(otherLastingPain);
			}
			this.gainBane(this.blind,1);
			break;
		default:
			console.log("Warning, unforeseen roll index number detected: " + rIndex);
		}
	}
	,getCost: function(rank) {
		return this.count1 * 4 + this.count2 * 8;
	}
	,getUIFields: function() {
		return [{ prop : "count1", label : "Trigger Brain Damage (4)", type : "ButtonCounter", callback : $bind(this,this.callbackUITrigger), preventDefault : true},{ prop : "count2", label : "Trigger Brain Damage (8)", type : "ButtonCounter", callback : $bind(this,this.callbackUITrigger), preventDefault : true}];
	}
	,__class__: troshx_sos_bnb_BrainDamageAssign
});
var troshx_sos_bnb_BrokenLimb = function() {
	troshx_sos_core_Bane.call(this,"Broken Limb",troshx_sos_core_BoonBane.COSTLESS_ARRAY);
	this.flags = 2;
	this.multipleTimes = -2;
};
$hxClasses["troshx.sos.bnb.BrokenLimb"] = troshx_sos_bnb_BrokenLimb;
troshx_sos_bnb_BrokenLimb.__name__ = ["troshx","sos","bnb","BrokenLimb"];
troshx_sos_bnb_BrokenLimb.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_BrokenLimb.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		var b = new troshx_sos_bnb_BrokenLimbAssign();
		return b;
	}
	,__class__: troshx_sos_bnb_BrokenLimb
});
var troshx_sos_bnb_BrokenLimbAssign = function() {
	this.__hasUIFields__ = true;
	this.affectedLimbs = 0;
	troshx_sos_core_BaneAssign.call(this);
	var m = new troshx_sos_bnb_BrokenLimbMOBModifier(this);
	this.situationalModifiers = [m];
};
$hxClasses["troshx.sos.bnb.BrokenLimbAssign"] = troshx_sos_bnb_BrokenLimbAssign;
troshx_sos_bnb_BrokenLimbAssign.__name__ = ["troshx","sos","bnb","BrokenLimbAssign"];
troshx_sos_bnb_BrokenLimbAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_BrokenLimbAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	isValid: function() {
		return this.affectedLimbs > 0;
	}
	,getCost: function(rank) {
		return this.getQty() * troshx_sos_core_BaneAssign.prototype.getCost.call(this,rank);
	}
	,getQty: function() {
		var c = 0;
		c += (this.affectedLimbs & 1) != 0 ? 1 : 0;
		c += (this.affectedLimbs & 2) != 0 ? 1 : 0;
		c += (this.affectedLimbs & 4) != 0 ? 1 : 0;
		c += (this.affectedLimbs & 8) != 0 ? 1 : 0;
		return c;
	}
	,getUIFields: function() {
		return [{ prop : "affectedLimbs", type : "Bitmask", labels : ["Left Arm","Right Arm","Left Leg","Right Leg"], label : "Affected Limbs"}];
	}
	,__class__: troshx_sos_bnb_BrokenLimbAssign
});
var troshx_sos_core_SituationalCharModifier = function(index,name) {
	this.index = index;
	this.name = name;
};
$hxClasses["troshx.sos.core.SituationalCharModifier"] = troshx_sos_core_SituationalCharModifier;
troshx_sos_core_SituationalCharModifier.__name__ = ["troshx","sos","core","SituationalCharModifier"];
troshx_sos_core_SituationalCharModifier.prototype = {
	get_name: function() {
		return this.name;
	}
	,_setIndex: function(index) {
		this.index = index;
	}
	,getModifiedValueMultiply: function($char,base,value) {
		return value;
	}
	,getModifiedValueAdd: function($char,base,value) {
		return value;
	}
	,__class__: troshx_sos_core_SituationalCharModifier
};
var troshx_sos_bnb_BrokenLimbMOBModifier = function(current) {
	troshx_sos_core_SituationalCharModifier.call(this,9,"Broken Limb");
	this.current = current;
};
$hxClasses["troshx.sos.bnb.BrokenLimbMOBModifier"] = troshx_sos_bnb_BrokenLimbMOBModifier;
troshx_sos_bnb_BrokenLimbMOBModifier.__name__ = ["troshx","sos","bnb","BrokenLimbMOBModifier"];
troshx_sos_bnb_BrokenLimbMOBModifier.__super__ = troshx_sos_core_SituationalCharModifier;
troshx_sos_bnb_BrokenLimbMOBModifier.prototype = $extend(troshx_sos_core_SituationalCharModifier.prototype,{
	getModifiedValueMultiply: function($char,base,value) {
		if((this.current.affectedLimbs & 12) != 0) {
			var equipedItems = $char.inventory.wornArmor;
			var crutchesHeld = 0;
			var affected = 0;
			var leftHanded = $char.leftHanded;
			affected |= (this.current.affectedLimbs & 4) != 0 ? $char.leftHanded ? 1 : 2 : 0;
			affected |= (this.current.affectedLimbs & 8) != 0 ? $char.leftHanded ? 2 : 1 : 0;
			var _g1 = 0;
			var _g = equipedItems.length;
			while(_g1 < _g) {
				var i = _g1++;
				var entry = equipedItems[i];
			}
			if(crutchesHeld == 0) {
				if(value < 1) {
					return value;
				} else {
					return 1;
				}
			} else {
				affected &= ~crutchesHeld;
				var mob = base;
				var multiplier = affected == 0 ? 0.25 : 0.125;
				if(mob * multiplier < value) {
					return mob * multiplier;
				} else {
					return value;
				}
			}
		}
		return value;
	}
	,__class__: troshx_sos_bnb_BrokenLimbMOBModifier
});
var troshx_sos_bnb_CrippledLimb = function() {
	troshx_sos_core_Bane.call(this,"Crippled Limb/Appendage",[8]);
	this.flags = 2;
	this.multipleTimes = -2;
};
$hxClasses["troshx.sos.bnb.CrippledLimb"] = troshx_sos_bnb_CrippledLimb;
troshx_sos_bnb_CrippledLimb.__name__ = ["troshx","sos","bnb","CrippledLimb"];
troshx_sos_bnb_CrippledLimb.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_CrippledLimb.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_CrippledLimbAssign();
	}
	,__class__: troshx_sos_bnb_CrippledLimb
});
var troshx_sos_bnb_CrippledLimbAssign = function() {
	this.__hasUIFields__ = true;
	this.affectedLimbs = 0;
	troshx_sos_core_BaneAssign.call(this);
	var m = new troshx_sos_bnb_CrippedLimbMOBModifier(this);
	this.situationalModifiers = [m];
};
$hxClasses["troshx.sos.bnb.CrippledLimbAssign"] = troshx_sos_bnb_CrippledLimbAssign;
troshx_sos_bnb_CrippledLimbAssign.__name__ = ["troshx","sos","bnb","CrippledLimbAssign"];
troshx_sos_bnb_CrippledLimbAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_CrippledLimbAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	isValid: function() {
		return this.getQty() > 0;
	}
	,getCost: function(rank) {
		return this.getQty() * troshx_sos_core_BaneAssign.prototype.getCost.call(this,rank);
	}
	,getQty: function() {
		var c = 0;
		c += (this.affectedLimbs & 1) != 0 ? 1 : 0;
		c += (this.affectedLimbs & 2) != 0 ? 1 : 0;
		c += (this.affectedLimbs & 4) != 0 ? 1 : 0;
		c += (this.affectedLimbs & 8) != 0 ? 1 : 0;
		return c;
	}
	,getUIFields: function() {
		return [{ prop : "affectedLimbs", type : "Bitmask", labels : ["Left Arm","Right Arm","Left Leg","Right Leg"], label : "Affected Limbs"}];
	}
	,__class__: troshx_sos_bnb_CrippledLimbAssign
});
var troshx_sos_bnb_CrippedLimbMOBModifier = function(current) {
	troshx_sos_core_SituationalCharModifier.call(this,9,"Crippled Limb/Appendage");
	this.current = current;
};
$hxClasses["troshx.sos.bnb.CrippedLimbMOBModifier"] = troshx_sos_bnb_CrippedLimbMOBModifier;
troshx_sos_bnb_CrippedLimbMOBModifier.__name__ = ["troshx","sos","bnb","CrippedLimbMOBModifier"];
troshx_sos_bnb_CrippedLimbMOBModifier.__super__ = troshx_sos_core_SituationalCharModifier;
troshx_sos_bnb_CrippedLimbMOBModifier.prototype = $extend(troshx_sos_core_SituationalCharModifier.prototype,{
	getModifiedValueMultiply: function($char,base,value) {
		if((this.current.affectedLimbs & 12) != 0) {
			var multipler = this.current.affectedLimbs == 12 ? .25 : .5;
			var mob = base;
			if(mob * multipler < value) {
				return mob * multipler;
			} else {
				return value;
			}
		}
		return value;
	}
	,__class__: troshx_sos_bnb_CrippedLimbMOBModifier
});
var troshx_sos_bnb_Debt = function() {
	troshx_sos_core_Bane.call(this,"Debt",[2,4,8]);
};
$hxClasses["troshx.sos.bnb.Debt"] = troshx_sos_bnb_Debt;
troshx_sos_bnb_Debt.__name__ = ["troshx","sos","bnb","Debt"];
troshx_sos_bnb_Debt.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Debt.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_DebtAssign();
	}
	,__class__: troshx_sos_bnb_Debt
});
var troshx_sos_bnb_DebtAssign = function() {
	this.__hasUIFields__ = true;
	this.currentOwed = new troshx_sos_core_Money();
	troshx_sos_core_BaneAssign.call(this);
};
$hxClasses["troshx.sos.bnb.DebtAssign"] = troshx_sos_bnb_DebtAssign;
troshx_sos_bnb_DebtAssign.__name__ = ["troshx","sos","bnb","DebtAssign"];
troshx_sos_bnb_DebtAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_DebtAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	getUIFields: function() {
		return [{ prop : "currentOwed", type : "Money", label : "Current Owed"}];
	}
	,__class__: troshx_sos_bnb_DebtAssign
});
var troshx_sos_bnb_DirePast = function() {
	troshx_sos_core_Bane.call(this,"Dire Past",[0]);
	this.flags = 3;
};
$hxClasses["troshx.sos.bnb.DirePast"] = troshx_sos_bnb_DirePast;
troshx_sos_bnb_DirePast.__name__ = ["troshx","sos","bnb","DirePast"];
troshx_sos_bnb_DirePast.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_DirePast.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_DirePastAssign(charSheet);
	}
	,__class__: troshx_sos_bnb_DirePast
});
var troshx_sos_bnb_DirePastAssign = function($char) {
	this.__hasUIFields__ = true;
	this.notes = "";
	troshx_sos_core_BaneAssign.call(this);
	this["char"] = $char;
	this.uiActivated = this["char"].direPast;
};
$hxClasses["troshx.sos.bnb.DirePastAssign"] = troshx_sos_bnb_DirePastAssign;
troshx_sos_bnb_DirePastAssign.__name__ = ["troshx","sos","bnb","DirePastAssign"];
troshx_sos_bnb_DirePastAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_DirePastAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	execute: function() {
		if(this["char"].direPast) {
			return;
		}
		this._forcePermanent = true;
		this["char"].direPast = true;
		var baneAssigns = this["char"].banes.list;
		var _g1 = 0;
		var _g = baneAssigns.length;
		while(_g1 < _g) {
			var i = _g1++;
			var b = baneAssigns[i];
			b._minRequired = b.rank;
			b.discount = b._costCached = b.getCost(b.rank);
			b.freeze();
		}
	}
	,getUIFields: function() {
		return [{ prop : "notes", type : "textarea", label : "Notes"},{ prop : "uiActivated", type : "ButtonPermaPress", label : "Trigger", descriptionDone : "Done!", description : "Warning: For GM use only. Once you trigger Dire Past, all existing banes (assigned by GM based on your given 'story') are baked permanently at their current levels and can no longer be canceled/reduced during character creation! However, you will gain 10 free points to spend on Boons.", callback : $bind(this,this.execute)}];
	}
	,__class__: troshx_sos_bnb_DirePastAssign
});
var troshx_sos_bnb_Estate = function() {
	troshx_sos_core_Boon.call(this,"Estate",[10]);
	this.flags = 1;
	this.multipleTimes = -2;
};
$hxClasses["troshx.sos.bnb.Estate"] = troshx_sos_bnb_Estate;
troshx_sos_bnb_Estate.__name__ = ["troshx","sos","bnb","Estate"];
troshx_sos_bnb_Estate.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Estate.prototype = $extend(troshx_sos_core_Boon.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_EstateAssign(charSheet);
	}
	,__class__: troshx_sos_bnb_Estate
});
var troshx_sos_bnb_EstateAssign = function($char) {
	this.__hasUIFields__ = true;
	this.notes = "";
	this.estates = [troshx_sos_bnb_EstateAssign.getEmptyWealthAssign()];
	troshx_sos_core_BoonAssign.call(this);
	this["char"] = $char;
};
$hxClasses["troshx.sos.bnb.EstateAssign"] = troshx_sos_bnb_EstateAssign;
troshx_sos_bnb_EstateAssign.__name__ = ["troshx","sos","bnb","EstateAssign"];
troshx_sos_bnb_EstateAssign.getEmptyWealthAssign = function() {
	return { name : "", liquidate : false, uid : troshx_sos_bnb_EstateAssign.COUNT++, worth : 2};
};
troshx_sos_bnb_EstateAssign.__super__ = troshx_sos_core_BoonAssign;
troshx_sos_bnb_EstateAssign.prototype = $extend(troshx_sos_core_BoonAssign.prototype,{
	getQty: function() {
		return this.estates.length;
	}
	,getCost: function(rank) {
		return this.estates.length * 10;
	}
	,cleanupUIArrays: function() {
		this.estates = this.estates.slice(0,(this._remainingCached + this.estates.length * 10) / 10 | 0);
	}
	,getUIFields: function() {
		return [{ prop : "estates", label : "Estates", defaultValue : troshx_sos_bnb_EstateAssign.getEmptyWealthAssign, fixedWorth : true, disableLiquidity : !this["char"].ingame, minLength : 1, maxLength : (this._remainingCached + this.estates.length * 10) / 10 | 0, of : "WealthAssetAssign", type : "Array"},{ prop : "notes", type : "textarea", label : "Notes"}];
	}
	,__class__: troshx_sos_bnb_EstateAssign
});
var troshx_sos_bnb_Fat = function() {
	troshx_sos_core_Bane.call(this,"Fat",[5]);
	var m;
	var _l_ = troshx_sos_core_StaticModifier.create(9,"Fat",-2);
	m = _l_;
	_l_ = _l_.next = troshx_sos_core_StaticModifier.create(17,"Fat",-2);
	this.staticModifiers = [m];
};
$hxClasses["troshx.sos.bnb.Fat"] = troshx_sos_bnb_Fat;
troshx_sos_bnb_Fat.__name__ = ["troshx","sos","bnb","Fat"];
troshx_sos_bnb_Fat.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Fat.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Fat
});
var troshx_sos_bnb_Favor = function() {
	troshx_sos_core_Boon.call(this,"Favor",[1,3]);
	this.clampRank = true;
	this.multipleTimes = -2;
};
$hxClasses["troshx.sos.bnb.Favor"] = troshx_sos_bnb_Favor;
troshx_sos_bnb_Favor.__name__ = ["troshx","sos","bnb","Favor"];
troshx_sos_bnb_Favor.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Favor.prototype = $extend(troshx_sos_core_Boon.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_FavorAssign();
	}
	,__class__: troshx_sos_bnb_Favor
});
var troshx_sos_bnb_FavorAssign = function() {
	this.__hasUIFields__ = true;
	this.notes = "";
	this.greaterFavors = [];
	this.simpleFavors = [""];
	troshx_sos_core_BoonAssign.call(this);
};
$hxClasses["troshx.sos.bnb.FavorAssign"] = troshx_sos_bnb_FavorAssign;
troshx_sos_bnb_FavorAssign.__name__ = ["troshx","sos","bnb","FavorAssign"];
troshx_sos_bnb_FavorAssign.__super__ = troshx_sos_core_BoonAssign;
troshx_sos_bnb_FavorAssign.prototype = $extend(troshx_sos_core_BoonAssign.prototype,{
	isValid: function() {
		return this.getQty() >= 1;
	}
	,getQty: function() {
		return this.simpleFavors.length + this.greaterFavors.length;
	}
	,getCost: function(rank) {
		return this.simpleFavors.length + 3 * this.greaterFavors.length;
	}
	,cleanupUIArrays: function() {
		var length = this.simpleFavors.length;
		this.simpleFavors = this.simpleFavors.slice(0,(this._remainingCached + (length >= 1 ? length : 1)) / 1 | 0);
		this.greaterFavors = this.greaterFavors.slice(0,(this._remainingCached + this.greaterFavors.length * 3) / 3 | 0);
	}
	,getUIFields: function() {
		var length = this.simpleFavors.length;
		return [{ prop : "simpleFavors", minLength : 0, maxLength : (this._remainingCached + (length >= 1 ? length : 1)) / 1 | 0, of : "String", defaultValue : "", type : "Array", label : "Simple Favors"},{ prop : "greaterFavors", minLength : 0, maxLength : (this._remainingCached + this.greaterFavors.length * 3) / 3 | 0, of : "String", defaultValue : "", type : "Array", label : "Greater Favors"},{ prop : "notes", type : "textarea", label : "Notes"}];
	}
	,__class__: troshx_sos_bnb_FavorAssign
});
var troshx_sos_bnb_Follower = function() {
	troshx_sos_core_Boon.call(this,"Follower",[5]);
};
$hxClasses["troshx.sos.bnb.Follower"] = troshx_sos_bnb_Follower;
troshx_sos_bnb_Follower.__name__ = ["troshx","sos","bnb","Follower"];
troshx_sos_bnb_Follower.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Follower.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Follower
});
var troshx_sos_bnb_ImpressiveVoice = function() {
	troshx_sos_core_Boon.call(this,"Impressive Voice",[2]);
	this.multipleTimes = 3;
};
$hxClasses["troshx.sos.bnb.ImpressiveVoice"] = troshx_sos_bnb_ImpressiveVoice;
troshx_sos_bnb_ImpressiveVoice.__name__ = ["troshx","sos","bnb","ImpressiveVoice"];
troshx_sos_bnb_ImpressiveVoice.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_ImpressiveVoice.prototype = $extend(troshx_sos_core_Boon.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_ImpressiveVoiceAssign();
	}
	,__class__: troshx_sos_bnb_ImpressiveVoice
});
var troshx_sos_bnb_ImpressiveVoiceAssign = function() {
	this.__hasUIFields__ = true;
	this.voiceQualities = 0;
	troshx_sos_core_BoonAssign.call(this);
};
$hxClasses["troshx.sos.bnb.ImpressiveVoiceAssign"] = troshx_sos_bnb_ImpressiveVoiceAssign;
troshx_sos_bnb_ImpressiveVoiceAssign.__name__ = ["troshx","sos","bnb","ImpressiveVoiceAssign"];
troshx_sos_bnb_ImpressiveVoiceAssign.__super__ = troshx_sos_core_BoonAssign;
troshx_sos_bnb_ImpressiveVoiceAssign.prototype = $extend(troshx_sos_core_BoonAssign.prototype,{
	isValid: function() {
		return (this.voiceQualities & 7) != 0;
	}
	,canBeToggled: function(index) {
		var curChecked = (this.voiceQualities & 1 << index) != 0;
		var b = this._remainingCached >= 2;
		if(!curChecked) {
			return b;
		} else {
			return true;
		}
	}
	,getQty: function() {
		var c = 0;
		c += (this.voiceQualities & 1) != 0 ? 1 : 0;
		c += (this.voiceQualities & 2) != 0 ? 1 : 0;
		c += (this.voiceQualities & 4) != 0 ? 1 : 0;
		return c;
	}
	,getCost: function(rank) {
		return this.getQty() * 2;
	}
	,getUIFields: function() {
		return [{ prop : "voiceQualities", type : "Bitmask", labels : ["Powerful","Grating","Soothing"], validateOptionFunc : $bind(this,this.canBeToggled), label : "Voice Qualities"}];
	}
	,__class__: troshx_sos_bnb_ImpressiveVoiceAssign
});
var troshx_sos_bnb_Language = function() {
	troshx_sos_core_Boon.call(this,"Language",[1,2,3]);
	this.customCostInnerSlashes = "|/";
	this.multipleTimes = -2;
};
$hxClasses["troshx.sos.bnb.Language"] = troshx_sos_bnb_Language;
troshx_sos_bnb_Language.__name__ = ["troshx","sos","bnb","Language"];
troshx_sos_bnb_Language.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Language.prototype = $extend(troshx_sos_core_Boon.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_LanguageAssign(charSheet);
	}
	,__class__: troshx_sos_bnb_Language
});
var troshx_sos_bnb_LanguageAssign = function($char) {
	this.__hasUIFields__ = true;
	this.notes = "";
	this.ingameLanguages = [];
	this.polyglotLanguages = [];
	this.secondLanguage = [];
	this.startingLanguages = [""];
	troshx_sos_core_BoonAssign.call(this);
	this["char"] = $char;
};
$hxClasses["troshx.sos.bnb.LanguageAssign"] = troshx_sos_bnb_LanguageAssign;
troshx_sos_bnb_LanguageAssign.__name__ = ["troshx","sos","bnb","LanguageAssign"];
troshx_sos_bnb_LanguageAssign.__super__ = troshx_sos_core_BoonAssign;
troshx_sos_bnb_LanguageAssign.prototype = $extend(troshx_sos_core_BoonAssign.prototype,{
	getQty: function() {
		return this.startingLanguages.length + this.secondLanguage.length + this.polyglotLanguages.length + this.ingameLanguages.length;
	}
	,getRankCost: function(rank) {
		if(rank > 1) {
			if(rank == 3) {
				return 3;
			} else {
				return 2;
			}
		} else {
			return 1;
		}
	}
	,getCost: function(rank) {
		return (this.startingLanguages.length > 1 ? this.startingLanguages.length - 1 : 0) + (rank > 1 ? rank == 3 ? 3 : 2 : 1);
	}
	,cleanupUIArrays: function() {
		this.startingLanguages = this.startingLanguages.slice(0,(this._remainingCached + this.startingLanguages.length) / 1 | 0);
		this.secondLanguage = this.secondLanguage.slice(0,this.rank == 2 ? 1 : 0);
		this.polyglotLanguages = this.polyglotLanguages.slice(0,this.rank >= 3 ? this["char"].get_INT() + 2 : 0);
		this.ingameLanguages = this.ingameLanguages.slice(0,this["char"].ingame ? null : 0);
	}
	,getUIFields: function() {
		var tmp = { prop : "startingLanguages", minLength : this.rank >= 2 ? 0 : 1, label : "Starting Languages #1", maxLength : (this._remainingCached + this.startingLanguages.length) / 1 | 0, of : "String", defaultValue : "", type : "Array"};
		var tmp1 = this.rank == 2 ? 1 : 0;
		var tmp2 = this.rank >= 3 ? this["char"].get_INT() + 2 : 0;
		return [tmp,{ prop : "secondLanguage", label : "2nd Starting Language #2", maxLength : tmp1, of : "String", defaultValue : "", type : "Array"},{ prop : "polyglotLanguages", label : "Starting Polyglot Languages #3", maxLength : tmp2, of : "String", defaultValue : "", type : "Array"},{ prop : "ingameLanguages", maxLength : this["char"].ingame ? null : 0, of : "String", defaultValue : "", type : "Array", label : "Ingame Languages"},{ prop : "notes", type : "textarea", label : "Notes"}];
	}
	,__class__: troshx_sos_bnb_LanguageAssign
});
var troshx_sos_bnb_LastingPain = function() {
	troshx_sos_core_Bane.call(this,"Lasting Pain",[4,8]);
	this.flags = 2;
	this.multipleTimes = -2;
	this.clampRank = true;
};
$hxClasses["troshx.sos.bnb.LastingPain"] = troshx_sos_bnb_LastingPain;
troshx_sos_bnb_LastingPain.__name__ = ["troshx","sos","bnb","LastingPain"];
troshx_sos_bnb_LastingPain.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_LastingPain.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_LastingPainAssign(charSheet);
	}
	,__class__: troshx_sos_bnb_LastingPain
});
var troshx_sos_bnb_LastingPainAssign = function($char) {
	this.__hasUIFields__ = true;
	this.permaMask2 = 0;
	this.permaMask = 0;
	this.hitLocationsMajor = 0;
	this.hitLocationsMinor = 0;
	troshx_sos_core_BaneAssign.call(this);
	this["char"] = $char;
};
$hxClasses["troshx.sos.bnb.LastingPainAssign"] = troshx_sos_bnb_LastingPainAssign;
troshx_sos_bnb_LastingPainAssign.__name__ = ["troshx","sos","bnb","LastingPainAssign"];
troshx_sos_bnb_LastingPainAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_LastingPainAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	isValidUILocation: function(i) {
		return (1 << i & this.permaMask) == 0;
	}
	,isValidUILocation2: function(i) {
		return (1 << i & this.permaMask2) == 0;
	}
	,getCost: function(rank) {
		return this.minorCount() * 4 + this.majorCount() * 8;
	}
	,mergeWith: function(other) {
		this.hitLocationsMajor |= other.hitLocationsMajor;
		this.hitLocationsMinor |= other.hitLocationsMinor;
		var msk = this.permaMask;
		var i = this["char"].body.hitLocations.length;
		var qty = 0;
		while(--i > -1) if((1 << i & msk) != 0) {
			++qty;
		}
		var tmp = qty * 4;
		var msk1 = this.permaMask2;
		var i1 = this["char"].body.hitLocations.length;
		var qty1 = 0;
		while(--i1 > -1) if((1 << i1 & msk1) != 0) {
			++qty1;
		}
		this.discount = tmp + qty1 * 8;
	}
	,freeze: function() {
		this.permaMask |= this.hitLocationsMinor;
		this.permaMask2 |= this.hitLocationsMajor;
	}
	,unfreezeAll: function() {
		this.permaMask = 0;
		this.permaMask2 = 0;
	}
	,inflictRandomMinor: function() {
		var i = this["char"].body.hitLocations.length;
		var selectArr = [];
		while(--i > -1) if((1 << i & this.hitLocationsMinor) == 0) {
			selectArr.push(1 << i);
		}
		if(selectArr.length > 0) {
			i = selectArr[Math.random() * selectArr.length | 0];
			this.hitLocationsMinor |= i;
			this.permaMask |= i;
		}
		return this;
	}
	,inflictRandomMajor: function() {
		var i = this["char"].body.hitLocations.length;
		var selectArr = [];
		while(--i > -1) if((1 << i & this.hitLocationsMajor) == 0) {
			selectArr.push(1 << i);
		}
		if(selectArr.length > 0) {
			i = selectArr[Math.random() * selectArr.length | 0];
			this.hitLocationsMajor |= i;
			this.permaMask2 |= i;
		}
		return this;
	}
	,minorCount: function() {
		var msk = this.hitLocationsMinor;
		var i = this["char"].body.hitLocations.length;
		var qty = 0;
		while(--i > -1) if((1 << i & msk) != 0) {
			++qty;
		}
		return qty;
	}
	,majorCount: function() {
		var msk = this.hitLocationsMajor;
		var i = this["char"].body.hitLocations.length;
		var qty = 0;
		while(--i > -1) if((1 << i & msk) != 0) {
			++qty;
		}
		return qty;
	}
	,countMask: function(msk) {
		var i = this["char"].body.hitLocations.length;
		var qty = 0;
		while(--i > -1) if((1 << i & msk) != 0) {
			++qty;
		}
		return qty;
	}
	,getQty: function() {
		return this.minorCount() + this.majorCount();
	}
	,isValid: function() {
		if(this.hitLocationsMajor == 0) {
			return this.hitLocationsMinor != 0;
		} else {
			return true;
		}
	}
	,getUIFields: function() {
		return [{ prop : "hitLocationsMinor", type : "HitLocationMultiSelector", body : this["char"].body, validateOptionFunc : $bind(this,this.isValidUILocation), label : "Hit Locations Minor"},{ prop : "hitLocationsMajor", type : "HitLocationMultiSelector", body : this["char"].body, validateOptionFunc : $bind(this,this.isValidUILocation2), label : "Hit Locations Major"}];
	}
	,__class__: troshx_sos_bnb_LastingPainAssign
});
var troshx_sos_bnb_Literate = function() {
	troshx_sos_core_Boon.call(this,"Literate",[1]);
	this.multipleTimes = -2;
};
$hxClasses["troshx.sos.bnb.Literate"] = troshx_sos_bnb_Literate;
troshx_sos_bnb_Literate.__name__ = ["troshx","sos","bnb","Literate"];
troshx_sos_bnb_Literate.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Literate.prototype = $extend(troshx_sos_core_Boon.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_LiterateAssign();
	}
	,__class__: troshx_sos_bnb_Literate
});
var troshx_sos_bnb_LiterateAssign = function() {
	this.__hasUIFields__ = true;
	this.notes = "";
	this.scripts = [""];
	troshx_sos_core_BoonAssign.call(this);
};
$hxClasses["troshx.sos.bnb.LiterateAssign"] = troshx_sos_bnb_LiterateAssign;
troshx_sos_bnb_LiterateAssign.__name__ = ["troshx","sos","bnb","LiterateAssign"];
troshx_sos_bnb_LiterateAssign.__super__ = troshx_sos_core_BoonAssign;
troshx_sos_bnb_LiterateAssign.prototype = $extend(troshx_sos_core_BoonAssign.prototype,{
	getQty: function() {
		return this.scripts.length;
	}
	,getCost: function(rank) {
		return this.boon.costs[0] * this.scripts.length;
	}
	,cleanupUIArrays: function() {
		var length = this.scripts.length;
		this.scripts = this.scripts.slice(0,(this._remainingCached + (length >= 1 ? length : 1)) / 1 | 0);
	}
	,getUIFields: function() {
		var length = this.scripts.length;
		return [{ prop : "scripts", label : "Known scripts", minLength : 1, maxLength : (this._remainingCached + (length >= 1 ? length : 1)) / 1 | 0, of : "String", defaultValue : "", type : "Array"},{ prop : "notes", type : "textarea", label : "Notes"}];
	}
	,__class__: troshx_sos_bnb_LiterateAssign
});
var troshx_sos_bnb_Oath = function() {
	troshx_sos_core_Bane.call(this,"Oath",[2]);
};
$hxClasses["troshx.sos.bnb.Oath"] = troshx_sos_bnb_Oath;
troshx_sos_bnb_Oath.__name__ = ["troshx","sos","bnb","Oath"];
troshx_sos_bnb_Oath.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Oath.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_OathAssign();
	}
	,__class__: troshx_sos_bnb_Oath
});
var troshx_sos_bnb_OathAssign = function() {
	this.__hasUIFields__ = true;
	this.notes = "";
	this.cost = 2;
	troshx_sos_core_BaneAssign.call(this);
};
$hxClasses["troshx.sos.bnb.OathAssign"] = troshx_sos_bnb_OathAssign;
troshx_sos_bnb_OathAssign.__name__ = ["troshx","sos","bnb","OathAssign"];
troshx_sos_bnb_OathAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_OathAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	getCost: function(rank) {
		return this.cost;
	}
	,getUIFields: function() {
		return [{ prop : "cost", min : 2, max : 10, type : "Int", label : "Cost"},{ prop : "notes", type : "textarea", label : "Notes"}];
	}
	,__class__: troshx_sos_bnb_OathAssign
});
var troshx_sos_bnb_OldWound = function() {
	troshx_sos_core_Bane.call(this,"Old Wound",[1]);
	this.flags = 2;
	this.multipleTimes = -2;
};
$hxClasses["troshx.sos.bnb.OldWound"] = troshx_sos_bnb_OldWound;
troshx_sos_bnb_OldWound.__name__ = ["troshx","sos","bnb","OldWound"];
troshx_sos_bnb_OldWound.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_OldWound.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(sheet) {
		return new troshx_sos_bnb_OldWoundAssign(sheet);
	}
	,__class__: troshx_sos_bnb_OldWound
});
var troshx_sos_bnb_OldWoundAssign = function($char) {
	this.__hasUIFields__ = true;
	this.permaMask = 0;
	this.hitLocations = 0;
	troshx_sos_core_BaneAssign.call(this);
	this["char"] = $char;
};
$hxClasses["troshx.sos.bnb.OldWoundAssign"] = troshx_sos_bnb_OldWoundAssign;
troshx_sos_bnb_OldWoundAssign.__name__ = ["troshx","sos","bnb","OldWoundAssign"];
troshx_sos_bnb_OldWoundAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_OldWoundAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	getCost: function(rank) {
		return troshx_sos_core_BaneAssign.prototype.getCost.call(this,rank) * this.getQty();
	}
	,isValidUILocation: function(i) {
		return (1 << i & this.permaMask) == 0;
	}
	,freeze: function() {
		this.permaMask |= this.hitLocations;
	}
	,unfreezeAll: function() {
		this.permaMask = 0;
	}
	,inflictRandom: function() {
		var i = this["char"].body.hitLocations.length;
		var selectArr = [];
		while(--i > -1) if((1 << i & this.hitLocations) == 0) {
			selectArr.push(1 << i);
		}
		if(selectArr.length > 0) {
			i = selectArr[Math.random() * selectArr.length | 0];
			this.hitLocations |= i;
			this.permaMask |= i;
		}
		return this;
	}
	,mergeWith: function(other) {
		this.hitLocations |= other.hitLocations;
		var tmp = troshx_sos_core_BaneAssign.prototype.getCost.call(this,this.rank);
		var msk = this.permaMask;
		var i = this["char"].body.hitLocations.length;
		var qty = 0;
		while(--i > -1) if((1 << i & msk) != 0) {
			++qty;
		}
		this.discount = tmp * qty;
	}
	,getQty: function() {
		var msk = this.hitLocations;
		var i = this["char"].body.hitLocations.length;
		var qty = 0;
		while(--i > -1) if((1 << i & msk) != 0) {
			++qty;
		}
		return qty;
	}
	,countMask: function(msk) {
		var i = this["char"].body.hitLocations.length;
		var qty = 0;
		while(--i > -1) if((1 << i & msk) != 0) {
			++qty;
		}
		return qty;
	}
	,isValid: function() {
		return this.hitLocations != 0;
	}
	,getUIFields: function() {
		return [{ prop : "hitLocations", type : "HitLocationMultiSelector", body : this["char"].body, validateOptionFunc : $bind(this,this.isValidUILocation), label : "Hit Locations"}];
	}
	,__class__: troshx_sos_bnb_OldWoundAssign
});
var troshx_sos_bnb_Poor = function() {
	troshx_sos_core_Bane.call(this,"Poor",[4,6,8]);
	this.flags = 1;
	this.channels = 8;
	var h = troshx_sos_core_StaticModifier.create(18,"Poor (i)",0,.5);
	h.next = troshx_sos_core_StaticModifier.create(19,"Poor (i)",0,.5);
	var h2 = troshx_sos_core_StaticModifier.create(18,"Poor (ii)",0,.25);
	h2.next = troshx_sos_core_StaticModifier.create(19,"Poor (ii)",0,.25);
	this.staticModifiers = [h,h2,troshx_sos_core_StaticModifier.create(19,"Poor (iii)",0,0)];
};
$hxClasses["troshx.sos.bnb.Poor"] = troshx_sos_bnb_Poor;
troshx_sos_bnb_Poor.__name__ = ["troshx","sos","bnb","Poor"];
troshx_sos_bnb_Poor.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Poor.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_PoorAssign(charSheet);
	}
	,__class__: troshx_sos_bnb_Poor
});
var troshx_sos_bnb_PoorAssign = function($char) {
	troshx_sos_core_BaneAssign.call(this);
	this["char"] = $char;
};
$hxClasses["troshx.sos.bnb.PoorAssign"] = troshx_sos_bnb_PoorAssign;
troshx_sos_bnb_PoorAssign.__name__ = ["troshx","sos","bnb","PoorAssign"];
troshx_sos_bnb_PoorAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_PoorAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	getCost: function(rank) {
		var wealthIndexNumRequired = this.rank == 3 ? 4 : this.rank == 2 ? 3 : 2;
		var wealthIndexNum = this["char"].socialClass.wealthIndex + 1;
		var result = (wealthIndexNum < wealthIndexNumRequired ? wealthIndexNum / wealthIndexNumRequired : 1) * (rank > 0 ? this.bane.costs[rank - 1] : 0);
		return Math.floor(result);
	}
	,getUIFields: function() {
		return [];
	}
	,__class__: troshx_sos_bnb_PoorAssign
});
var troshx_sos_bnb_SeveredLimb = function() {
	troshx_sos_core_Bane.call(this,"Severed Limb/Appendage",[10,15,18]);
	this.clampRank = true;
	this.flags = 2;
	this.multipleTimes = -2;
};
$hxClasses["troshx.sos.bnb.SeveredLimb"] = troshx_sos_bnb_SeveredLimb;
troshx_sos_bnb_SeveredLimb.__name__ = ["troshx","sos","bnb","SeveredLimb"];
troshx_sos_bnb_SeveredLimb.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_SeveredLimb.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		var b = new troshx_sos_bnb_SeveredLimbAssign();
		return b;
	}
	,__class__: troshx_sos_bnb_SeveredLimb
});
var troshx_sos_bnb_SeveredLimbAssign = function() {
	this.__hasUIFields__ = true;
	this.severedLegRight = 0;
	this.severedLegLeft = 0;
	this.severedArmRight = 0;
	this.severedArmLeft = 0;
	troshx_sos_core_BaneAssign.call(this);
};
$hxClasses["troshx.sos.bnb.SeveredLimbAssign"] = troshx_sos_bnb_SeveredLimbAssign;
troshx_sos_bnb_SeveredLimbAssign.__name__ = ["troshx","sos","bnb","SeveredLimbAssign"];
troshx_sos_bnb_SeveredLimbAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_SeveredLimbAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	get_severedAreasLeft: function() {
		return this.severedArmLeft | this.severedLegLeft;
	}
	,get_severedAreasRight: function() {
		return this.severedArmRight | this.severedLegRight;
	}
	,isValid: function() {
		var a = (this.get_severedAreasLeft() & 261136) != 0;
		var b = (this.get_severedAreasRight() & 261136) != 0;
		if(!a) {
			return b;
		} else {
			return true;
		}
	}
	,getCost: function(rank) {
		var c = 0;
		c += this.severedArmLeft == 245776 ? 18 : this.severedArmLeft == 196608 ? 15 : this.severedArmLeft != 0 ? 10 : 0;
		c += this.severedArmRight == 245776 ? 18 : this.severedArmRight == 196608 ? 15 : this.severedArmRight != 0 ? 10 : 0;
		c += this.severedLegLeft == 15360 ? 18 : this.severedLegLeft == 12288 ? 15 : this.severedLegLeft != 0 ? 10 : 0;
		c += this.severedLegRight == 15360 ? 18 : this.severedLegRight == 12288 ? 15 : this.severedLegRight != 0 ? 10 : 0;
		return c;
	}
	,getUIFields: function() {
		return [{ prop : "severedArmLeft", type : "SingleSelection", label : "Left Side Upper Limb", labels : ["None","Left Hand","Left Lower Arm","Left Full Arm"], values : [0,131072,196608,245776]},{ prop : "severedArmRight", type : "SingleSelection", label : "Right Side Upper Limb", labels : ["None","Right Hand","Right Lower Arm","Right Full Arm"], values : [0,131072,196608,245776]},{ prop : "severedLegLeft", type : "SingleSelection", label : "Left Side Lower Limb", labels : ["None","Left Foot","Left Lower Leg","Left Full Leg"], values : [0,8192,12288,15360]},{ prop : "severedLegRight", type : "SingleSelection", label : "Right Side Lower Limb", labels : ["None","Right Foot","Right Lower Leg","Right Full Leg"], values : [0,8192,12288,15360]}];
	}
	,__class__: troshx_sos_bnb_SeveredLimbAssign
});
var troshx_sos_bnb_Skinny = function() {
	troshx_sos_core_Bane.call(this,"Skinny",[3]);
	var m;
	var _l_ = troshx_sos_core_StaticModifier.create(16,"Skinny",-1);
	m = _l_;
	this.staticModifiers = [m];
};
$hxClasses["troshx.sos.bnb.Skinny"] = troshx_sos_bnb_Skinny;
troshx_sos_bnb_Skinny.__name__ = ["troshx","sos","bnb","Skinny"];
troshx_sos_bnb_Skinny.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Skinny.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Skinny
});
var troshx_sos_chargen_CampaignPowerLevel = function(name,pcp,maxCategoryPCP,desc) {
	if(desc == null) {
		desc = "";
	}
	this.name = name;
	this.pcp = pcp;
	this.maxCategoryPCP = maxCategoryPCP;
	this.desc = desc;
};
$hxClasses["troshx.sos.chargen.CampaignPowerLevel"] = troshx_sos_chargen_CampaignPowerLevel;
troshx_sos_chargen_CampaignPowerLevel.__name__ = ["troshx","sos","chargen","CampaignPowerLevel"];
troshx_sos_chargen_CampaignPowerLevel.prototype = {
	__class__: troshx_sos_chargen_CampaignPowerLevel
};
var troshx_sos_chargen_CategoryPCP = function(name,magic) {
	if(magic == null) {
		magic = false;
	}
	this.pcp = 0;
	this.name = name;
	this.magic = magic;
};
$hxClasses["troshx.sos.chargen.CategoryPCP"] = troshx_sos_chargen_CategoryPCP;
troshx_sos_chargen_CategoryPCP.__name__ = ["troshx","sos","chargen","CategoryPCP"];
troshx_sos_chargen_CategoryPCP.prototype = {
	__class__: troshx_sos_chargen_CategoryPCP
};
var troshx_sos_chargen_CharGenData = function(charSheet) {
	this.profCoreListRanged = [];
	this.profCoreListMelee = [];
	this.packetChoosy = false;
	this.emptySocialBenefit = { name : "", rank : 0, cost : 0};
	this.wealthAssets = [];
	this.socialBenefitTempArr = [];
	this.syncSocialWealth = true;
	this.wealthIndex = 0;
	this.socialClassIndex = 0;
	this.warningAttributes = { warn : false, remain : 0};
	this.selectedTierIndex = 0;
	this.warningCategories = { warn : false, remain : 0};
	this.campaignPowLevelIndex = 1;
	this.campaignPowerLevels = [new troshx_sos_chargen_CampaignPowerLevel("Low (Grittiest)",14,5),new troshx_sos_chargen_CampaignPowerLevel("Medium(Default)",18,6),new troshx_sos_chargen_CampaignPowerLevel("High Fantasy",22,7),new troshx_sos_chargen_CampaignPowerLevel("Epic Fantasy",26,8),new troshx_sos_chargen_CampaignPowerLevel("Awesome Fantasy",30,10)];
	this.warningMsgs = [];
	this.savedCharContents = "";
	this.showBnBs = true;
	this.insideInventory = false;
	this["char"] = charSheet != null ? charSheet : new troshx_sos_sheets_CharSheet();
	this.raceTierTable = troshx_sos_races_Races.getTiers();
	this.pcpForTiers = troshx_sos_races_Races.PCP_FOR_TIERS.concat([]);
	if(charSheet == null) {
		this["char"].set_race(this.raceTierTable[0][0]);
	}
	this.categories = troshx_sos_chargen_CharGenData.getNewCharGenCategories();
	this.categories[2].pcp = 4;
	this.initBoons();
	this.initSkills();
	this.initSocialClasses();
	this.initSocialClassesBenefits();
	this.initSchools();
};
$hxClasses["troshx.sos.chargen.CharGenData"] = troshx_sos_chargen_CharGenData;
troshx_sos_chargen_CharGenData.__name__ = ["troshx","sos","chargen","CharGenData"];
troshx_sos_chargen_CharGenData.getTalentsAvailable = function() {
	var talentsAvailable = troshx_sos_core_School.getTalentAdds();
	var accum = talentsAvailable[0];
	var _g1 = 1;
	var _g = talentsAvailable.length;
	while(_g1 < _g) {
		var i = _g1++;
		accum += talentsAvailable[i];
		talentsAvailable[i] = accum;
	}
	return talentsAvailable;
};
troshx_sos_chargen_CharGenData.getSuperiorsAvailable = function() {
	var superiorsAvailable = troshx_sos_core_School.getSuperiorAdds();
	var accum = superiorsAvailable[0];
	var _g1 = 1;
	var _g = superiorsAvailable.length;
	while(_g1 < _g) {
		var i = _g1++;
		accum += superiorsAvailable[i];
		superiorsAvailable[i] = accum;
	}
	return superiorsAvailable;
};
troshx_sos_chargen_CharGenData.getNewCharGenCategories = function() {
	var arr = [];
	var a = new troshx_sos_chargen_CategoryPCP("Race");
	arr[0] = a;
	a.slug = "gen-race";
	a = new troshx_sos_chargen_CategoryPCP("Attributes");
	arr[1] = a;
	a.slug = "gen-attributes";
	a = new troshx_sos_chargen_CategoryPCP("Boons & Banes");
	arr[2] = a;
	a.slug = "gen-bnb";
	arr[3] = new troshx_sos_chargen_CategoryPCP("Skills");
	a.slug = "gen-skills";
	a = new troshx_sos_chargen_CategoryPCP("Social class/Wealth");
	arr[4] = a;
	a.slug = "gen-social-class";
	a = new troshx_sos_chargen_CategoryPCP("School/Profeciencies");
	arr[5] = a;
	a.slug = "gen-schoolprofs";
	return arr;
};
troshx_sos_chargen_CharGenData.GetAttributeTotalCostOfLevel = function(level) {
	if(level < 11) {
		return level - 1;
	} else {
		return 9 + (level - 10) * 2;
	}
};
troshx_sos_chargen_CharGenData.MaxAttributeLevelUpsFrom = function(level,remainingAttribPoints) {
	var upTo = level + remainingAttribPoints;
	return remainingAttribPoints - (upTo > 10 ? upTo - 10 : 0);
};
troshx_sos_chargen_CharGenData.getBnBFromPCP = function(pcp) {
	return -15 + (pcp * 5 - 5);
};
troshx_sos_chargen_CharGenData.dynSetField = function(of,field,value) {
	of[field] = value;
};
troshx_sos_chargen_CharGenData.dynSetArray = function(of,i,value) {
	of[i] = value;
};
troshx_sos_chargen_CharGenData.dynDeleteField = function(of,field) {
	Reflect.deleteField(of,field);
};
troshx_sos_chargen_CharGenData.clamp5 = function(val) {
	if(val >= 5) {
		return 5;
	} else {
		return val;
	}
};
troshx_sos_chargen_CharGenData.prototype = {
	get_shouldShowBnBs: function() {
		if(!this.showBnBs) {
			return this.get_totalBnBScore() < 0;
		} else {
			return true;
		}
	}
	,initSchools: function() {
		this.schoolLevelCosts = troshx_sos_core_School.getLevels();
		var accum = this.schoolLevelCosts[0];
		var _g1 = 1;
		var _g = this.schoolLevelCosts.length;
		while(_g1 < _g) {
			var i = _g1++;
			accum += this.schoolLevelCosts[i];
			this.schoolLevelCosts[i] = accum;
		}
		this.talentsAvailable = troshx_sos_chargen_CharGenData.getTalentsAvailable();
		this.superiorsAvailable = troshx_sos_chargen_CharGenData.getSuperiorsAvailable();
		this.schoolAssignList = [];
		var schoolList = troshx_sos_schools_Schools.getList();
		var _g11 = 0;
		var _g2 = schoolList.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var s = schoolList[i1];
			this.schoolAssignList.push({ school : s, bonuses : s.getSchoolBonuses(this["char"])});
		}
	}
	,initBoons: function() {
		var boonList = troshx_sos_bnb_Boons.getList();
		this.boonAssignList = [];
		this.baneAssignList = [];
		var bb;
		var _g1 = 0;
		var _g = boonList.length;
		while(_g1 < _g) {
			var i = _g1++;
			bb = boonList[i];
			if(bb.costs != troshx_sos_core_BoonBane.COSTLESS_ARRAY) {
				var ba;
				var tmp = this.boonAssignList;
				ba = boonList[i].getAssign(0,this["char"]);
				tmp.push(ba);
				ba._costCached = bb.costs[0];
				ba._remainingCached = 999;
			}
		}
		var baneList = troshx_sos_bnb_Banes.getList();
		var _g11 = 0;
		var _g2 = baneList.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			bb = baneList[i1];
			if(bb.costs != troshx_sos_core_BoonBane.COSTLESS_ARRAY) {
				var ba1;
				var tmp1 = this.baneAssignList;
				ba1 = baneList[i1].getAssign(0,this["char"]);
				tmp1.push(ba1);
				ba1._costCached = bb.costs[0];
			}
		}
	}
	,initSkills: function() {
		this.skillPackets = troshx_sos_chargen_CharGenSkillPackets.getNewSkillPackets();
		this.skillLabelMappingBases = troshx_sos_chargen_CharGenSkillPackets.getNewSkillLabelMappingBases();
		this.skillsTable = troshx_sos_core_SkillTable.getNewDefaultSkillTable();
		this.skillObjs = this.skillsTable.getSkillObjectsAsArray(true);
		this.specialisedSkills = this.skillsTable.getSpecialisationList();
		this.skillLabelMappings = this.getEmptyMappingsFromBase(this.skillLabelMappingBases);
		var _g1 = 0;
		var _g = this.skillPackets.length;
		while(_g1 < _g) {
			var i = _g1++;
			var p = this.skillPackets[i];
			var _g2 = 0;
			var _g3 = Reflect.fields(p.values);
			while(_g2 < _g3.length) {
				var s = _g3[_g2];
				++_g2;
				if(this.skillLabelMappings[s] != null) {
					p.history = [];
					break;
				}
			}
		}
		this.skillSubjectHash = { };
		var _g4 = 0;
		var _g11 = Reflect.fields(this.skillValues);
		while(_g4 < _g11.length) {
			var f = _g11[_g4];
			++_g4;
			var arr = troshx_sos_core_Skill.getSplitFromSpecialisation(f);
			if(arr != null) {
				var skill = arr[0];
				var special = arr[1];
				var skillToSpecial;
				var specialToSkill;
				skillToSpecial = this.skillSubjectHash[skill];
				if(skillToSpecial == null) {
					skillToSpecial = [];
					this.skillSubjectHash[skill] = skillToSpecial;
				}
				specialToSkill = this.skillSubjectHash[special];
				if(specialToSkill == null) {
					specialToSkill = [];
					this.skillSubjectHash[special] = specialToSkill;
				}
				skillToSpecial.push(special);
				specialToSkill.push(skill);
			}
		}
		this.startingSkillObjsCount = this.skillObjs.length;
	}
	,initSocialClasses: function() {
		var haleAndHearty2 = { cost : 2, name : "Hale and Hearty", rank : 1};
		var beautiful3 = { cost : 3, name : "Beautiful", rank : 1};
		var folksBackHome3 = { cost : 3, name : "Folks Back Home", rank : 1};
		var folksBackHome6 = { cost : 6, name : "Folks Back Home", rank : 2};
		var literate1 = { cost : 1, name : "Literate", rank : 1};
		var literate2 = { cost : 2, name : "Literate", rank : 1, qty : 2};
		var literate3 = { cost : 3, name : "Literate", rank : 1, qty : 3};
		var languages3 = { cost : 3, name : "Language", rank : 3};
		var languages2 = { cost : 2, name : "Language", rank : 2};
		var languages1 = { cost : 1, name : "Language", rank : 1};
		var contacts1 = { cost : 1, name : "Contacts", rank : 1};
		var contacts4 = { cost : 4, name : "Contacts", rank : 2};
		var contacts6 = { cost : 6, name : "Contacts", rank : 3};
		var allies5 = { cost : 5, name : "Allies", rank : 2};
		var allies10 = { cost : 10, name : "Allies", rank : 3};
		var famous2 = { cost : 2, name : "Famous", rank : 1};
		var famous4 = { cost : 4, name : "Famous", rank : 2};
		this.socialClassList = [{ socialClass : new troshx_sos_core_SocialClass("Slave/Exile",troshx_sos_core_Money.create(0,10,0),0), boons : [haleAndHearty2,languages2,beautiful3], maxBoons : 1},{ socialClass : new troshx_sos_core_SocialClass("Peasant",troshx_sos_core_Money.create(5,0,0),0), boons : [haleAndHearty2,folksBackHome3], maxBoons : 1},{ socialClass : new troshx_sos_core_SocialClass("Poor Freeman",troshx_sos_core_Money.create(15,0,0),0), boons : [haleAndHearty2,folksBackHome3,literate1], maxBoons : 1},{ socialClass : new troshx_sos_core_SocialClass("Freeman",troshx_sos_core_Money.create(25,0,0),1), boons : [haleAndHearty2,folksBackHome3,literate1], maxBoons : 2},{ socialClass : new troshx_sos_core_SocialClass("High Freeman",troshx_sos_core_Money.create(40,0,0),2), boons : [folksBackHome6,literate1,languages1,contacts1], maxBoons : 2},{ socialClass : new troshx_sos_core_SocialClass("Minor Noble",troshx_sos_core_Money.create(80,0,0),3), boons : [haleAndHearty2,folksBackHome6,literate1,languages1,contacts1,allies5,famous2], maxBoons : 2},{ socialClass : new troshx_sos_core_SocialClass("Landed Noble",troshx_sos_core_Money.create(150,0,0),6), boons : [haleAndHearty2,folksBackHome6,literate2,languages2,contacts4,allies5,famous2], maxBoons : 2},{ socialClass : new troshx_sos_core_SocialClass("High Noble",troshx_sos_core_Money.create(300,0,0),10), boons : [haleAndHearty2,folksBackHome6,literate2,languages2,contacts4,allies10,famous4], maxBoons : 2},{ socialClass : new troshx_sos_core_SocialClass("Royalty",troshx_sos_core_Money.create(800,0,0),15), boons : [haleAndHearty2,folksBackHome6,literate2,languages2,contacts4,allies10,famous4], maxBoons : 3},{ socialClass : new troshx_sos_core_SocialClass("High Royalty",troshx_sos_core_Money.create(1500,0,0),20), boons : [haleAndHearty2,folksBackHome6,literate3,languages3,contacts6,allies10,famous4], maxBoons : 3}];
	}
	,initSocialClassesBenefits: function() {
		var _g1 = 0;
		var _g = this.socialClassList.length;
		while(_g1 < _g) {
			var i = _g1++;
			var s = this.socialClassList[i];
			var _g3 = 0;
			var _g2 = s.boons.length;
			while(_g3 < _g2) {
				var b = _g3++;
				var sb = s.boons[b];
				if(sb.index == null) {
					sb.index = this.findBoonIndexByName(sb.name);
					sb.label = sb.name + " (" + sb.cost + ")";
					if(sb.index == -1) {
						throw new js__$Boot_HaxeError("Could not find Social boon by: " + sb.name);
					}
				}
			}
		}
		this.socialBenefit1 = this.emptySocialBenefit;
		this.socialBenefit2 = this.emptySocialBenefit;
		this.socialBenefit3 = this.emptySocialBenefit;
	}
	,findBoonIndexByName: function(boonName) {
		var _g1 = 0;
		var _g = this.boonAssignList.length;
		while(_g1 < _g) {
			var i = _g1++;
			var b = this.boonAssignList[i];
			if(b.boon.name == boonName) {
				return i;
			}
		}
		return -1;
	}
	,privateInit: function() {
		var _g1 = 0;
		var _g = this.skillPackets.length;
		while(_g1 < _g) {
			var i = _g1++;
			var s = this.skillPackets[i];
			s.fields = Reflect.fields(s.values);
		}
		this.validateSocialBenefitsWithClass(1);
	}
	,get_campaignPowLevel: function() {
		return this.campaignPowerLevels[this.campaignPowLevelIndex];
	}
	,get_categoryRace: function() {
		return this.categories[0];
	}
	,get_categoryAttributes: function() {
		return this.categories[1];
	}
	,get_categorySocialClassWealth: function() {
		return this.categories[4];
	}
	,get_categoriesRemainingAssignable: function() {
		var accum = 0;
		var _g1 = 0;
		var _g = this.categories.length;
		while(_g1 < _g) {
			var i = _g1++;
			accum += this.categories[i].pcp;
		}
		return this.campaignPowerLevels[this.campaignPowLevelIndex].pcp - accum;
	}
	,get_isValidCategories: function() {
		return this.get_categoriesRemainingAssignable() == 0;
	}
	,checkWarningCategories: function() {
		var rm = this.get_categoriesRemainingAssignable();
		if(rm > 0) {
			this.warningCategories.warn = true;
			this.warningCategories.remain = rm;
			return true;
		} else {
			return false;
		}
	}
	,get_isHuman: function() {
		return (this["char"].race != null ? this["char"].race.name : "") == "Human";
	}
	,get_selectedRaceName: function() {
		if(this["char"].race != null) {
			return this["char"].race.name;
		} else {
			return "";
		}
	}
	,resetToHuman: function() {
		this.selectedTierIndex = 0;
		this["char"].set_race(this.raceTierTable[0][0]);
	}
	,selectRaceAt: function(ti,ri) {
		this.selectedTierIndex = ti;
		this["char"].set_race(this.raceTierTable[ti][ri]);
	}
	,settleRaceTier: function() {
		this.categories[0].pcp = this.pcpForTiers[this.selectedTierIndex];
	}
	,get_promptSettleRaceTier: function() {
		return this.categories[0].pcp != this.pcpForTiers[this.selectedTierIndex];
	}
	,get_raceTier: function() {
		return this.getRaceTierFromPCP(this.categories[0].pcp);
	}
	,getRaceTierFromPCP: function(pcp) {
		var b = 0;
		var _g1 = 0;
		var _g = this.pcpForTiers.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.pcpForTiers[i] > pcp) {
				break;
			}
			b = i;
		}
		return b + 1;
	}
	,get_totalAttributePointsSpent: function() {
		var sum = 0;
		var level = this["char"].strength;
		sum += level < 11 ? level - 1 : 9 + (level - 10) * 2;
		var level1 = this["char"].agility;
		sum += level1 < 11 ? level1 - 1 : 9 + (level1 - 10) * 2;
		var level2 = this["char"].endurance;
		sum += level2 < 11 ? level2 - 1 : 9 + (level2 - 10) * 2;
		var level3 = this["char"].health;
		sum += level3 < 11 ? level3 - 1 : 9 + (level3 - 10) * 2;
		var level4 = this["char"].willpower;
		sum += level4 < 11 ? level4 - 1 : 9 + (level4 - 10) * 2;
		var level5 = this["char"].wit;
		sum += level5 < 11 ? level5 - 1 : 9 + (level5 - 10) * 2;
		var level6 = this["char"].intelligence;
		sum += level6 < 11 ? level6 - 1 : 9 + (level6 - 10) * 2;
		var level7 = this["char"].perception;
		sum += level7 < 11 ? level7 - 1 : 9 + (level7 - 10) * 2;
		return sum;
	}
	,get_availableAttributePoints: function() {
		return troshx_sos_chargen_CharGenData.PCP_COLUMN_ATTRIBUTES[this.categories[1].pcp - 1];
	}
	,get_remainingAttributePoints: function() {
		return this.get_availableAttributePoints() - this.get_totalAttributePointsSpent();
	}
	,canBuyMoreAttributeLevels: function() {
		var rm = this.get_remainingAttributePoints();
		var upTo = this["char"].strength + rm;
		if(rm - (upTo > 10 ? upTo - 10 : 0) > 0) {
			return true;
		}
		var upTo1 = this["char"].agility + rm;
		if(rm - (upTo1 > 10 ? upTo1 - 10 : 0) > 0) {
			return true;
		}
		var upTo2 = this["char"].endurance + rm;
		if(rm - (upTo2 > 10 ? upTo2 - 10 : 0) > 0) {
			return true;
		}
		var upTo3 = this["char"].health + rm;
		if(rm - (upTo3 > 10 ? upTo3 - 10 : 0) > 0) {
			return true;
		}
		var upTo4 = this["char"].willpower + rm;
		if(rm - (upTo4 > 10 ? upTo4 - 10 : 0) > 0) {
			return true;
		}
		var upTo5 = this["char"].wit + rm;
		if(rm - (upTo5 > 10 ? upTo5 - 10 : 0) > 0) {
			return true;
		}
		var upTo6 = this["char"].intelligence + rm;
		if(rm - (upTo6 > 10 ? upTo6 - 10 : 0) > 0) {
			return true;
		}
		var upTo7 = this["char"].perception + rm;
		if(rm - (upTo7 > 10 ? upTo7 - 10 : 0) > 0) {
			return true;
		}
		return false;
	}
	,checkWarningAttributes: function() {
		var rm = this.get_remainingAttributePoints();
		if(rm > 0 && this.canBuyMoreAttributeLevels()) {
			this.warningAttributes.warn = true;
			this.warningAttributes.remain = rm;
			return true;
		} else {
			return false;
		}
	}
	,updateSocialBenefitsToBoon: function(newValue,oldValue) {
		var b;
		if(oldValue.rank > 0) {
			b = this.boonAssignList[oldValue.index];
			if(b.rank == oldValue.rank) {
				if(b.getCost(b.rank) == oldValue.cost) {
					b.rank = 0;
				}
			}
			b._minRequired = 0;
			b.discount = 0;
		}
		if(newValue.rank > 0) {
			b = this.boonAssignList[newValue.index];
			b.discount = newValue.cost;
			if(b.rank == 0) {
				b.rank = newValue.rank;
			}
			b._minRequired = newValue.rank;
			var tmp = newValue.qty != null;
		}
	}
	,validateSocialBenefitsWithClass: function(zoneNum) {
		var socialBenefit = null;
		if(zoneNum == 1) {
			socialBenefit = this.socialBenefit1;
		} else if(zoneNum == 2) {
			socialBenefit = this.socialBenefit2;
		} else if(zoneNum == 3) {
			socialBenefit = this.socialBenefit3;
		}
		var maxBoons = this.socialClassList[this.socialClassIndex].maxBoons;
		this.socialBenefitTempArr[0] = zoneNum == 1 ? null : this.socialBenefit1.name;
		this.socialBenefitTempArr[1] = zoneNum == 2 || maxBoons < 2 ? null : this.socialBenefit2.name;
		this.socialBenefitTempArr[2] = zoneNum == 3 || maxBoons < 3 ? null : this.socialBenefit3.name;
		var choices = this.socialClassList[this.socialClassIndex].boons;
		var resolvedIndex = choices.indexOf(socialBenefit);
		var secondaryResolvedIndex = -1;
		if(resolvedIndex < 0) {
			var _g1 = 0;
			var _g = choices.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(secondaryResolvedIndex == -1) {
					if(this.socialBenefitTempArr.indexOf(choices[i].name) < 0) {
						secondaryResolvedIndex = i;
					}
				}
				if(choices[i].name == socialBenefit.name) {
					resolvedIndex = i;
					break;
				}
			}
			if(resolvedIndex < 0) {
				if(secondaryResolvedIndex >= 0) {
					resolvedIndex = secondaryResolvedIndex;
				} else {
					resolvedIndex = 0;
				}
			}
			if(zoneNum == 1) {
				this.socialBenefit1 = choices[resolvedIndex];
			} else if(zoneNum == 2) {
				this.socialBenefit2 = choices[resolvedIndex];
			} else if(zoneNum == 3) {
				this.socialBenefit3 = choices[resolvedIndex];
			}
		}
		if(resolvedIndex < 0) {
			throw new js__$Boot_HaxeError("Should have resolved index for social benefit choice!");
		}
	}
	,socialBenefitSelectChangeHandler: function(zoneNum,selectedIndex) {
		var choices = this.socialClassList[this.socialClassIndex].boons;
		if(zoneNum == 1) {
			this.socialBenefit1 = choices[selectedIndex];
		} else if(zoneNum == 2) {
			this.socialBenefit2 = choices[selectedIndex];
		} else if(zoneNum == 3) {
			this.socialBenefit3 = choices[selectedIndex];
		}
	}
	,get_availableWealthPointsBase: function() {
		return this.socialClassList[this.wealthIndex].socialClass.wealth;
	}
	,get_availableWealthPoints: function() {
		var r = Math.floor(this["char"].getModifiedValue(18,this.socialClassList[this.wealthIndex].socialClass.wealth));
		if(r < 0) {
			r = 0;
		}
		return r;
	}
	,get_remainingWealthPointsFull: function() {
		var r = Math.floor(this["char"].getModifiedValue(18,this.socialClassList[this.wealthIndex].socialClass.wealth));
		if(r < 0) {
			r = 0;
		}
		return r - this.wealthAssetsWorthFullArray();
	}
	,get_remainingWealthPoints: function() {
		var r = Math.floor(this["char"].getModifiedValue(18,this.socialClassList[this.wealthIndex].socialClass.wealth));
		if(r < 0) {
			r = 0;
		}
		return r - this.wealthAssetsWorth();
	}
	,wealthAssetsWorthFullArray: function() {
		var i = this.wealthAssets.length;
		var c = 0;
		while(--i > -1) c += this.wealthAssets[i].worth;
		return c;
	}
	,wealthAssetsWorthLen: function() {
		var len = this.wealthAssets.length;
		var max = this.get_maxWealthAssets();
		if(len >= max) {
			return max;
		} else {
			return len;
		}
	}
	,wealthAssetsWorth: function() {
		var c = 0;
		var len = this.wealthAssets.length;
		var max = this.get_maxWealthAssets();
		var len1 = len >= max ? max : len;
		var _g1 = 0;
		var _g = len1;
		while(_g1 < _g) {
			var i = _g1++;
			c += this.wealthAssets[i].worth;
		}
		return c;
	}
	,get_socialBenefitChoices: function() {
		return this.socialClassList[this.socialClassIndex].boons;
	}
	,get_curSelectedSocialClass: function() {
		return this.socialClassList[this.socialClassIndex];
	}
	,get_maxSocialClassIndex: function() {
		return this.categories[4].pcp - 1;
	}
	,constraintSocialWealth: function() {
		if(this.syncSocialWealth) {
			var max = this.categories[4].pcp - 1;
			if(this.socialClassIndex > max) {
				this.socialClassIndex = max;
			}
			this.wealthIndex = this.socialClassIndex;
		} else {
			var max1 = this.get_unevenMaxWealthIndex();
			if(this.wealthIndex > max1) {
				this.wealthIndex = max1;
			}
			max1 = this.get_unevenMaxSocialClassIndex();
			if(this.socialClassIndex > max1) {
				this.socialClassIndex = max1;
			}
		}
	}
	,get_socialEitherMaxIndex: function() {
		var a = this.categories[4].pcp - 1;
		var b = this.get_unevenMaxSocialClassIndex();
		if(this.syncSocialWealth) {
			return a;
		} else {
			return b;
		}
	}
	,get_wealthEitherMaxIndex: function() {
		var a = this.categories[4].pcp - 1;
		var b = this.get_unevenMaxWealthIndex();
		if(this.syncSocialWealth) {
			return a;
		} else {
			return b;
		}
	}
	,get_socialClassPlaceHolderName: function() {
		if(this.socialClassIndex != this.wealthIndex) {
			return this.socialClassList[this.socialClassIndex].socialClass.name + " -$: " + this.socialClassList[this.wealthIndex].socialClass.name;
		} else {
			return this.socialClassList[this.socialClassIndex].socialClass.name;
		}
	}
	,get_promptSettleSocialTier: function() {
		return (this.socialClassIndex != this.wealthIndex ? this.get_unevenSocialPCPRequired() : this.socialClassIndex + 1) != this.categories[4].pcp;
	}
	,get_socialPCPRequired: function() {
		if(this.socialClassIndex != this.wealthIndex) {
			return this.get_unevenSocialPCPRequired();
		} else {
			return this.socialClassIndex + 1;
		}
	}
	,settleSocialTier: function() {
		this.syncSocialWealth = this.socialClassIndex == this.wealthIndex;
		var tmp = this.socialClassIndex != this.wealthIndex ? this.get_unevenSocialPCPRequired() : this.socialClassIndex + 1;
		this.categories[4].pcp = tmp;
	}
	,solveSocialOrWealthMaxX: function(x,y,C) {
		x = C * 2 - 4 - y;
		x -= x & 1 ^ y & 1;
		return x;
	}
	,get_unevenSocialPCPRequired: function() {
		var x = this.socialClassIndex + 1;
		var y = this.wealthIndex + 1;
		var C = this.categories[4].pcp;
		return Math.ceil((x + y) / 2) + 2;
	}
	,get_unevenMaxSocialClassIndex: function() {
		var x = this.socialClassIndex + 1;
		var y = this.wealthIndex + 1;
		x = this.categories[4].pcp * 2 - 4 - y;
		var r = (x -= x & 1 ^ y & 1) - 1;
		if(r >= 0) {
			return r;
		} else {
			return 0;
		}
	}
	,get_unevenMaxWealthIndex: function() {
		var x = this.wealthIndex + 1;
		var y = this.socialClassIndex + 1;
		x = this.categories[4].pcp * 2 - 4 - y;
		var r = (x -= x & 1 ^ y & 1) - 1;
		if(r >= 0) {
			return r;
		} else {
			return 0;
		}
	}
	,setSocialClassIndex: function(index) {
		this.socialClassIndex = index;
		if(this.syncSocialWealth) {
			this.wealthIndex = index;
		}
	}
	,setWealthIndex: function(index) {
		this.wealthIndex = index;
	}
	,updateSocialToCharsheet: function() {
		var s = this.socialClassList[this.socialClassIndex];
		this.validateSocialBenefitsWithClass(1);
		if(s.maxBoons >= 2) {
			this.validateSocialBenefitsWithClass(2);
		} else {
			this.socialBenefit2 = this.emptySocialBenefit;
		}
		if(s.maxBoons >= 3) {
			this.validateSocialBenefitsWithClass(3);
		} else {
			this.socialBenefit3 = this.emptySocialBenefit;
		}
		this["char"].socialClass.classIndex = this.socialClassIndex;
	}
	,get_maxWealthAssets: function() {
		var tmp = this.wealthAssets.length;
		var r = Math.floor(this["char"].getModifiedValue(18,this.socialClassList[this.wealthIndex].socialClass.wealth));
		if(r < 0) {
			r = 0;
		}
		return tmp + (r - this.wealthAssetsWorthFullArray());
	}
	,updateMoneyToCharsheet: function() {
		var s = this.socialClassList[this.wealthIndex];
		this["char"].socialClass.wealthIndex = this.wealthIndex;
		this["char"].socialClass.money.matchWith(s.socialClass.money);
		this["char"].socialClass.wealth = s.socialClass.wealth;
	}
	,filterAwayLiquidatedAssets: function(w) {
		return !w.liquidate;
	}
	,saveFinaliseSocial: function(moneyLeft) {
		if(this.socialClassIndex == this.wealthIndex || this["char"].socialClass.name == "") {
			this["char"].socialClass.name = this.get_socialClassPlaceHolderName();
		}
		var len = this.wealthAssets.length;
		var max = this.get_maxWealthAssets();
		var len1 = len >= max ? max : len;
		var a = this.wealthAssets.slice(0,len1);
		a = a.filter($bind(this,this.filterAwayLiquidatedAssets));
		this["char"].wealthAssets = a;
		this["char"].money.matchWith(moneyLeft);
	}
	,get_categoryBnB: function() {
		return this.categories[2];
	}
	,get_totalBaneExpenditure: function() {
		var arr = this["char"].banes.list;
		var total = 0;
		var i = arr.length;
		while(--i > -1) {
			var b = arr[i];
			var countCost = !(b._canceled || b._forcePermanent);
			var amt = countCost ? b._costCached : 0;
			if(b.discount != 0) {
				amt -= b.discount;
				if(amt < 0) {
					amt = 0;
				}
			}
			total += amt;
		}
		return total;
	}
	,get_maxBanePointsEarnable: function() {
		if(this.get_BnBpoints() < 0) {
			return 15 - this.get_BnBpoints();
		} else {
			return 15;
		}
	}
	,get_totalBanePointsEarned: function() {
		var a = this.get_totalBaneExpenditure();
		var b = this.get_BnBpoints() < 0 ? 15 - this.get_BnBpoints() : 15;
		if(a > b) {
			return b;
		} else {
			return a;
		}
	}
	,get_totalBanePointsSpent: function() {
		return this.get_totalBaneExpenditure() - this.get_totalBanePointsEarned();
	}
	,get_totalBoonExpenditure: function() {
		var arr = this["char"].boons.list;
		var total = 0;
		var i = arr.length;
		while(--i > -1) {
			var b = arr[i];
			var countCost = !(b._canceled || b._forcePermanent);
			var amt = countCost ? b._costCached : 0;
			if(b.discount != 0) {
				amt -= b.discount;
				if(amt < 0) {
					amt = 0;
				}
			}
			total += amt;
		}
		return total;
	}
	,get_boonsArray: function() {
		return this["char"].boons.list;
	}
	,get_banesArray: function() {
		return this["char"].banes.list;
	}
	,get_BnBpoints: function() {
		return -15 + (this.get_categoryBnB().pcp * 5 - 5);
	}
	,get_totalBnBScore: function() {
		return this.get_BnBpoints() + this.get_totalBanePointsEarned() - this.get_totalBoonExpenditure() + (this["char"].direPast ? 10 : 0);
	}
	,get_maxBoonsSpendable: function() {
		return this.get_BnBpoints() + (this.get_BnBpoints() < 0 ? 15 - this.get_BnBpoints() : 15);
	}
	,get_maxBoonsSpendableLeft: function() {
		return this.get_maxBoonsSpendable() - this.get_totalBoonExpenditure();
	}
	,get_maxBanesSpendable: function() {
		return (this.get_BnBpoints() < 0 ? 15 - this.get_BnBpoints() : 15) + (this.get_BnBpoints() < 0 ? 0 : this.get_BnBpoints());
	}
	,get_maxBanesSpendableLeft: function() {
		return this.get_maxBanesSpendable() - this.get_totalBaneExpenditure();
	}
	,addSkill: function(skill,special) {
		var skillToSpecial;
		var specialToSkill;
		skillToSpecial = this.skillSubjectHash[skill];
		if(skillToSpecial == null) {
			skillToSpecial = [];
			troshx_sos_chargen_CharGenData.dynSetField(this.skillSubjectHash,skill,skillToSpecial);
		}
		specialToSkill = this.skillSubjectHash[special];
		if(specialToSkill == null) {
			specialToSkill = [];
			troshx_sos_chargen_CharGenData.dynSetField(this.skillSubjectHash,special,specialToSkill);
		}
		skillToSpecial.push(special);
		specialToSkill.push(skill);
		var name = skill + " (" + special + ")";
		troshx_sos_chargen_CharGenData.dynSetField(this.skillValues,name,0);
		troshx_sos_chargen_CharGenData.dynSetField(this.skillPacketValues,name,0);
		this.skillObjs.push({ name : name, attribs : 0});
	}
	,deleteSkillInput: function(index) {
		var obj = this.skillObjs[index];
		var spl = troshx_sos_core_Skill.getSplitFromSpecialisation(obj.name);
		var skill = spl[0];
		var special = spl[1];
		var skillToSpecial = this.skillSubjectHash[skill];
		var specialToSkill = this.skillSubjectHash[special];
		skillToSpecial.splice(skillToSpecial.indexOf(special),1);
		specialToSkill.splice(skillToSpecial.indexOf(skill),1);
		troshx_sos_chargen_CharGenData.dynDeleteField(this.skillValues,obj.name);
		troshx_sos_chargen_CharGenData.dynDeleteField(this.skillPacketValues,obj.name);
		this.skillObjs.splice(index,1);
		this.truncateSkillPacketHistory();
	}
	,onSkillPacketChange: function(index,vector,clickedPlus) {
		var packet = this.skillPackets[index];
		if(packet.history == null) {
			var _g1 = 0;
			var _g = packet.fields.length;
			while(_g1 < _g) {
				var i = _g1++;
				var f = packet.fields[i];
				this.skillPacketValues[f] += packet.values[f] * vector;
			}
		} else {
			var start = packet.qty - vector;
			var forward = vector >= 0;
			var step = forward ? 1 : -1;
			var h = forward ? start : start - 1;
			var limit = start + vector;
			while(forward ? h < limit : h >= limit) {
				var history = packet.history[h];
				var _g11 = 0;
				var _g2 = packet.fields.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					var f1 = packet.fields[i1];
					var p = history[f1];
					this.skillPacketValues[p] += packet.values[f1] * step;
				}
				h += step;
			}
		}
		if(vector > 0) {
			if(packet.history == null || clickedPlus) {
				this.truncateSkillPacketHistory();
			}
		}
	}
	,onSkillIndividualChange: function(vector) {
		if(vector > 0) {
			this.truncateSkillPacketHistory();
		}
	}
	,truncateSkillPacketHistory: function() {
		var _g1 = 0;
		var _g = this.skillPackets.length;
		while(_g1 < _g) {
			var i = _g1++;
			var s = this.skillPackets[i];
			if(s.history != null) {
				if(s.history.length != s.qty) {
					var of = s.history;
					var len = s.qty;
					of.splice(len,of.length - len);
				}
			}
		}
	}
	,saveFinaliseSkillsFromPackets: function() {
		var _g1 = 0;
		var _g = this.skillObjs.length;
		while(_g1 < _g) {
			var i = _g1++;
			var s = this.skillObjs[i];
			var val = this.skillPacketValues[s.name];
			var total = (val >= 5 ? 5 : val) + this.skillValues[s.name];
			if(total > 0) {
				this["char"].skills.skillHash[s.name] = total;
			}
		}
	}
	,clampSkillValue: function(value) {
		if(value >= 5) {
			return 5;
		} else {
			return value;
		}
	}
	,isSkillLabelBinded: function(s) {
		return s.charAt(0) == "~";
	}
	,get_SkillPoints: function() {
		return 6 + (this.categories[3].pcp - 1) * 3;
	}
	,get_individualSkillsSpent: function() {
		var c = 0;
		var _g = 0;
		var _g1 = Reflect.fields(this.skillValues);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			c += this.skillValues[f];
		}
		return c;
	}
	,get_maxSkillPacketsAllowed: function() {
		return Math.floor((this.get_totalSkillPointsProvided() - this.get_individualSkillsSpent()) / 3);
	}
	,get_maxIndividualSkillsSpendable: function() {
		return this.get_totalSkillPointsProvided() - this.get_skillPacketsBought() * 3;
	}
	,get_individualSkillsRemaining: function() {
		return this.get_maxIndividualSkillsSpendable() - this.get_individualSkillsSpent();
	}
	,get_totalSkillPointsProvided: function() {
		return this.get_SkillPoints() + this["char"].intelligence;
	}
	,get_skillPacketsRemaining: function() {
		return this.get_maxSkillPacketsAllowed() - this.get_skillPacketsBought();
	}
	,get_skillPacketsBought: function() {
		var c = 0;
		var i = this.skillPackets.length;
		while(--i > -1) c += this.skillPackets[i].qty;
		return c;
	}
	,get_totalSkillPointsLeft: function() {
		return this.get_totalSkillPointsProvided() - this.get_individualSkillsSpent() - this.get_skillPacketsBought() * 3;
	}
	,getEmptyMappingsFromBase: function(base) {
		var map = { };
		var count = 1;
		var _g = 0;
		var _g1 = Reflect.fields(base);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var dyn = base[p];
			if((dyn instanceof Array) && dyn.__enum__ == null) {
				map[p] = ((dyn instanceof Array) && dyn.__enum__ == null ? dyn : null)[0];
			} else {
				map[p] = "";
			}
		}
		var arrAdded = [];
		this.skillValues = { };
		this.skillPacketValues = { };
		var _g11 = 0;
		var _g2 = this.skillPackets.length;
		while(_g11 < _g2) {
			var i = _g11++;
			var s = this.skillPackets[i];
			var _g21 = 0;
			var _g3 = Reflect.fields(s.values);
			while(_g21 < _g3.length) {
				var f = _g3[_g21];
				++_g21;
				this.skillValues[f] = 0;
				this.skillPacketValues[f] = 0;
				if(f.charAt(0) != "~" && !Object.prototype.hasOwnProperty.call(this.skillsTable.skillHash,f)) {
					this.skillsTable.skillHash[f] = 0;
					arrAdded.push({ name : f, attribs : 0});
				}
			}
		}
		var _g4 = 0;
		var _g12 = Reflect.fields(this.skillsTable.skillHash);
		while(_g4 < _g12.length) {
			var f1 = _g12[_g4];
			++_g4;
			if(!this.skillsTable.requiresSpecialisation[f1]) {
				this.skillValues[f1] = 0;
				this.skillPacketValues[f1] = 0;
			}
		}
		arrAdded.sort(troshx_sos_core_SkillTable.sortArrayMethod);
		this.skillObjs = this.skillObjs.concat(arrAdded);
		this.skillSubjects = troshx_sos_chargen_CharGenSkillPackets.getExistingSubjects();
		var reflectedExisting = { };
		var _g13 = 0;
		var _g5 = this.skillSubjects.length;
		while(_g13 < _g5) {
			var i1 = _g13++;
			reflectedExisting[this.skillSubjects[i1]] = true;
		}
		this.skillSubjectsInitial = reflectedExisting;
		return map;
	}
	,selectSchoolAssign: function(s) {
		if(s != null) {
			this["char"].set_school(s.school);
			this["char"].set_schoolBonuses(s.bonuses);
		} else {
			this["char"].set_school(null);
			this["char"].set_schoolBonuses(null);
		}
	}
	,canStillSpendSchool: function(remainingPoints) {
		var affordMin = 0;
		if(this["char"].school == null) {
			if((this.categories[5].pcp - 1) * 3 == 0) {
				return false;
			}
			return true;
		} else {
			var lv = this["char"].schoolLevel + 1;
			if(lv <= 20) {
				affordMin = this.schoolLevelCosts[lv - 1] - (lv >= 2 ? this.schoolLevelCosts[lv - 2] : 0);
			}
		}
		if(affordMin > 0) {
			return remainingPoints >= affordMin;
		} else {
			return false;
		}
	}
	,get_hasSchool: function() {
		return this["char"].school != null;
	}
	,get_schoolProfLevel: function() {
		if(this["char"].school != null) {
			return this["char"].schoolLevel;
		} else {
			return 0;
		}
	}
	,get_ProfPoints: function() {
		return (this.categories[5].pcp - 1) * 3;
	}
	,get_totalAvailProfSlots: function() {
		if(this["char"].school != null) {
			return this["char"].school.profLimit;
		} else {
			return 0;
		}
	}
	,get_profArcCost: function() {
		if((this["char"].race != null ? this["char"].race.name : "") == "Human") {
			return 0;
		} else {
			return 1;
		}
	}
	,get_schoolArcCost: function() {
		if(this["char"].school != null) {
			return this["char"].school.costArc;
		} else {
			return 0;
		}
	}
	,get_totalProfSlotExpenditure: function() {
		var c = (this["char"].race != null ? this["char"].race.name : "") == "Human" ? 0 : 1;
		var available = this["char"].school != null ? this["char"].school.profLimit : 0;
		var total = this.profCoreListRanged.length + this.profCoreListMelee.length;
		var totalCap = total > available ? available : total;
		return totalCap * c + 2 * (total - totalCap);
	}
	,get_beyondMaxProfs: function() {
		return this.profCoreListRanged.length + this.profCoreListMelee.length > (this["char"].school != null ? this["char"].school.profLimit : 0);
	}
	,get_atOrBeyondMaxProfString: function() {
		if(this.profCoreListRanged.length + this.profCoreListMelee.length > (this["char"].school != null ? this["char"].school.profLimit : 0)) {
			return "Beyond Max";
		} else {
			return "Max Reached";
		}
	}
	,get_maxMeleeProfSlots: function() {
		var r = (this["char"].school != null ? this["char"].school.profLimit : 0) - this.profCoreListRanged.length;
		var c = (this["char"].race != null ? this["char"].race.name : "") == "Human" ? 0 : 1;
		var rm = (this.categories[5].pcp - 1) * 3 - (this["char"].school != null ? this["char"].school.costArc : 0) - (this["char"].school != null && this["char"].schoolLevel > 0 ? this.schoolLevelCosts[this["char"].schoolLevel - 1] : 0) - this.profCoreListRanged.length * c;
		if(c > 0) {
			rm = Math.floor(rm / c);
			if(rm < 0) {
				rm = 0;
			}
			if(rm < r) {
				r = rm;
			}
		}
		if(this["char"].school != null) {
			if(r < 0) {
				return 0;
			} else {
				return r;
			}
		} else {
			return 0;
		}
	}
	,get_maxRangedProfSlots: function() {
		var r = (this["char"].school != null ? this["char"].school.profLimit : 0) - this.profCoreListMelee.length;
		var c = (this["char"].race != null ? this["char"].race.name : "") == "Human" ? 0 : 1;
		var rm = (this.categories[5].pcp - 1) * 3 - (this["char"].school != null ? this["char"].school.costArc : 0) - (this["char"].school != null && this["char"].schoolLevel > 0 ? this.schoolLevelCosts[this["char"].schoolLevel - 1] : 0) - this.profCoreListMelee.length * c;
		if(c > 0) {
			rm = Math.floor(rm / c);
			if(rm < 0) {
				rm = 0;
			}
			if(rm < r) {
				r = rm;
			}
		}
		if(this["char"].school != null) {
			if(r < 0) {
				return 0;
			} else {
				return r;
			}
		} else {
			return 0;
		}
	}
	,get_maxTalentSlots: function() {
		var r = this["char"].schoolLevel > 0 ? this.talentsAvailable[this["char"].schoolLevel - 1] : 0;
		if(this["char"].school != null) {
			return r;
		} else {
			return 0;
		}
	}
	,get_maxSuperiorSlots: function() {
		var r = this["char"].schoolLevel > 0 ? this.superiorsAvailable[this["char"].schoolLevel - 1] : 0;
		if(this["char"].school != null) {
			return r;
		} else {
			return 0;
		}
	}
	,get_maxMasterySlots: function() {
		var r = this["char"].schoolLevel >= 20 ? 1 : 0;
		if(this["char"].school != null) {
			return r;
		} else {
			return 0;
		}
	}
	,get_levelsExpenditure: function() {
		if(this["char"].school != null && this["char"].schoolLevel > 0) {
			return this.schoolLevelCosts[this["char"].schoolLevel - 1];
		} else {
			return 0;
		}
	}
	,get_profPointsLeft: function() {
		var c = (this["char"].race != null ? this["char"].race.name : "") == "Human" ? 0 : 1;
		var available = this["char"].school != null ? this["char"].school.profLimit : 0;
		var total = this.profCoreListRanged.length + this.profCoreListMelee.length;
		var totalCap = total > available ? available : total;
		return (this.categories[5].pcp - 1) * 3 - (totalCap * c + 2 * (total - totalCap)) - (this["char"].school != null ? this["char"].school.costArc : 0) - (this["char"].school != null && this["char"].schoolLevel > 0 ? this.schoolLevelCosts[this["char"].schoolLevel - 1] : 0);
	}
	,get_traceProfCoreRangedCurrent: function() {
		return troshx_sos_core_Profeciency.getLabelsOfArrayProfs(troshx_sos_core_Profeciency.CORE_RANGED != null ? troshx_sos_core_Profeciency.CORE_RANGED : troshx_sos_core_Profeciency.CORE_RANGED = troshx_sos_core_Profeciency.getNewCoreRanged(),this["char"].profsRanged);
	}
	,get_traceProfCoreMeleeCurrent: function() {
		return troshx_sos_core_Profeciency.getLabelsOfArrayProfs(troshx_sos_core_Profeciency.getCoreMelee(),this["char"].profsMelee);
	}
	,get_traceProfCoreRangedCount: function() {
		return troshx_sos_core_Profeciency.getCountOfArrayProfs(troshx_sos_core_Profeciency.CORE_RANGED != null ? troshx_sos_core_Profeciency.CORE_RANGED : troshx_sos_core_Profeciency.CORE_RANGED = troshx_sos_core_Profeciency.getNewCoreRanged(),this["char"].profsRanged);
	}
	,get_traceProfCoreMeleeCount: function() {
		return troshx_sos_core_Profeciency.getCountOfArrayProfs(troshx_sos_core_Profeciency.getCoreMelee(),this["char"].profsMelee);
	}
	,saveFinaliseSchoolProfs: function() {
		this["char"].schoolLevel = this["char"].school != null ? this["char"].school != null ? this["char"].schoolLevel : 0 : 0;
		var tmp = this["char"].masteryManueverNotes;
		var tmp1 = this.get_maxMasterySlots();
		this["char"].masteryManueverNotes = tmp.slice(0,tmp1);
		var tmp2 = this["char"].superiorManueverNotes;
		var tmp3 = this.get_maxSuperiorSlots();
		this["char"].superiorManueverNotes = tmp2.slice(0,tmp3);
		var tmp4 = this["char"].talentNotes;
		var tmp5 = this.get_maxTalentSlots();
		this["char"].talentNotes = tmp4.slice(0,tmp5);
	}
	,saveFinaliseCleanupChar: function(moneyLeft) {
		this.saveFinaliseSocial(moneyLeft);
		this.saveFinaliseSchoolProfs();
		this.saveFinaliseSkillsFromPackets();
		this["char"].boons.filter(function(bb) {
			return !bb._canceled;
		});
		this["char"].banes.filter(function(bb1) {
			return !bb1._canceled;
		});
		var _g1 = 0;
		var _g = this["char"].boons.list.length;
		while(_g1 < _g) {
			var i = _g1++;
			this["char"].boons.list[i].cleanupUIArrays();
		}
		var _g11 = 0;
		var _g2 = this["char"].banes.list.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this["char"].banes.list[i1].cleanupUIArrays();
		}
		var _g12 = 0;
		var _g3 = this["char"].boons.list.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this["char"].boons.list[i2].cleanup();
		}
		var _g13 = 0;
		var _g4 = this["char"].banes.list.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			this["char"].banes.list[i3].cleanup();
		}
		this["char"].inventory.cleanupBeforeSerialize();
		if((this["char"].race != null ? this["char"].race.name : "") != "Human") {
			this["char"].arcFlaw = "";
		}
	}
	,__class__: troshx_sos_chargen_CharGenData
};
var troshx_sos_chargen_CharGenSkillPackets = function() { };
$hxClasses["troshx.sos.chargen.CharGenSkillPackets"] = troshx_sos_chargen_CharGenSkillPackets;
troshx_sos_chargen_CharGenSkillPackets.__name__ = ["troshx","sos","chargen","CharGenSkillPackets"];
troshx_sos_chargen_CharGenSkillPackets.getNewSkillPackets = function() {
	var _g = new haxe_ds_StringMap();
	var key = "Profession" + " (" + "Farmer" + ")";
	if(__map_reserved[key] != null) {
		_g.setReserved(key,2);
	} else {
		_g.h[key] = 2;
	}
	var key1 = "Crafting" + " (" + "Wood" + ")";
	if(__map_reserved[key1] != null) {
		_g.setReserved(key1,1);
	} else {
		_g.h[key1] = 1;
	}
	if(__map_reserved["Cooking"] != null) {
		_g.setReserved("Cooking",1);
	} else {
		_g.h["Cooking"] = 1;
	}
	var tmp = { name : "Farmer", qty : 0, values : troshx_sos_chargen_CharGenSkillPackets.strMapValues(_g)};
	var _g1 = new haxe_ds_StringMap();
	var key2 = "Profession" + " (" + "Trade" + ")";
	if(__map_reserved[key2] != null) {
		_g1.setReserved(key2,2);
	} else {
		_g1.h[key2] = 2;
	}
	var key3 = "Crafting" + " (" + "Trade" + ")";
	if(__map_reserved[key3] != null) {
		_g1.setReserved(key3,1);
	} else {
		_g1.h[key3] = 1;
	}
	if(__map_reserved["Persuasion"] != null) {
		_g1.setReserved("Persuasion",1);
	} else {
		_g1.h["Persuasion"] = 1;
	}
	var tmp1 = { name : "Tradesman", qty : 0, values : troshx_sos_chargen_CharGenSkillPackets.strMapValues(_g1)};
	var _g2 = new haxe_ds_StringMap();
	var key4 = "Knowledge" + " (" + "Finance" + ")";
	if(__map_reserved[key4] != null) {
		_g2.setReserved(key4,2);
	} else {
		_g2.h[key4] = 2;
	}
	if(__map_reserved["Etiquette"] != null) {
		_g2.setReserved("Etiquette",1);
	} else {
		_g2.h["Etiquette"] = 1;
	}
	if(__map_reserved["Persuasion"] != null) {
		_g2.setReserved("Persuasion",1);
	} else {
		_g2.h["Persuasion"] = 1;
	}
	var tmp2 = { name : "Merchant", qty : 0, values : troshx_sos_chargen_CharGenSkillPackets.strMapValues(_g2)};
	var _g3 = new haxe_ds_StringMap();
	if(__map_reserved["Gather Information"] != null) {
		_g3.setReserved("Gather Information",1);
	} else {
		_g3.h["Gather Information"] = 1;
	}
	if(__map_reserved["Intimidation"] != null) {
		_g3.setReserved("Intimidation",1);
	} else {
		_g3.h["Intimidation"] = 1;
	}
	if(__map_reserved["Observation"] != null) {
		_g3.setReserved("Observation",1);
	} else {
		_g3.h["Observation"] = 1;
	}
	var key5 = "Knowledge" + " (" + "Criminal" + ")";
	if(__map_reserved[key5] != null) {
		_g3.setReserved(key5,1);
	} else {
		_g3.h[key5] = 1;
	}
	var tmp3 = { name : "Criminal", qty : 0, values : troshx_sos_chargen_CharGenSkillPackets.strMapValues(_g3)};
	var _g4 = new haxe_ds_StringMap();
	if(__map_reserved["Intimidation"] != null) {
		_g4.setReserved("Intimidation",1);
	} else {
		_g4.h["Intimidation"] = 1;
	}
	var key6 = "Knowledge" + " (" + "Criminal" + ")";
	if(__map_reserved[key6] != null) {
		_g4.setReserved(key6,1);
	} else {
		_g4.h[key6] = 1;
	}
	if(__map_reserved["Observation"] != null) {
		_g4.setReserved("Observation",2);
	} else {
		_g4.h["Observation"] = 2;
	}
	var tmp4 = { name : "Guard", qty : 0, values : troshx_sos_chargen_CharGenSkillPackets.strMapValues(_g4)};
	var _g5 = new haxe_ds_StringMap();
	if(__map_reserved["Surgery"] != null) {
		_g5.setReserved("Surgery",2);
	} else {
		_g5.h["Surgery"] = 2;
	}
	if(__map_reserved["Chymistry"] != null) {
		_g5.setReserved("Chymistry",1);
	} else {
		_g5.h["Chymistry"] = 1;
	}
	var key7 = "Profession" + " (" + "Doctor" + ")";
	if(__map_reserved[key7] != null) {
		_g5.setReserved(key7,1);
	} else {
		_g5.h[key7] = 1;
	}
	var tmp5 = { name : "Surgeon", qty : 0, values : troshx_sos_chargen_CharGenSkillPackets.strMapValues(_g5)};
	var _g6 = new haxe_ds_StringMap();
	if(__map_reserved["Sailing"] != null) {
		_g6.setReserved("Sailing",2);
	} else {
		_g6.h["Sailing"] = 2;
	}
	var key8 = "Profession" + " (" + "Sailing" + ")";
	if(__map_reserved[key8] != null) {
		_g6.setReserved(key8,1);
	} else {
		_g6.h[key8] = 1;
	}
	if(__map_reserved["Navigation"] != null) {
		_g6.setReserved("Navigation",1);
	} else {
		_g6.h["Navigation"] = 1;
	}
	var tmp6 = { name : "Sailor", qty : 0, values : troshx_sos_chargen_CharGenSkillPackets.strMapValues(_g6)};
	var _g7 = new haxe_ds_StringMap();
	if(__map_reserved["Etiquette"] != null) {
		_g7.setReserved("Etiquette",1);
	} else {
		_g7.h["Etiquette"] = 1;
	}
	var key9 = "Knowledge" + " (" + "Politics" + ")";
	if(__map_reserved[key9] != null) {
		_g7.setReserved(key9,1);
	} else {
		_g7.h[key9] = 1;
	}
	if(__map_reserved["Oration"] != null) {
		_g7.setReserved("Oration",1);
	} else {
		_g7.h["Oration"] = 1;
	}
	if(__map_reserved["Persuasion"] != null) {
		_g7.setReserved("Persuasion",1);
	} else {
		_g7.h["Persuasion"] = 1;
	}
	var tmp7 = { name : "Politician", qty : 0, values : troshx_sos_chargen_CharGenSkillPackets.strMapValues(_g7)};
	var _g8 = new haxe_ds_StringMap();
	var key10 = "Knowledge" + " (" + "Nobility" + ")";
	if(__map_reserved[key10] != null) {
		_g8.setReserved(key10,1);
	} else {
		_g8.h[key10] = 1;
	}
	if(__map_reserved["Etiquette"] != null) {
		_g8.setReserved("Etiquette",1);
	} else {
		_g8.h["Etiquette"] = 1;
	}
	var key11 = "Knowledge" + " (" + "Politics" + ")";
	if(__map_reserved[key11] != null) {
		_g8.setReserved(key11,1);
	} else {
		_g8.h[key11] = 1;
	}
	if(__map_reserved["Persuasion"] != null) {
		_g8.setReserved("Persuasion",1);
	} else {
		_g8.h["Persuasion"] = 1;
	}
	var tmp8 = { name : "Nobleman", qty : 0, values : troshx_sos_chargen_CharGenSkillPackets.strMapValues(_g8)};
	var _g9 = new haxe_ds_StringMap();
	if(__map_reserved["Cooking"] != null) {
		_g9.setReserved("Cooking",2);
	} else {
		_g9.h["Cooking"] = 2;
	}
	var key12 = "Crafting" + " (" + "Homestead" + ")";
	if(__map_reserved[key12] != null) {
		_g9.setReserved(key12,2);
	} else {
		_g9.h[key12] = 2;
	}
	var tmp9 = troshx_sos_chargen_CharGenSkillPackets.strMapValues(_g9);
	return [{ name : "Academic", qty : 0, values : { "~academic1" : 1, "~academic2" : 1, "Research" : 1, "~academicLast" : 1}},{ name : "Athlete", qty : 0, values : { "Athletics" : 2, "Climbing" : 1, "Swimming" : 1}},tmp,tmp1,tmp2,{ name : "Thief", qty : 0, values : { "Stealth" : 1, "Thievery" : 2, "Observation" : 1}},tmp3,{ name : "Hunter", qty : 0, values : { "~hunter1" : 1, "Navigation" : 1, "Hunting" : 2}},tmp4,{ name : "Soldier", qty : 0, values : { "~soldier1" : 1, "Tactics" : 1, "Drill" : 2}},tmp5,{ name : "Officer", qty : 0, values : { "Drill" : 1, "Tactics" : 1, "Navigation" : 1, "Strategy" : 1}},tmp6,{ name : "Scout", qty : 0, values : { "~scout1" : 1, "Stealth" : 1, "Navigation" : 1, "Observation" : 1}},tmp7,tmp8,{ name : "Domestic", qty : 0, values : tmp9}];
};
troshx_sos_chargen_CharGenSkillPackets.getExistingSubjects = function() {
	return ["Farmer","Trade","Finance","Wood","Homestead","Criminal","Nobility","Politics","Sailing","Doctor"];
};
troshx_sos_chargen_CharGenSkillPackets.getNewSkillLabelMappingBases = function() {
	return { "~academic1" : "Knowledge", "~academic2" : "Knowledge", "~academicLast" : ["Engineering","Knowledge" + " (" + "Politics" + ")","Chymistry"], "~soldier1" : ["Athletics","Riding"], "~scout1" : ["Athletics","Riding"], "~hunter1" : ["Stealth","Riding"]};
};
troshx_sos_chargen_CharGenSkillPackets.strMapValues = function(str) {
	var dyn = { };
	var p = str.keys();
	while(p.hasNext()) {
		var p1 = p.next();
		dyn[p1] = __map_reserved[p1] != null ? str.getReserved(p1) : str.h[p1];
	}
	return dyn;
};
troshx_sos_chargen_CharGenSkillPackets.isSkillLabelBinded = function(s) {
	return s.charAt(0) == "~";
};
troshx_sos_chargen_CharGenSkillPackets.getSkillLabel = function(s,skillLabelMappingBases,skillLabelMappings) {
	if(s.charAt(0) == "~") {
		if(typeof(skillLabelMappingBases[s]) == "string") {
			return skillLabelMappingBases[s] + " (" + skillLabelMappings[s] + ")";
		} else {
			return skillLabelMappings[s];
		}
	} else {
		return s;
	}
};
var troshx_sos_combat_BoutController = function(model) {
	this.model = model;
	model.bout.s = -2;
};
$hxClasses["troshx.sos.combat.BoutController"] = troshx_sos_combat_BoutController;
troshx_sos_combat_BoutController.__name__ = ["troshx","sos","combat","BoutController"];
troshx_sos_combat_BoutController.__interfaces__ = [troshx_core_IBoutController];
troshx_sos_combat_BoutController.prototype = {
	waitForPlayer: function() {
		return null;
	}
	,step: function() {
	}
	,handleCurrentStep: function() {
		var step = this.model.bout.s;
		if(step == -2) {
			return -1;
		} else if(step == -1) {
			return -1;
		} else if(step == 0) {
			return -1;
		} else if(step == 1) {
			return 0;
		} else {
			throw new js__$Boot_HaxeError("Unhandled step:" + step);
		}
	}
	,__class__: troshx_sos_combat_BoutController
};
var troshx_sos_combat_BoutModel = function() {
	this.manueverStack = new troshx_core_ManueverStack();
	this._messages = [];
	this.bout = null;
};
$hxClasses["troshx.sos.combat.BoutModel"] = troshx_sos_combat_BoutModel;
troshx_sos_combat_BoutModel.__name__ = ["troshx","sos","combat","BoutModel"];
troshx_sos_combat_BoutModel.__interfaces__ = [troshx_core_IBoutModel];
troshx_sos_combat_BoutModel.prototype = {
	setBout: function(val) {
		this.bout = val;
	}
	,getMessages: function() {
		return this._messages;
	}
	,getMessagesCount: function() {
		return this._messages.length;
	}
	,clearMessages: function() {
		this._messages.length = 0;
	}
	,__class__: troshx_sos_combat_BoutModel
};
var troshx_sos_core_Item = function(id,name) {
	if(name == null) {
		name = "";
	}
	if(id == null) {
		id = "";
	}
	this.unit = 1;
	this.costCurrency = 0;
	this.cost = 0;
	this.flags = 0;
	this.weight = 0;
	this.id = id != null ? id : "Item_" + troshx_sos_core_Item.UID_COUNT++;
	this.name = name;
};
$hxClasses["troshx.sos.core.Item"] = troshx_sos_core_Item;
troshx_sos_core_Item.__name__ = ["troshx","sos","core","Item"];
troshx_sos_core_Item.getLabelsOfArray = function(a,mask) {
	var arr = [];
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		if((mask & 1 << i) != 0) {
			arr.push(a[i].name);
		}
	}
	return arr;
};
troshx_sos_core_Item.sign = function(i) {
	if(i >= 0) {
		return "+";
	} else {
		return "";
	}
};
troshx_sos_core_Item.labelizeAllCaps = function(name) {
	var spl = name.split("_");
	var _g1 = 0;
	var _g = spl.length;
	while(_g1 < _g) {
		var i = _g1++;
		spl[i] = spl[i].charAt(0).toUpperCase() + HxOverrides.substr(spl[i],1,null).toLowerCase();
	}
	return spl.join(" ");
};
troshx_sos_core_Item.labelizeCamelCase = function(name) {
	var r_r = new RegExp("([A-Z]+)","g".split("u").join(""));
	var r2_r = new RegExp("([A-Z][a-z])","g".split("u").join(""));
	name = name.replace(r_r,"$1");
	name = name.replace(r2_r," $1");
	name = StringTools.trim(name);
	name = name.charAt(0).toUpperCase() + HxOverrides.substr(name,1,null);
	return name;
};
troshx_sos_core_Item.labelizeAllCapsArr = function(arr) {
	var newArr = [];
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		newArr[i] = troshx_sos_core_Item.labelizeAllCaps(arr[i]);
	}
	return newArr;
};
troshx_sos_core_Item.labelizeCamelCaseArr = function(arr) {
	var newArr = [];
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		newArr[i] = troshx_sos_core_Item.labelizeCamelCase(arr[i]);
	}
	return newArr;
};
troshx_sos_core_Item.prototype = {
	normalize: function() {
		return this;
	}
	,setWeightCost: function(weight,cost,costCurrency) {
		this.weight = weight;
		this.cost = cost;
		this.costCurrency = costCurrency;
		return this;
	}
	,setUnit: function(unit) {
		this.unit = unit;
		return this;
	}
	,serializeClone: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this);
		return new haxe_Unserializer(serializer.toString()).unserialize();
	}
	,addTagsToStrArr: function(arr) {
		if((this.flags & 2) != 0) {
			arr.push("Strapped");
		}
		if(js_Boot.getClass(this) != troshx_sos_core_Weapon && (this.flags & 1) != 0) {
			arr.push("Two-Handed");
		}
		if((this.flags & 4) != 0) {
			arr.push("Eye-Corrective");
		}
		if((this.flags & 8) != 0) {
			arr.push("Prosthetic");
		}
	}
	,getTypeLabel: function() {
		return "MiscItem";
	}
	,get_uid: function() {
		if(this.id != "") {
			return this.id;
		} else {
			return this.name;
		}
	}
	,get_label: function() {
		return this.name;
	}
	,get_twoHanded: function() {
		return (this.flags & 1) != 0;
	}
	,get_strapped: function() {
		return (this.flags & 2) != 0;
	}
	,__class__: troshx_sos_core_Item
};
var troshx_sos_core_Armor = function() {
	this.customise = null;
	this.special = null;
	this.specialFlags = 0;
	this.pp = 0;
	this.burdinadin = null;
	this.AVB = 0;
	this.AVP = 0;
	this.AVC = 0;
	troshx_sos_core_Item.call(this);
};
$hxClasses["troshx.sos.core.Armor"] = troshx_sos_core_Armor;
troshx_sos_core_Armor.__name__ = ["troshx","sos","core","Armor"];
troshx_sos_core_Armor.createEmptyInstance = function() {
	var armor = new troshx_sos_core_Armor();
	armor.coverage = { };
	return armor;
};
troshx_sos_core_Armor.__super__ = troshx_sos_core_Item;
troshx_sos_core_Armor.prototype = $extend(troshx_sos_core_Item.prototype,{
	writeAVsAtLocation: function(body,hitLocationId,hitLocationMask,result,layerMask,nonFirearmMissile,targetZoneMask,includeCrushedAVS) {
		var flags = this.coverage[hitLocationId];
		if((layerMask & hitLocationMask) != 0 && this.special.wornWith.layer == -1) {
			return false;
		}
		var multiplier = (flags & 2) != 0 ? 0.5 : 1;
		if((flags & 4) != 0 && (body.thrustMask & targetZoneMask) == 0) {
			multiplier = 0;
		}
		var adder = 0;
		if(hitLocationMask != 0 && this.special != null && this.special.hitModifier != null && multiplier != 0) {
			if(targetZoneMask == 0 && this.special.hitModifier.targetZoneMask == 0 && (this.special.hitModifier.locationMask & hitLocationMask) != 0) {
				if(this.special.hitModifier.multiplyAV < 1 && this.special.hitModifier.multiplyAV < multiplier) {
					multiplier = this.special.hitModifier.multiplyAV;
				}
				if(this.special.hitModifier.multiplyAV > 1 && this.special.hitModifier.multiplyAV > multiplier) {
					multiplier = this.special.hitModifier.multiplyAV;
				}
				adder += this.special.hitModifier.addAV;
			}
			if(targetZoneMask != 0 && (this.special.hitModifier.targetZoneMask & targetZoneMask) != 0 && (this.special.hitModifier.locationMask == 0 || (this.special.hitModifier.locationMask & hitLocationMask) != 0)) {
				if(this.special.hitModifier.multiplyAV < 1 && this.special.hitModifier.multiplyAV < multiplier) {
					multiplier = this.special.hitModifier.multiplyAV;
				}
				if(this.special.hitModifier.multiplyAV > 1 && this.special.hitModifier.multiplyAV > multiplier) {
					multiplier = this.special.hitModifier.multiplyAV;
				}
				adder += this.special.hitModifier.addAV;
			}
		}
		if(includeCrushedAVS && hitLocationMask != 0 && this.customise != null && this.customise.hitLocationAllAVModifiers != null && this.customise.hitLocationAllAVModifiers[hitLocationId] != null) {
			adder += this.customise.hitLocationAllAVModifiers[hitLocationId];
		}
		var multiplierP = nonFirearmMissile && (this.specialFlags & 8) != 0 ? multiplier * 2 : multiplier;
		var avc = (this.AVC * multiplier | 0) + adder;
		var avp = (this.AVP * multiplierP | 0) + adder;
		var avb = (this.AVB * multiplier | 0) + adder;
		if(avc < 0) {
			avc = 0;
		}
		if(avp < 0) {
			avp = 0;
		}
		if(avb < 0) {
			avb = 0;
		}
		result.avc = avc;
		result.avp = avp;
		result.avb = avb;
		return true;
	}
	,writeAVVAluesTo: function(values,body,layerMask,nonFirearmMissile,targetZoneMask) {
		var tempAvs;
		if(troshx_sos_core_Armor.TEMPAVS == null) {
			troshx_sos_core_Armor.TEMPAVS = { avc : 0, avp : 0, avb : 0};
		}
		tempAvs = troshx_sos_core_Armor.TEMPAVS;
		var _g = 0;
		var _g1 = Reflect.fields(this.coverage);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var cur = values[f];
			var hitLocationId = f;
			var hitLocationMask = 1 << body.hitLocationHash[hitLocationId];
			if(!this.writeAVsAtLocation(body,hitLocationId,hitLocationMask,tempAvs,layerMask,nonFirearmMissile,targetZoneMask,true)) {
				continue;
			}
			if(tempAvs.avc > cur.avc) {
				cur.avc = tempAvs.avc;
			}
			if(tempAvs.avp > cur.avp) {
				cur.avp = tempAvs.avp;
			}
			if(tempAvs.avb > cur.avb) {
				cur.avb = tempAvs.avb;
			}
		}
	}
	,checkFubarCrushed: function(body,targetZoneMask,damageType) {
		var tempAvs;
		if(troshx_sos_core_Armor.TEMPAVS == null) {
			troshx_sos_core_Armor.TEMPAVS = { avc : 0, avp : 0, avb : 0};
		}
		tempAvs = troshx_sos_core_Armor.TEMPAVS;
		var _g = 0;
		var _g1 = Reflect.fields(this.coverage);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var hitLocationId = f;
			var hitLocationMask = 1 << body.hitLocationHash[hitLocationId];
			if(!this.writeAVsAtLocation(body,hitLocationId,hitLocationMask,tempAvs,0,false,targetZoneMask,true)) {
				continue;
			}
			var chk = damageType == 0 ? tempAvs.avc : damageType == 1 ? tempAvs.avp : tempAvs.avb;
			if(chk != 0) {
				return false;
			}
		}
		return true;
	}
	,normalize: function() {
		if(this.coverage == null) {
			this.coverage = { };
		}
		var bodyChar = this.special != null && this.special.otherBodyType != null ? this.special.otherBodyType : troshx_sos_core_BodyChar.getInstance();
		var tempSpecial = this.special;
		var tempCoverage = this.coverage;
		this.coverage = null;
		this.special = null;
		var fakeMe = this.serializeClone();
		fakeMe._coverageValues = [];
		var _g1 = 0;
		var _g = bodyChar.hitLocations.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ider = bodyChar.hitLocations[i].id;
			if(tempCoverage[ider] != null) {
				fakeMe._coverageValues.push(i);
				fakeMe._coverageValues.push(tempCoverage[ider]);
			} else {
				fakeMe._coverageValues.push(0);
				fakeMe._coverageValues.push(0);
			}
		}
		if(tempSpecial != null) {
			this.special = tempSpecial;
			fakeMe.special = tempSpecial;
		}
		this.coverage = tempCoverage;
		return fakeMe;
	}
	,getCoverageMask: function(body) {
		var mask = 0;
		var _g = 0;
		var _g1 = Reflect.fields(this.coverage);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			mask |= 1 << body.hitLocationHash[f];
		}
		return mask;
	}
	,get_uid: function() {
		return troshx_sos_core_Item.prototype.get_uid.call(this) + (this.customise != null ? " *" + this.customise.name + "*" : "");
	}
	,addCoverageTagsToStrArr: function(arr) {
		var bodyChar = this.special != null && this.special.otherBodyType != null ? this.special.otherBodyType : troshx_sos_core_BodyChar.getInstance();
		bodyChar.pushArmorCoverageLabelsTo(this.coverage,arr);
	}
	,addTagsToStrArr: function(arr) {
		troshx_sos_core_Item.prototype.addTagsToStrArr.call(this,arr);
		if(this.pp > 0) {
			arr.push("PP -" + this.pp);
		}
		var flags = this.specialFlags;
		if(flags != 0) {
			if((flags & 1) != 0) {
				arr.push("Movable");
			}
			if((flags & 2) != 0) {
				arr.push("Hard");
			}
			if((flags & 4) != 0) {
				arr.push("Mail");
			}
			if((flags & 8) != 0) {
				arr.push("Textile");
			}
			if((flags & 16) != 0) {
				arr.push("Bulletproof");
			}
		}
		if(this.special != null) {
			this.special.addTagsToStrArr(arr,this);
		}
		if(this.burdinadin != null) {
			this.burdinadin.addTagsToStrArr(arr);
		}
		if(this.customise != null) {
			this.customise.addTagsToStrArr(arr);
		}
	}
	,get_label: function() {
		return this.name + (this.customise != null ? " *" + (this.customise.name != null ? this.customise.name : this.customise.name) + "*" : "");
	}
	,getTypeLabel: function() {
		return "Armor";
	}
	,getLayerValueAt: function(locMask,layerMask) {
		var result = this.special != null && this.special.layer != 0 ? (this.special.layerCoverage == 0 || (this.special.layerCoverage & locMask) != 0 ? 1 : 0) * this.special.layer : 0;
		if(layerMask != 0 && this.special.wornWith.layer > 0) {
			if(this.special.wornWith.layer > result) {
				result = this.special.wornWith.layer;
			}
		}
		return result;
	}
	,__class__: troshx_sos_core_Armor
});
var troshx_sos_core_ArmorCustomise = function() {
	this.crest = 0;
	this.hitLocationAllAVModifiers = null;
	this.name = "";
};
$hxClasses["troshx.sos.core.ArmorCustomise"] = troshx_sos_core_ArmorCustomise;
troshx_sos_core_ArmorCustomise.__name__ = ["troshx","sos","core","ArmorCustomise"];
troshx_sos_core_ArmorCustomise.__interfaces__ = [troshx_core_IUid];
troshx_sos_core_ArmorCustomise.prototype = {
	addTagsToStrArr: function(arr) {
		var flags = this.crest;
		if(flags == 1) {
			arr.push("*Identifying");
		}
		if(flags == 2) {
			arr.push("*Intimidating");
		}
		if(flags == 3) {
			arr.push("*Ruthlessly Fashionable");
		}
	}
	,get_uid: function() {
		return this.name;
	}
	,__class__: troshx_sos_core_ArmorCustomise
};
var troshx_sos_core_ArmorSpecial = function() {
	this.otherBodyType = null;
	this.hitModifier = null;
	this.wornWith = null;
	this.layerCoverage = 0;
	this.layer = 0;
	this.restrictsBreathing = 0;
};
$hxClasses["troshx.sos.core.ArmorSpecial"] = troshx_sos_core_ArmorSpecial;
troshx_sos_core_ArmorSpecial.__name__ = ["troshx","sos","core","ArmorSpecial"];
troshx_sos_core_ArmorSpecial.prototype = {
	addTagsToStrArr: function(arr,curArmor) {
		var instance = this;
		var bodyChar = this.otherBodyType != null ? this.otherBodyType : troshx_sos_core_BodyChar.getInstance();
		if(this.otherBodyType != null) {
			arr.push("For Body Type: " + bodyChar.name);
		}
		if(instance.restrictsBreathing != 0) {
			arr.push("Restricts Breathing" + " " + instance.restrictsBreathing);
		}
		if(this.layer > 0) {
			if(this.layerCoverage != 0) {
				var myArr = [];
				bodyChar.pushHitLocationNamesToStrArrByMask(myArr,this.layerCoverage);
				arr.push("Layer" + (myArr.length > 0 ? "s" : "") + (" " + this.layer + " (" + myArr.join(", ") + ")"));
			} else {
				arr.push("Layer " + this.layer);
			}
		}
		if(this.hitModifier != null) {
			this.hitModifier.addTagsToStrArr(arr,bodyChar);
		}
		if(this.wornWith != null) {
			this.wornWith.addTagsToStrArr(arr,curArmor);
		}
	}
	,__class__: troshx_sos_core_ArmorSpecial
};
var troshx_sos_core_HitModifier = function() {
	this.addAV = 0;
	this.multiplyAV = 1;
	this.targetZoneMask = 0;
	this.locationMask = 0;
};
$hxClasses["troshx.sos.core.HitModifier"] = troshx_sos_core_HitModifier;
troshx_sos_core_HitModifier.__name__ = ["troshx","sos","core","HitModifier"];
troshx_sos_core_HitModifier.prototype = {
	addTagsToStrArr: function(arr,bodyChar) {
		if(this.targetZoneMask == 0 && this.locationMask == 0 || this.multiplyAV == 1 && this.addAV == 0) {
			return;
		}
		var swingAll = (this.targetZoneMask & bodyChar.swingMask) == bodyChar.swingMask;
		var thrustAll = (this.targetZoneMask & bodyChar.thrustMask) == bodyChar.thrustMask;
		if(this.locationMask == 0 && swingAll && thrustAll) {
			return;
		}
		var bothHave = this.addAV != 0 && this.multiplyAV != 1;
		var damageStr = this.multiplyAV == 0 && this.addAV == 0 ? "No AV" : (this.addAV < 0 ? "Reduced " : "") + (!bothHave ? this.multiplyAV != 1 ? this.multiplyAV == 0.5 ? "Provides Half AV" : this.multiplyAV + "x AV" : (this.addAV > 0 ? "+" : "") + this.addAV + " AV" : this.multiplyAV != 0 ? (this.addAV > 0 ? "+" : "") + this.addAV + " AV " + "over " + (this.multiplyAV == 0.5 ? "Half AV" : this.multiplyAV + "x AV") : this.addAV > 0 ? "Only " + this.addAV + " AV" : "+" + -this.addAV + " damage");
		arr.push(damageStr + (this.targetZoneMask != 0 && !(swingAll && thrustAll) ? " vs " + bodyChar.describeTargetZones(this.targetZoneMask) : "") + (this.locationMask != 0 ? " on " + bodyChar.getLabelsHitLocationMask(this.locationMask).join(" ,") : ""));
	}
	,__class__: troshx_sos_core_HitModifier
};
var troshx_sos_core_WornWith = function() {
	this.layer = 0;
	this.name = "";
};
$hxClasses["troshx.sos.core.WornWith"] = troshx_sos_core_WornWith;
troshx_sos_core_WornWith.__name__ = ["troshx","sos","core","WornWith"];
troshx_sos_core_WornWith.prototype = {
	addTagsToStrArr: function(arr,curArmor) {
		if(this.name == "") {
			return;
		}
		if(this.layer == 0 || this.layer == -1) {
			arr.push("When worn with " + this.name + ": Use " + (this.layer == 0 ? "own" : this.name) + " AV value instead");
		} else {
			arr.push("Can be worn with " + this.name + " for Layer " + this.layer);
		}
	}
	,__class__: troshx_sos_core_WornWith
};
var troshx_sos_core_BodyChar = function() {
	this.hitLocationHash = null;
};
$hxClasses["troshx.sos.core.BodyChar"] = troshx_sos_core_BodyChar;
troshx_sos_core_BodyChar.__name__ = ["troshx","sos","core","BodyChar"];
troshx_sos_core_BodyChar.getInstance = function() {
	if(troshx_sos_core_BodyChar.DEFAULT != null) {
		return troshx_sos_core_BodyChar.DEFAULT;
	} else {
		return troshx_sos_core_BodyChar.DEFAULT = troshx_sos_core_BodyChar.getNewDefaultInstance();
	}
};
troshx_sos_core_BodyChar.getNewDefaultInstance = function() {
	var bodyChar = new troshx_sos_core_BodyChar();
	bodyChar.name = "Humanoid";
	bodyChar.targetZones = troshx_sos_core_Humanoid.getNewTargetZones();
	bodyChar.hitLocations = troshx_sos_core_Humanoid.getNewHitLocations();
	bodyChar.thrustStartIndex = 9;
	bodyChar.rearStartIndex = 18;
	bodyChar.missileHitLocations = [-1,9,11,11,12,15,13,14,16,17];
	bodyChar.bake();
	return bodyChar;
};
troshx_sos_core_BodyChar.createBlankInstance = function() {
	var bodyChar = new troshx_sos_core_BodyChar();
	bodyChar.name = "";
	bodyChar.targetZones = [];
	bodyChar.missileHitLocations = [];
	bodyChar.hitLocations = [];
	bodyChar.thrustStartIndex = 0;
	return bodyChar;
};
troshx_sos_core_BodyChar.createEmptyInstance = function() {
	return new troshx_sos_core_BodyChar();
};
troshx_sos_core_BodyChar.prototype = {
	getNewHitLocationsFrontSlice: function() {
		return this.hitLocations.slice(0,this.rearStartIndex);
	}
	,isSwingingAll: function(mask) {
		return (mask & this.swingMask) == this.swingMask;
	}
	,isThrustingAll: function(mask) {
		return (mask & this.thrustMask) == this.thrustMask;
	}
	,isSwingingOnly: function(mask) {
		return mask == this.swingMask;
	}
	,isThrustingOnly: function(mask) {
		return mask == this.thrustMask;
	}
	,isThrusting: function(targetZone) {
		return targetZone >= this.thrustStartIndex;
	}
	,bake: function() {
		var obj = { };
		var _g1 = 0;
		var _g = this.hitLocations.length;
		while(_g1 < _g) {
			var i = _g1++;
			obj[this.hitLocations[i].id] = i;
		}
		this.hitLocationHash = obj;
		this.thrustMask = 0;
		var _g11 = this.thrustStartIndex;
		var _g2 = this.targetZones.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.thrustMask |= 1 << i1;
		}
		this.swingMask = 0;
		var _g12 = 0;
		var _g3 = this.thrustStartIndex;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.swingMask |= 1 << i2;
		}
	}
	,getTargetZoneHitAreaMasks: function() {
		var masks = [];
		var _g1 = 0;
		var _g = this.targetZones.length;
		while(_g1 < _g) {
			var i = _g1++;
			var t = this.targetZones[i];
			masks.push(t.getHitAreaMask());
		}
		return masks;
	}
	,getDescLabelTargetZone: function(zoneIndex) {
		var isThrusting = zoneIndex >= this.thrustStartIndex;
		var t = this.targetZones[zoneIndex];
		return (t.description != "" ? t.description + " to" : isThrusting ? "Thrust to" : "Swing to") + " " + t.name;
	}
	,getDescLabelsTargetZoneMask: function(mask) {
		var arr = [];
		var _g1 = 0;
		var _g = this.targetZones.length;
		while(_g1 < _g) {
			var i = _g1++;
			if((1 << i & mask) != 0) {
				arr.push(this.getDescLabelTargetZone(i));
			}
		}
		return arr;
	}
	,getTitleLabelsTargetZoneMask: function(mask) {
		var arr = [];
		var _g1 = 0;
		var _g = this.targetZones.length;
		while(_g1 < _g) {
			var i = _g1++;
			var t = this.targetZones[i];
			if((1 << i & mask) != 0) {
				arr.push(t.name + (t.description != "" ? " (" + t.description + ")" : ""));
			}
		}
		return arr;
	}
	,describeTargetZones: function(mask) {
		var str = "";
		var swinging = mask & this.swingMask;
		var thrusting = mask & this.thrustMask;
		if(swinging == this.swingMask && thrusting == this.thrustMask) {
			return "all swinging and thrusting attacks";
		}
		if(swinging != 0) {
			if(swinging == this.swingMask) {
				str += "all Swinging attacks";
			} else {
				str += "Swinging attacks to the " + this.getTitleLabelsTargetZoneMask(swinging).join(", ");
			}
		}
		if(thrusting != 0) {
			if(swinging != 0) {
				str += " and ";
			}
			if(thrusting == this.thrustMask) {
				str += "all Thrusting attacks";
			} else {
				str += "Thrusting attacks to the " + this.getTitleLabelsTargetZoneMask(thrusting).join(", ");
			}
		}
		return str;
	}
	,getLabelsHitLocationMask: function(mask) {
		var arr = [];
		var _g1 = 0;
		var _g = this.hitLocations.length;
		while(_g1 < _g) {
			var i = _g1++;
			if((1 << i & mask) != 0) {
				arr.push(this.hitLocations[i].name);
			}
		}
		return arr;
	}
	,pushHitLocationNamesToStrArrByMask: function(arr,mask) {
		var _g1 = 0;
		var _g = this.hitLocations.length;
		while(_g1 < _g) {
			var i = _g1++;
			if((mask & 1 << i) != 0) {
				arr.push(this.hitLocations[i].name);
			}
		}
	}
	,pushArmorCoverageLabelsTo: function(coverage,arr) {
		var _g = 0;
		var _g1 = Reflect.fields(this.hitLocationHash);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var h = this.hitLocations[this.hitLocationHash[f]];
			var f1 = coverage[f];
			arr.push(h.name + ((f1 & 1) != 0 ? "ϕ" : "") + ((f1 & 2) != 0 ? "*" : ""));
		}
	}
	,getHitLocationLabelFromId: function(id) {
		var i = this.hitLocationHash[id];
		if(i != null) {
			return this.hitLocations[i].name;
		}
		return null;
	}
	,getHitLocationById: function(id) {
		var i = this.hitLocationHash[id];
		if(i != null) {
			return this.hitLocations[i];
		}
		return null;
	}
	,gotSideWithId: function(locationId) {
		var hitLoc = this.getHitLocationById(locationId);
		if(hitLoc != null) {
			return hitLoc.twoSided;
		} else {
			return false;
		}
	}
	,__class__: troshx_sos_core_BodyChar
};
var troshx_sos_core_IBodyHitZones = function() { };
$hxClasses["troshx.sos.core.IBodyHitZones"] = troshx_sos_core_IBodyHitZones;
troshx_sos_core_IBodyHitZones.__name__ = ["troshx","sos","core","IBodyHitZones"];
var troshx_sos_core_Humanoid = function() { };
$hxClasses["troshx.sos.core.Humanoid"] = troshx_sos_core_Humanoid;
troshx_sos_core_Humanoid.__name__ = ["troshx","sos","core","Humanoid"];
troshx_sos_core_Humanoid.getNewTargetZones = function() {
	return [troshx_sos_core_TargetZone.create("Head",[3,2,2,3],[4,2,1,0],0,"Downward Swing"),troshx_sos_core_TargetZone.create("Head",[3,2,3,2],[5,3,2,1],0,"Upward Swing"),troshx_sos_core_TargetZone.create("Neck",[3,3,2,2],[4,3,2,1]),troshx_sos_core_TargetZone.create("Torso",[3,4,3],[7,6,5]),troshx_sos_core_TargetZone.create("Upper Arm",[3,4,3],[15,14,4]),troshx_sos_core_TargetZone.create("Lower Arm",[3,4,3],[17,16,15]),troshx_sos_core_TargetZone.create("Upper Leg",[3,4,3],[11,10,8]),troshx_sos_core_TargetZone.create("Lower Leg",[3,4,3],[13,12,11]),troshx_sos_core_TargetZone.create("Groin",[3,4,3],[10,9,7]),troshx_sos_core_TargetZone.create("Head",[3,4,3],[3,1,0]),troshx_sos_core_TargetZone.create("Neck",[3,4,3],[5,3,1]),troshx_sos_core_TargetZone.create("Chest",[3,4,2,1],[7,5,4,3]),troshx_sos_core_TargetZone.create("Belly",[1,1,5,3],[9,8,6,7]),troshx_sos_core_TargetZone.create("Upper Arm",[3,4,3],[15,14,4]),troshx_sos_core_TargetZone.create("Lower Arm",[3,4,3],[17,16,15]),troshx_sos_core_TargetZone.create("Groin",[3,4,3],[10,9,7]),troshx_sos_core_TargetZone.create("Upper Leg",[3,4,3],[11,10,8]),troshx_sos_core_TargetZone.create("Lower Leg",[3,4,3],[13,12,11])];
};
troshx_sos_core_Humanoid.getNewHitLocations = function() {
	return [new troshx_sos_core_HitLocation("Upper Head","upperHead"),new troshx_sos_core_HitLocation("Face","face"),new troshx_sos_core_HitLocation("Lower Head","lowerHead"),new troshx_sos_core_HitLocation("Neck","neck"),new troshx_sos_core_HitLocation("Shoulder","shoulder",true),new troshx_sos_core_HitLocation("Chest","chest"),new troshx_sos_core_HitLocation("Side","side",true),new troshx_sos_core_HitLocation("Belly","belly"),new troshx_sos_core_HitLocation("Hip","hip",true),new troshx_sos_core_HitLocation("Groin","groin"),new troshx_sos_core_HitLocation("Thigh","thigh",true),new troshx_sos_core_HitLocation("Knee","knee",true),new troshx_sos_core_HitLocation("Shin","shin",true),new troshx_sos_core_HitLocation("Foot","foot",true),new troshx_sos_core_HitLocation("Upper Arm","upperArm",true),new troshx_sos_core_HitLocation("Elbow","elbow",true),new troshx_sos_core_HitLocation("Forearm","forearm",true),new troshx_sos_core_HitLocation("Hand","hand",true),new troshx_sos_core_HitLocation("Upper Back","upperBack"),new troshx_sos_core_HitLocation("Lower Back","lowerBack")];
};
var troshx_sos_core_BurdinadinArmory = function() { };
$hxClasses["troshx.sos.core.BurdinadinArmory"] = troshx_sos_core_BurdinadinArmory;
troshx_sos_core_BurdinadinArmory.__name__ = ["troshx","sos","core","BurdinadinArmory"];
var troshx_sos_core_BurdinadinArmor = function() {
	this.augmentations = 0;
	this.insulation = 0;
};
$hxClasses["troshx.sos.core.BurdinadinArmor"] = troshx_sos_core_BurdinadinArmor;
troshx_sos_core_BurdinadinArmor.__name__ = ["troshx","sos","core","BurdinadinArmor"];
troshx_sos_core_BurdinadinArmor.prototype = {
	addTagsToStrArr: function(arr) {
		if(this.insulation != 0) {
			arr.push("Insulation " + this.insulation);
		}
		if(this.augmentations != 0) {
			arr.push("Augmentations (" + this.augmentations + ")");
		}
	}
	,__class__: troshx_sos_core_BurdinadinArmor
};
var troshx_sos_core_Crossbow = function() {
	this.spanningTools = 0;
	this.span = 0;
};
$hxClasses["troshx.sos.core.Crossbow"] = troshx_sos_core_Crossbow;
troshx_sos_core_Crossbow.__name__ = ["troshx","sos","core","Crossbow"];
troshx_sos_core_Crossbow.prototype = {
	getSpanningToolsStrArr: function() {
		var arr = troshx_sos_core_Item.getLabelsOfArray(troshx_sos_core_SpanningTool.getDefaultList(),this.spanningTools);
		return arr;
	}
	,addAmmoTagsToStrArr: function(arr) {
		if(this.span != 0) {
			arr.push("Span " + (this.span >= 0 ? "+" : "") + this.span);
		}
	}
	,__class__: troshx_sos_core_Crossbow
};
var troshx_sos_core_SpanningTool = function(name,spanBonus,storeSpan,id) {
	if(id == null) {
		id = "";
	}
	if(storeSpan == null) {
		storeSpan = false;
	}
	if(spanBonus == null) {
		spanBonus = 0;
	}
	if(name == null) {
		name = "";
	}
	troshx_sos_core_Item.call(this,id,name);
	this.spanBonus = spanBonus;
	this.storeSpan = storeSpan;
};
$hxClasses["troshx.sos.core.SpanningTool"] = troshx_sos_core_SpanningTool;
troshx_sos_core_SpanningTool.__name__ = ["troshx","sos","core","SpanningTool"];
troshx_sos_core_SpanningTool.getDefaultList = function() {
	if(troshx_sos_core_SpanningTool.LIST != null) {
		return troshx_sos_core_SpanningTool.LIST;
	} else {
		return troshx_sos_core_SpanningTool.LIST = troshx_sos_core_SpanningTool.getNewDefaultList();
	}
};
troshx_sos_core_SpanningTool.getNewDefaultList = function() {
	var a = [];
	a[0] = new troshx_sos_core_SpanningTool("Hand",0,false,"").setWeightCost(0,0,0);
	a[1] = new troshx_sos_core_SpanningTool("Lever",2,false,"").setWeightCost(0,5,0);
	a[2] = new troshx_sos_core_SpanningTool("Screw",0,true,"").setWeightCost(0,1,1);
	a[3] = new troshx_sos_core_SpanningTool("Stirrup",5,false,"").setWeightCost(1,5,0);
	a[4] = new troshx_sos_core_SpanningTool("Windlass",4,true,"").setWeightCost(1,2,1);
	a[5] = new troshx_sos_core_SpanningTool("Winch",6,true,"").setWeightCost(2,3,1);
	a[6] = new troshx_sos_core_SpanningTool("Crank",3,true,"").setWeightCost(0,1,1);
	return a;
};
troshx_sos_core_SpanningTool.__super__ = troshx_sos_core_Item;
troshx_sos_core_SpanningTool.prototype = $extend(troshx_sos_core_Item.prototype,{
	__class__: troshx_sos_core_SpanningTool
});
var troshx_sos_core_DamageType = function() {
};
$hxClasses["troshx.sos.core.DamageType"] = troshx_sos_core_DamageType;
troshx_sos_core_DamageType.__name__ = ["troshx","sos","core","DamageType"];
troshx_sos_core_DamageType.isMelee = function(type) {
	return type < 4;
};
troshx_sos_core_DamageType.getNewFlagVarNames = function() {
	var arr = [];
	arr.push("c");
	arr.push("p");
	arr.push("b");
	arr.push("u");
	arr.push("fl");
	arr.push("br");
	arr.push("el");
	arr.push("cl");
	return arr;
};
troshx_sos_core_DamageType.getFlagVarNames = function() {
	if(troshx_sos_core_DamageType.FLAG_VAR_NAMES != null) {
		return troshx_sos_core_DamageType.FLAG_VAR_NAMES;
	} else {
		return troshx_sos_core_DamageType.FLAG_VAR_NAMES = troshx_sos_core_DamageType.getNewFlagVarNames();
	}
};
troshx_sos_core_DamageType.getNewFlagLabels = function() {
	var arr = [];
	arr.push("Cutting");
	arr.push("Piercing");
	arr.push("Bludgeoning");
	arr.push("Unarmed");
	arr.push("Falling");
	arr.push("Burn");
	arr.push("Electrical");
	arr.push("Cold");
	return arr;
};
troshx_sos_core_DamageType.getFlagLabels = function() {
	if(troshx_sos_core_DamageType.FLAG_LABELS != null) {
		return troshx_sos_core_DamageType.FLAG_LABELS;
	} else {
		return troshx_sos_core_DamageType.FLAG_LABELS = troshx_sos_core_DamageType.getNewFlagLabels();
	}
};
troshx_sos_core_DamageType.prototype = {
	__class__: troshx_sos_core_DamageType
};
var troshx_sos_core_Firearm = function() {
	this.firingMechanism = null;
	this.highCaliber = 0;
	this.revolver = 0;
	this.magazine = 0;
	this.multishot = 0;
	this["double"] = false;
	this.load = 0;
	this.ammunitionsCustom = null;
	this.ammunitions = 0;
};
$hxClasses["troshx.sos.core.Firearm"] = troshx_sos_core_Firearm;
troshx_sos_core_Firearm.__name__ = ["troshx","sos","core","Firearm"];
troshx_sos_core_Firearm.prototype = {
	addTagsToStrArr: function(arr,addSign,forAmmo) {
		if(this["double"]) {
			arr.push("Double");
		}
		if(this.multishot != 0) {
			arr.push("Multishot " + (addSign ? this.multishot >= 0 ? "+" : "" : "") + this.multishot);
		}
		if(this.magazine != 0) {
			arr.push("Magazine " + (addSign ? this.magazine >= 0 ? "+" : "" : "") + this.magazine);
		}
		if(this.revolver != 0) {
			arr.push("Revolver " + (addSign ? this.revolver >= 0 ? "+" : "" : "") + this.revolver);
		}
		if(this.revolver != 0) {
			arr.push("High Caliber " + (addSign ? this.highCaliber >= 0 ? "+" : "" : "") + this.highCaliber);
		}
		if(forAmmo && this.load != 0) {
			arr.push("Load " + (addSign ? this.load >= 0 ? "+" : "" : "") + this.load);
		}
	}
	,getAmmunitionsStrArr: function() {
		var arr = troshx_sos_core_Item.getLabelsOfArray(troshx_sos_core_Ammunition.getDefaultList(),this.ammunitions);
		if(this.ammunitionsCustom != null) {
			arr = this.ammunitionsCustom.concat(arr);
		}
		return arr;
	}
	,__class__: troshx_sos_core_Firearm
};
var troshx_sos_core_FiringMechanism = function(name,loadingMechanisms,id) {
	if(id == null) {
		id = "";
	}
	if(loadingMechanisms == null) {
		loadingMechanisms = 0;
	}
	if(name == null) {
		name = "";
	}
	this.loadingMechanismsCustom = null;
	troshx_sos_core_Item.call(this,id,name);
	this.loadingMechanisms = loadingMechanisms;
};
$hxClasses["troshx.sos.core.FiringMechanism"] = troshx_sos_core_FiringMechanism;
troshx_sos_core_FiringMechanism.__name__ = ["troshx","sos","core","FiringMechanism"];
troshx_sos_core_FiringMechanism.getDefaultList = function() {
	if(troshx_sos_core_FiringMechanism.LIST != null) {
		return troshx_sos_core_FiringMechanism.LIST;
	} else {
		return troshx_sos_core_FiringMechanism.LIST = troshx_sos_core_FiringMechanism.getNewDefaultList();
	}
};
troshx_sos_core_FiringMechanism.getNewDefaultList = function() {
	var a = [];
	var f = new troshx_sos_core_FiringMechanism("Caplock",5).setWeightCost(0,12,2);
	a[0] = f;
	f = new troshx_sos_core_FiringMechanism("Firelock",1);
	a[1] = f;
	f = new troshx_sos_core_FiringMechanism("Flintlock",5).setWeightCost(0,3,1);
	a[2] = f;
	f = new troshx_sos_core_FiringMechanism("Matchlock",5).setWeightCost(0,6,0);
	a[3] = f;
	f = new troshx_sos_core_FiringMechanism("Needlefire",10).setWeightCost(0,5,2);
	a[4] = f;
	f = new troshx_sos_core_FiringMechanism("Snaplock",5).setWeightCost(0,2,1);
	a[5] = f;
	f = new troshx_sos_core_FiringMechanism("Wheelock",5).setWeightCost(0,8,1);
	a[6] = f;
	return a;
};
troshx_sos_core_FiringMechanism.__super__ = troshx_sos_core_Item;
troshx_sos_core_FiringMechanism.prototype = $extend(troshx_sos_core_Item.prototype,{
	__class__: troshx_sos_core_FiringMechanism
});
var troshx_sos_core_Weapon = function(id,name) {
	if(name == null) {
		name = "";
	}
	if(id == null) {
		id = "";
	}
	this._showCustomTags = true;
	this.isAmmo = false;
	this.firearm = null;
	this.crossbow = null;
	this.requiredStr = 0;
	this.stuckChance = 0;
	this.missileSpecial = null;
	this.missileFlags = 0;
	this.damageTypeM = 1;
	this.damageM = 0;
	this.atnM = 0;
	this.range = 0;
	this.meleeSpecial = null;
	this.meleeFlags = 0;
	this.guard = 0;
	this.dtn = 0;
	this.damageTypeT = 1;
	this.damageTypeS = 0;
	this.damageT = 0;
	this.damageS = 0;
	this.atnT = 0;
	this.atnS = 0;
	this.variant = null;
	this.reach = 4;
	this.ranged = false;
	this.profsCustom = null;
	this.profs = 0;
	this.customise = null;
	troshx_sos_core_Item.call(this,id,name);
};
$hxClasses["troshx.sos.core.Weapon"] = troshx_sos_core_Weapon;
troshx_sos_core_Weapon.__name__ = ["troshx","sos","core","Weapon"];
troshx_sos_core_Weapon.isTwoHandedOff = function(weap) {
	var a = weap.meleeFlags;
	var b = weap.flags;
	var c = !weap.ranged && !weap.isAmmo;
	if(c && (a & 128) != 0) {
		return (b & 1) != 0;
	} else {
		return false;
	}
};
troshx_sos_core_Weapon.IsPowerOfTwoOrZero = function(x) {
	return (x & x - 1) == 0;
};
troshx_sos_core_Weapon.__super__ = troshx_sos_core_Item;
troshx_sos_core_Weapon.prototype = $extend(troshx_sos_core_Item.prototype,{
	normalize: function() {
		if(this.ranged) {
			var a = (this.profs & 1) != 0;
			if(!(this.ranged && a && !this.isAmmo)) {
				this.requiredStr = 0;
			}
			this.meleeFlags = 0;
			this.meleeSpecial = null;
			this.atnS = 0;
			this.atnT = 0;
			this.dtn = 0;
			this.guard = 0;
			this.damageS = 0;
			this.damageT = 0;
			this.damageTypeS = 0;
			this.damageTypeT = 1;
			this.variant = null;
			this.reach = 4;
		} else {
			this.missileFlags = 0;
			this.missileSpecial = null;
			this.stuckChance = 0;
			this.requiredStr = 0;
			this.firearm = null;
			this.crossbow = null;
			this.isAmmo = false;
			this.damageTypeM = 1;
		}
		return this;
	}
	,isAttachment: function() {
		var m = (this.meleeFlags & 65536) != 0;
		var r = (this.missileFlags & 16) != 0;
		if(this.ranged) {
			return r;
		} else {
			return m;
		}
	}
	,isMeleeAttachmentFor: function(other) {
		if(this.ranged) {
			return false;
		} else if((this.meleeFlags & 65536) != 0) {
			return other.supportsMeleeAttachment();
		} else {
			return false;
		}
	}
	,supportsMeleeAttachment: function() {
		var ranged = this.ranged;
		if((this.meleeFlags & 20480) != 0) {
			return !ranged;
		} else {
			return false;
		}
	}
	,hasNoProf: function() {
		if(this.profsCustom == null || this.profsCustom.list.length == 0) {
			return this.profs == 0;
		} else {
			return false;
		}
	}
	,matchesTypes: function(ranged,profs) {
		var thisProfs = this.profs;
		if(this.ranged == ranged) {
			if(profs != null) {
				return (profs & thisProfs) != 0;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,isMelee: function() {
		if(!this.ranged) {
			return !this.isAmmo;
		} else {
			return false;
		}
	}
	,isRangedWeap: function() {
		if(this.ranged) {
			return !this.isAmmo;
		} else {
			return false;
		}
	}
	,isBow: function() {
		var a = (this.profs & 1) != 0;
		if(this.ranged && a) {
			return !this.isAmmo;
		} else {
			return false;
		}
	}
	,isSling: function() {
		var a = (this.profs & 2) != 0;
		if(this.ranged && a) {
			return !this.isAmmo;
		} else {
			return false;
		}
	}
	,isCrossbow: function() {
		var a = (this.profs & 4) != 0;
		if(this.ranged && a && !this.isAmmo) {
			return this.crossbow != null;
		} else {
			return false;
		}
	}
	,isFirearm: function() {
		var a = (this.profs & 8) != 0;
		if(this.ranged && a && !this.isAmmo) {
			return this.firearm != null;
		} else {
			return false;
		}
	}
	,isThrowing: function() {
		var a = (this.profs & 16) != 0;
		if(this.ranged && a) {
			return !this.isAmmo;
		} else {
			return false;
		}
	}
	,isAmmunition: function() {
		if(this.isAmmo) {
			return this.ranged;
		} else {
			return false;
		}
	}
	,profLabels: function() {
		var arr = troshx_sos_core_Profeciency.getLabelsOfArrayProfs(this.ranged ? troshx_sos_core_Profeciency.CORE_RANGED != null ? troshx_sos_core_Profeciency.CORE_RANGED : troshx_sos_core_Profeciency.CORE_RANGED = troshx_sos_core_Profeciency.getNewCoreRanged() : troshx_sos_core_Profeciency.getCoreMelee(),this.profs);
		if(this.profsCustom != null) {
			var _g1 = 0;
			var _g = this.profsCustom.list.length;
			while(_g1 < _g) {
				var i = _g1++;
				arr.push(this.profsCustom.list[i].name);
			}
		}
		return arr.join(", ");
	}
	,addTagsToStrArr: function(arr) {
		troshx_sos_core_Item.prototype.addTagsToStrArr.call(this,arr);
		var flags = this.ranged ? this.missileFlags : this.meleeFlags;
		var myArr;
		var valCheck;
		if(this.ranged) {
			myArr = troshx_sos_core_MissileSpecial.getLabelsOfFlags(this.missileSpecial,this.missileFlags);
			var _g1 = 0;
			var _g = myArr.length;
			while(_g1 < _g) {
				var i = _g1++;
				arr.push(myArr[i]);
			}
			if(this.isAmmo) {
				if(this.crossbow != null && (this.profs & 4) != 0) {
					this.crossbow.addAmmoTagsToStrArr(arr);
				}
				if((this.profs & 1) != 0) {
					if(this.requiredStr != 0) {
						arr.push("Required STR " + (this.requiredStr >= 0 ? "+" : "") + this.requiredStr);
					}
				}
			}
			if(this.firearm != null && (this.profs & 8) != 0) {
				this.firearm.addTagsToStrArr(arr,this.isAmmo,this.isAmmo);
			}
		} else {
			myArr = troshx_sos_core_MeleeSpecial.getLabelsOfFlags(this.meleeSpecial,this.meleeFlags);
			var _g11 = 0;
			var _g2 = myArr.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				arr.push(myArr[i1]);
			}
			if(this.customise != null && this._showCustomTags) {
				this.customise.addMeleeTagsToStrArr(arr);
			}
		}
	}
	,isMultipleCoreProf: function() {
		if(this.profs != 0) {
			var x = this.profs;
			return (x & x - 1) != 0;
		} else {
			return false;
		}
	}
	,hasCustomProf: function() {
		if(this.profsCustom != null) {
			return this.profsCustom.list.length > 0;
		} else {
			return false;
		}
	}
	,setSingleProfIndex: function(index) {
		this.profs = 1 << index;
	}
	,setMultipleProf: function(mask) {
		this.profs = mask;
	}
	,get_uid: function() {
		return troshx_sos_core_Item.prototype.get_uid.call(this) + (this.customise != null ? "_" + this.customise.get_uid() : "");
	}
	,getWeapLabel: function(handOff) {
		var tmp;
		var tmp1;
		var a = (this.profs & 8) != 0;
		if(this.ranged && a && !this.isAmmo && this.firearm != null) {
			tmp1 = this.firearm.firingMechanism != null;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = this.firearm.firingMechanism.name + " ";
		} else {
			tmp = "";
		}
		return tmp + this.name + (handOff ? "*" : "") + (this.customise != null ? " *" + (this.customise.name != null ? this.customise.name : this.customise.get_uid()) + "*" : "");
	}
	,get_label: function() {
		var tmp;
		var tmp1;
		var a = (this.profs & 8) != 0;
		if(this.ranged && a && !this.isAmmo && this.firearm != null) {
			tmp1 = this.firearm.firingMechanism != null;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = this.firearm.firingMechanism.name + " ";
		} else {
			tmp = "";
		}
		return tmp + this.name + "" + (this.customise != null ? " *" + (this.customise.name != null ? this.customise.name : this.customise.get_uid()) + "*" : "");
	}
	,getLabelHeld: function(handOff) {
		var tmp;
		var tmp1;
		var a = (this.profs & 8) != 0;
		if(this.ranged && a && !this.isAmmo && this.firearm != null) {
			tmp1 = this.firearm.firingMechanism != null;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = this.firearm.firingMechanism.name + " ";
		} else {
			tmp = "";
		}
		return tmp + this.name + (handOff ? "*" : "") + (this.customise != null ? " *" + (this.customise.name != null ? this.customise.name : this.customise.get_uid()) + "*" : "");
	}
	,getTypeLabel: function() {
		return "Weapon";
	}
	,__class__: troshx_sos_core_Weapon
});
var troshx_sos_core_Ammunition = function(name,catchChance,id) {
	if(id == null) {
		id = "";
	}
	if(catchChance == null) {
		catchChance = 0;
	}
	if(name == null) {
		name = "";
	}
	troshx_sos_core_Weapon.call(this,id,name);
	this.stuckChance = catchChance;
	this.ranged = true;
	this.isAmmo = true;
	this.firearm = new troshx_sos_core_Firearm();
	this.profs = 8;
};
$hxClasses["troshx.sos.core.Ammunition"] = troshx_sos_core_Ammunition;
troshx_sos_core_Ammunition.__name__ = ["troshx","sos","core","Ammunition"];
troshx_sos_core_Ammunition.getDefaultList = function() {
	if(troshx_sos_core_Ammunition.LIST != null) {
		return troshx_sos_core_Ammunition.LIST;
	} else {
		return troshx_sos_core_Ammunition.LIST = troshx_sos_core_Ammunition.getNewDefaultList();
	}
};
troshx_sos_core_Ammunition.getNewDefaultList = function() {
	var a = [];
	var f = new troshx_sos_core_Ammunition("Ball",9).setWeightCost(0,1,0).setUnit(10);
	a[0] = f;
	f.missileSpecial = new troshx_sos_core_MissileSpecial();
	f.missileSpecial.AP = 4;
	f = new troshx_sos_core_Ammunition("Buck and Ball",9).setWeightCost(0,1,0).setUnit(10);
	a[1] = f;
	f.missileSpecial = new troshx_sos_core_MissileSpecial();
	f.missileSpecial.scatter = 3;
	f.missileSpecial.scatter_y = 6;
	f.missileSpecial.AP = 2;
	f.missileFlags = 8;
	f = new troshx_sos_core_Ammunition("Heavy Shot",9).setWeightCost(0,3,0).setUnit(10);
	a[2] = f;
	f.missileSpecial = new troshx_sos_core_MissileSpecial();
	f.missileSpecial.scatter = 8;
	f.missileSpecial.scatter_y = 6;
	f = new troshx_sos_core_Ammunition("Rifle Ball",8).setWeightCost(0,6,0).setUnit(10);
	a[3] = f;
	f.atnM = -1;
	f.missileSpecial = new troshx_sos_core_MissileSpecial();
	f.missileSpecial.AP = 4;
	f.firearm = new troshx_sos_core_Firearm();
	f.firearm.load = -10;
	f = new troshx_sos_core_Ammunition("Shot",9).setWeightCost(0,1,0).setUnit(10);
	a[4] = f;
	f.missileSpecial = new troshx_sos_core_MissileSpecial();
	f.missileSpecial.scatter = 6;
	f.missileSpecial.scatter_y = 6;
	f = new troshx_sos_core_Ammunition("Spike",1).setWeightCost(0,1,0);
	a[5] = f;
	f.damageM = 2;
	f.atnM = -1;
	f.range = 3;
	f.firearm = new troshx_sos_core_Firearm();
	f.firearm.load = 10;
	return a;
};
troshx_sos_core_Ammunition.__super__ = troshx_sos_core_Weapon;
troshx_sos_core_Ammunition.prototype = $extend(troshx_sos_core_Weapon.prototype,{
	__class__: troshx_sos_core_Ammunition
});
var troshx_sos_core_LoadingMechanism = function(name,loadBonus,ammunitionCostModifier) {
	if(ammunitionCostModifier == null) {
		ammunitionCostModifier = 100;
	}
	if(loadBonus == null) {
		loadBonus = 0;
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.loadBonus = loadBonus;
	this.ammunitionCostModifier = ammunitionCostModifier;
};
$hxClasses["troshx.sos.core.LoadingMechanism"] = troshx_sos_core_LoadingMechanism;
troshx_sos_core_LoadingMechanism.__name__ = ["troshx","sos","core","LoadingMechanism"];
troshx_sos_core_LoadingMechanism.getDefaultList = function() {
	if(troshx_sos_core_LoadingMechanism.LIST != null) {
		return troshx_sos_core_LoadingMechanism.LIST;
	} else {
		return troshx_sos_core_LoadingMechanism.LIST = troshx_sos_core_LoadingMechanism.getNewDefaultList();
	}
};
troshx_sos_core_LoadingMechanism.getNewDefaultList = function() {
	var a = [];
	var f = new troshx_sos_core_LoadingMechanism("Manual",0,100);
	a[0] = f;
	f = new troshx_sos_core_LoadingMechanism("Brass Catridge",10,1000);
	a[1] = f;
	f = new troshx_sos_core_LoadingMechanism("Paper Catridge",3,200);
	a[2] = f;
	f = new troshx_sos_core_LoadingMechanism("Paper Mache Catridge",5,300);
	a[3] = f;
	return a;
};
troshx_sos_core_LoadingMechanism.prototype = {
	get_ammunitionCostRatio: function() {
		return this.ammunitionCostModifier / 100;
	}
	,__class__: troshx_sos_core_LoadingMechanism
};
var troshx_sos_core_HitLocation = function(name,id,twoSided) {
	if(twoSided == null) {
		twoSided = false;
	}
	this.name = name;
	this.id = id;
	this.twoSided = twoSided;
};
$hxClasses["troshx.sos.core.HitLocation"] = troshx_sos_core_HitLocation;
troshx_sos_core_HitLocation.__name__ = ["troshx","sos","core","HitLocation"];
troshx_sos_core_HitLocation.prototype = {
	get_uid: function() {
		return this.id;
	}
	,__class__: troshx_sos_core_HitLocation
};
var troshx_sos_core_Money = function() {
	this.cp = 0;
	this.sp = 0;
	this.gp = 0;
};
$hxClasses["troshx.sos.core.Money"] = troshx_sos_core_Money;
troshx_sos_core_Money.__name__ = ["troshx","sos","core","Money"];
troshx_sos_core_Money.create = function(gp,sp,cp) {
	var m = new troshx_sos_core_Money();
	m.gp = gp;
	m.sp = sp;
	m.cp = cp;
	return m;
};
troshx_sos_core_Money.getLabelWith = function(gp,sp,cp) {
	return (gp != 0 ? gp + " gp" : "") + (sp != 0 ? (gp != 0 ? " " : "") + sp + " sp" : "") + (cp != 0 ? (sp != 0 || gp != 0 ? " " : "") + cp + " cp" : "");
};
troshx_sos_core_Money.prototype = {
	matchWith: function(other) {
		this.gp = other.gp;
		this.sp = other.sp;
		this.cp = other.cp;
		return this;
	}
	,matchWithValues: function(g,s,c) {
		this.gp = g;
		this.sp = s;
		this.cp = c;
		return this;
	}
	,isNegative: function() {
		return this.cp < 0;
	}
	,changeToHighest: function() {
		var q;
		if(this.cp > 12) {
			q = this.cp * 0.083333333333333329 | 0;
			this.sp += q;
			this.cp -= q * 12;
		}
		if(this.sp > 20) {
			q = this.sp * 0.05 | 0;
			this.gp += q;
			this.sp -= q * 20;
		}
		return this;
	}
	,getLabel: function() {
		return (this.gp != 0 ? this.gp + " gp" : "") + (this.sp != 0 ? (this.gp != 0 ? " " : "") + this.sp + " sp" : "") + (this.cp != 0 ? (this.sp != 0 || this.gp != 0 ? " " : "") + this.cp + " cp" : "");
	}
	,tempCalc: function() {
		return troshx_sos_core_Money.TEMP.matchWith(this);
	}
	,resetTo: function(money) {
		money.matchWith(this);
		return money;
	}
	,addValues: function(g,s,c) {
		this.gp += g;
		this.sp += s;
		this.cp += c;
		return this;
	}
	,getCPValue: function() {
		return this.gp * 240 + this.sp * 12 + this.cp;
	}
	,getGoldValue: function() {
		return this.gp + this.sp * 0.05 + this.cp * 0.0041666666666666666;
	}
	,getSilverValue: function() {
		return this.gp * 20 + this.sp + this.cp * 0.083333333333333329;
	}
	,convertAllToCP: function() {
		var c = this.gp * 240 + this.sp * 12 + this.cp;
		this.gp = 0;
		this.sp = 0;
		this.cp = c;
		return this;
	}
	,addCP: function(c) {
		this.cp += c;
		return this;
	}
	,subtractCP: function(c) {
		this.cp -= c;
		if(this.cp < 0) {
			if(this.sp > 0) {
				this.cp += this.sp * 12;
				this.sp = 0;
			}
			if(this.cp < 0 && this.gp > 0) {
				this.cp += this.gp * 240;
				this.gp = 0;
			}
		}
		return this;
	}
	,addAgainst: function(against) {
		this.gp += against.gp;
		this.sp += against.sp;
		this.cp += against.cp;
		return this;
	}
	,subtractValues: function(g,s,c) {
		this.gp -= g;
		if(this.gp < 0) {
			this.sp += this.gp * 20;
			this.gp = 0;
		}
		this.sp -= s;
		if(this.sp < 0) {
			this.cp += this.sp * 12;
			this.sp = 0;
		}
		this.cp -= c;
		if(this.cp < 0) {
			if(this.sp > 0) {
				this.cp += this.sp * 12;
				this.sp = 0;
			}
			if(this.cp < 0 && this.gp > 0) {
				this.cp += this.gp * 240;
				this.gp = 0;
			}
		}
		return this;
	}
	,naiveChangeNegativeCP: function() {
		if(this.cp < 0) {
			if(this.sp > 0) {
				this.cp += this.sp * 12;
				this.sp = 0;
			}
			if(this.cp < 0 && this.gp > 0) {
				this.cp += this.gp * 240;
				this.gp = 0;
			}
		}
	}
	,subtractAgainst: function(against) {
		this.gp -= against.gp;
		if(this.gp < 0) {
			this.sp += this.gp * 20;
			this.gp = 0;
		}
		this.sp -= against.sp;
		if(this.sp < 0) {
			this.cp += this.sp * 12;
			this.sp = 0;
		}
		this.cp -= against.cp;
		if(this.cp < 0) {
			if(this.sp > 0) {
				this.cp += this.sp * 12;
				this.sp = 0;
			}
			if(this.cp < 0 && this.gp > 0) {
				this.cp += this.gp * 240;
				this.gp = 0;
			}
		}
		return this;
	}
	,_resetToZero: function() {
		this.sp = 0;
		this.cp = 0;
		this.gp = 0;
	}
	,resetToZero: function() {
		this.sp = 0;
		this.cp = 0;
		this.gp = 0;
		return this;
	}
	,__class__: troshx_sos_core_Money
};
var troshx_sos_core_Inventory = function() {
	this.version = 3;
	this.shieldPosition = 0;
	this.weapons = [];
	this.shields = [];
	this.equipedNonMeleeItems = [];
	this.wornArmor = [];
	this.dropPack = false;
	this.packed = new troshx_ds_IDMatchArray();
	this.dropped = new troshx_ds_IDMatchArray();
};
$hxClasses["troshx.sos.core.Inventory"] = troshx_sos_core_Inventory;
troshx_sos_core_Inventory.__name__ = ["troshx","sos","core","Inventory"];
troshx_sos_core_Inventory.getUnheldLabelsArray = function() {
	var arr = [];
	arr.push("");
	arr.push("Sheath/Holster");
	arr.push("Strapped-Arm");
	arr.push("Strapped-Shoulder");
	arr.push("Back");
	arr.push("Concealed");
	arr.push("DISABLED");
	return arr;
};
troshx_sos_core_Inventory.getReachBetween = function(w,w2) {
	return troshx_util_LibUtil.maxI(w != null ? w.reach : 1,w2 != null ? w2.reach : 1);
};
troshx_sos_core_Inventory.getReadyAssignOf = function(item) {
	var weaponAssign;
	var shieldAssign;
	var itemAssign;
	var armorAssign;
	if(js_Boot.__instanceof(item,troshx_sos_core_Weapon)) {
		weaponAssign = { weapon : item, held : 0, unheld : 0, unheldRemark : "", key : troshx_sos_core_Inventory.UID_COUNT++, attached : false, holding1H : false};
		return weaponAssign;
	} else if(js_Boot.__instanceof(item,troshx_sos_core_Shield)) {
		shieldAssign = { shield : item, attached : false, held : 0, unheld : 0, unheldRemark : "", key : troshx_sos_core_Inventory.UID_COUNT++};
		return shieldAssign;
	} else if(js_Boot.__instanceof(item,troshx_sos_core_Armor)) {
		armorAssign = { armor : item, attached : false, held : 0, unheld : 0, unheldRemark : "", key : troshx_sos_core_Inventory.UID_COUNT++};
		return armorAssign;
	} else {
		itemAssign = { item : item, attached : false, held : 0, unheld : 0, unheldRemark : "", key : troshx_sos_core_Inventory.UID_COUNT++};
		return itemAssign;
	}
};
troshx_sos_core_Inventory.getEmptyReadyAssign = function(type) {
	var weaponAssign;
	var shieldAssign;
	var itemAssign;
	var armorAssign;
	if(type == "weapon") {
		weaponAssign = { weapon : new troshx_sos_core_Weapon(), held : 0, unheld : 0, unheldRemark : "", key : troshx_sos_core_Inventory.UID_COUNT++, holding1H : false, attached : false};
		return weaponAssign;
	} else if(type == "shield") {
		shieldAssign = { shield : new troshx_sos_core_Shield(), attached : false, held : 0, unheld : 0, unheldRemark : "", key : troshx_sos_core_Inventory.UID_COUNT++};
		return shieldAssign;
	} else if(type == "armor") {
		armorAssign = { armor : troshx_sos_core_Armor.createEmptyInstance(), attached : false, held : 0, unheld : 0, unheldRemark : "", key : troshx_sos_core_Inventory.UID_COUNT++};
		return armorAssign;
	} else {
		itemAssign = { item : new troshx_sos_core_Item(), attached : false, held : 0, unheld : 0, unheldRemark : "", key : troshx_sos_core_Inventory.UID_COUNT++};
		return itemAssign;
	}
};
troshx_sos_core_Inventory.prototype = {
	setNewDroppedList: function(list) {
		this.dropped = list;
	}
	,getSignaler: function() {
		if(this.signaler != null) {
			return this.signaler;
		} else {
			return this.signaler = this.createSignaler();
		}
	}
	,createSignaler: function() {
		this.signaler = new msignal_Signal1();
		return this.signaler;
	}
	,setSignaler: function(val) {
		if(this.signaler != null && val != this.signaler) {
			this.signaler.removeAll();
		}
		this.signaler = val;
	}
	,dispatchSignal: function(signal) {
		(this.signaler != null ? this.signaler : this.signaler = this.createSignaler()).dispatch(signal);
	}
	,findOffHandItem: function() {
		var _g1 = 0;
		var _g = this.weapons.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.weapons[i].held == 2) {
				return this.weapons[i].weapon;
			}
		}
		var _g11 = 0;
		var _g2 = this.shields.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(this.shields[i1].held == 2) {
				return this.shields[i1].shield;
			}
		}
		var _g12 = 0;
		var _g3 = this.equipedNonMeleeItems.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			if(this.equipedNonMeleeItems[i2].held == 2) {
				return this.equipedNonMeleeItems[i2].item;
			}
		}
		return null;
	}
	,findMasterHandItem: function() {
		var _g1 = 0;
		var _g = this.weapons.length;
		while(_g1 < _g) {
			var i = _g1++;
			if((this.weapons[i].held & 1) != 0) {
				return this.weapons[i].weapon;
			}
		}
		var _g11 = 0;
		var _g2 = this.shields.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if((this.shields[i1].held & 1) != 0) {
				return this.shields[i1].shield;
			}
		}
		var _g12 = 0;
		var _g3 = this.equipedNonMeleeItems.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			if((this.equipedNonMeleeItems[i2].held & 1) != 0) {
				return this.equipedNonMeleeItems[i2].item;
			}
		}
		return null;
	}
	,getOffhandWeapon: function() {
		var _g1 = 0;
		var _g = this.weapons.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.weapons[i].held == 2) {
				var w = this.weapons[i];
				if(!w.holding1H || w.weapon.variant == null) {
					return w.weapon;
				} else {
					return w.weapon.variant;
				}
			}
		}
		return null;
	}
	,getMasterWeapon: function() {
		var _g1 = 0;
		var _g = this.weapons.length;
		while(_g1 < _g) {
			var i = _g1++;
			if((this.weapons[i].held & 1) != 0) {
				var w = this.weapons[i];
				if(!w.holding1H || w.weapon.variant == null) {
					return w.weapon;
				} else {
					return w.weapon.variant;
				}
			}
		}
		return null;
	}
	,getReach: function() {
		var w = this.getMasterWeapon();
		var w2 = this.getOffhandWeapon();
		return troshx_util_LibUtil.maxI(w != null ? w.reach : 1,w2 != null ? w2.reach : 1);
	}
	,findHeldShield: function() {
		var _g1 = 0;
		var _g = this.shields.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.shields[i].held == 2) {
				return this.shields[i].shield;
			}
		}
		var _g11 = 0;
		var _g2 = this.shields.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(this.shields[i1].held != 0) {
				return this.shields[i1].shield;
			}
		}
		return null;
	}
	,getWeildableWeaponsTypeFiltered: function(ranged,profs) {
		var arr = [];
		var _g1 = 0;
		var _g = this.weapons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var wp = this.weapons[i];
			var w = wp.weapon;
			var c = w.matchesTypes(ranged,profs);
			if(!(w.isAmmo && w.ranged) && c) {
				arr.push(wp);
			}
		}
		return arr;
	}
	,get_ammoFiltered: function() {
		var arr = [];
		var _g1 = 0;
		var _g = this.weapons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var wp = this.weapons[i];
			var w = this.weapons[i].weapon;
			if(w.isAmmo && w.ranged) {
				arr.push(wp);
			}
		}
		return arr;
	}
	,compareItemsEq: function(a,b) {
		var $as = new haxe_Serializer();
		var bs = new haxe_Serializer();
		$as.serialize(a);
		bs.serialize(b);
		return $as.toString() == bs.toString();
	}
	,_shiftItem: function(item,preferedUnheld,qty,attachments) {
		if(qty == null) {
			qty = 1;
		}
		if(qty <= 0) {
			qty = 1;
		}
		if(preferedUnheld > 0) {
			if(preferedUnheld != 4) {
				var q;
				var m;
				if(preferedUnheld == 1) {
					q = new troshx_sos_core_ItemQty(item,qty);
					q.attachments = attachments;
					var tmp;
					var tmp1;
					m = this.packed.getMatchingItem(q);
					if(m != null) {
						tmp1 = m.item != q.item;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						tmp = !this.compareItemsEq(m.item.normalize(),q.item.normalize());
					} else {
						tmp = false;
					}
					if(tmp) {
						return q;
					}
					this.packed.add(q);
					return null;
				} else if(preferedUnheld == 2) {
					q = new troshx_sos_core_ItemQty(item,qty);
					q.attachments = attachments;
					var tmp2;
					var tmp3;
					m = this.dropped.getMatchingItem(q);
					if(m != null) {
						tmp3 = m.item != q.item;
					} else {
						tmp3 = false;
					}
					if(tmp3) {
						tmp2 = !this.compareItemsEq(m.item.normalize(),q.item.normalize());
					} else {
						tmp2 = false;
					}
					if(tmp2) {
						return q;
					}
					this.dropped.add(q);
					return null;
				} else {
					console.log("Unaccounted prefered unheld case: " + preferedUnheld);
					return null;
				}
			}
			return null;
		} else if(preferedUnheld < 0) {
			var delItem = new troshx_sos_core_ItemQty(item);
			if(preferedUnheld == -2) {
				this.dropped.splicedAgainst(delItem);
			} else {
				this.packed.splicedAgainst(delItem);
			}
			return null;
		}
		return null;
	}
	,packItemEntryFromGround: function(itemQ,qty) {
		if(qty == null) {
			qty = 0;
		}
		if(qty == 0) {
			qty = itemQ.qty;
		} else {
			itemQ = itemQ.getQtyCopy(qty);
		}
		var s = this._shiftItem(itemQ.item,1,qty);
		if(s != null) {
			return s;
		}
		this.dropped.splicedAgainst(itemQ);
		this.dispatchSignal(troshx_sos_core_InventorySignal.PackItem);
		return null;
	}
	,dropItemEntryFromPack: function(itemQ,qty) {
		if(qty == null) {
			qty = 0;
		}
		if(qty == 0) {
			qty = itemQ.qty;
		} else {
			itemQ = itemQ.getQtyCopy(qty);
		}
		var s = this._shiftItem(itemQ.item,2,qty);
		if(s != null) {
			return s;
		}
		this.packed.splicedAgainst(itemQ);
		this.dispatchSignal(troshx_sos_core_InventorySignal.DropItem);
		return null;
	}
	,equipItemEntryFromGround: function(itemQ,remark) {
		if(remark == null) {
			remark = "";
		}
		this.dropped.splicedAgainst(new troshx_sos_core_ItemQty(itemQ.item,1));
		this.dispatchSignal(troshx_sos_core_InventorySignal.EquipItem);
		return this.equipItem(itemQ.item,remark);
	}
	,equipItemEntryFromPack: function(itemQ,remark) {
		if(remark == null) {
			remark = "";
		}
		this.packed.splicedAgainst(new troshx_sos_core_ItemQty(itemQ.item,1));
		this.dispatchSignal(troshx_sos_core_InventorySignal.EquipItem);
		return this.equipItem(itemQ.item,remark);
	}
	,holdEquiped: function(alreadyEquiped,held) {
		this._unholdAllItems(held,Object.prototype.hasOwnProperty.call(alreadyEquiped,"shield"));
		alreadyEquiped.held = held;
		this.dispatchSignal(troshx_sos_core_InventorySignal.HoldItem);
	}
	,getPerceptionPenalty: function() {
		var val = 0;
		var _g1 = 0;
		var _g = this.wornArmor.length;
		while(_g1 < _g) {
			var i = _g1++;
			val += this.wornArmor[i].armor.pp;
		}
		return val;
	}
	,calculateTotalWeight: function(forceIncludePacked,forceIncludeDropped) {
		if(forceIncludeDropped == null) {
			forceIncludeDropped = false;
		}
		if(forceIncludePacked == null) {
			forceIncludePacked = false;
		}
		var w = 0;
		if(forceIncludeDropped) {
			var _g1 = 0;
			var _g = this.dropped.list.length;
			while(_g1 < _g) {
				var i = _g1++;
				w += this.dropped.list[i].item.weight * this.dropped.list[i].qty;
			}
		}
		if(!this.dropPack || forceIncludePacked) {
			var _g11 = 0;
			var _g2 = this.packed.list.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				w += this.packed.list[i1].item.weight * this.packed.list[i1].qty;
			}
		}
		var _g12 = 0;
		var _g3 = this.wornArmor.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			w += this.wornArmor[i2].armor.weight;
		}
		var _g13 = 0;
		var _g4 = this.equipedNonMeleeItems.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			w += this.equipedNonMeleeItems[i3].item.weight;
		}
		var _g14 = 0;
		var _g5 = this.shields.length;
		while(_g14 < _g5) {
			var i4 = _g14++;
			w += this.shields[i4].shield.weight;
		}
		var _g15 = 0;
		var _g6 = this.weapons.length;
		while(_g15 < _g6) {
			var i5 = _g15++;
			w += this.weapons[i5].held == 0 ? this.weapons[i5].weapon.weight : 0;
		}
		return w;
	}
	,normalizeDroppedItems: function() {
		var _g1 = 0;
		var _g = this.dropped.list.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.dropped.list[i].item.normalize();
		}
	}
	,normalizeAllItems: function() {
		var _g1 = 0;
		var _g = this.dropped.list.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.dropped.list[i].item.normalize();
		}
		var _g11 = 0;
		var _g2 = this.packed.list.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.packed.list[i1].item.normalize();
		}
		var _g12 = 0;
		var _g3 = this.wornArmor.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.wornArmor[i2].armor.normalize();
		}
		var _g13 = 0;
		var _g4 = this.equipedNonMeleeItems.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			this.equipedNonMeleeItems[i3].item.normalize();
		}
		var _g14 = 0;
		var _g5 = this.shields.length;
		while(_g14 < _g5) {
			var i4 = _g14++;
			this.shields[i4].shield.normalize();
		}
		var _g15 = 0;
		var _g6 = this.weapons.length;
		while(_g15 < _g6) {
			var i5 = _g15++;
			this.weapons[i5].weapon.normalize();
		}
	}
	,calculateTotalCost: function(forceIncludeDropped) {
		if(forceIncludeDropped == null) {
			forceIncludeDropped = false;
		}
		var item;
		var qtyAssign;
		var calcCache = troshx_sos_core_Inventory.MONEY_CALC_CACHE;
		calcCache[0] = 0;
		calcCache[1] = 0;
		calcCache[2] = 0;
		if(forceIncludeDropped) {
			var _g1 = 0;
			var _g = this.dropped.list.length;
			while(_g1 < _g) {
				var i = _g1++;
				qtyAssign = this.dropped.list[i];
				calcCache[qtyAssign.item.costCurrency] += qtyAssign.item.cost * qtyAssign.qty;
			}
		}
		var _g11 = 0;
		var _g2 = this.packed.list.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			qtyAssign = this.packed.list[i1];
			calcCache[qtyAssign.item.costCurrency] += qtyAssign.item.cost * qtyAssign.qty;
		}
		var _g12 = 0;
		var _g3 = this.wornArmor.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			item = this.wornArmor[i2].armor;
			calcCache[item.costCurrency] += item.cost;
		}
		var _g13 = 0;
		var _g4 = this.equipedNonMeleeItems.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			item = this.equipedNonMeleeItems[i3].item;
			calcCache[item.costCurrency] += item.cost;
		}
		var _g14 = 0;
		var _g5 = this.shields.length;
		while(_g14 < _g5) {
			var i4 = _g14++;
			item = this.shields[i4].shield;
			calcCache[item.costCurrency] += item.cost;
		}
		var _g15 = 0;
		var _g6 = this.weapons.length;
		while(_g15 < _g6) {
			var i5 = _g15++;
			item = this.weapons[i5].weapon;
			calcCache[item.costCurrency] += item.cost;
		}
		var moneyRef = troshx_sos_core_Inventory.MONEY_REF;
		moneyRef.matchWithValues(calcCache[2],calcCache[1],calcCache[0]);
		return moneyRef.changeToHighest();
	}
	,sortBetweenAttachmentItems: function(ao,bo) {
		var a = ao.get_label().toLowerCase();
		var b = bo.get_label().toLowerCase();
		if(a < b) {
			return -1;
		}
		if(a > b) {
			return 1;
		}
		return 0;
	}
	,getAttachmentArray: function(arr,fromI,propName) {
		if(fromI < 0 || fromI + 1 >= arr.length || !arr[fromI + 1].attached) {
			return null;
		}
		var newArr = [];
		var _g1 = fromI;
		var _g = arr.length;
		while(_g1 < _g) {
			var i = _g1++;
			newArr.push(Reflect.field(arr[i],propName));
			if(!arr[i].attached) {
				break;
			}
		}
		newArr.sort($bind(this,this.sortBetweenAttachmentItems));
		return newArr;
	}
	,dropEquipedShield: function(alreadyEquiped,doDestroy) {
		if(doDestroy == null) {
			doDestroy = false;
		}
		var ind = this.shields.indexOf(alreadyEquiped);
		if(!doDestroy) {
			var s = this._shiftItem(alreadyEquiped.shield,2,1);
			if(s != null) {
				return s;
			}
		}
		this.shields.splice(ind,1);
		this.dispatchSignal(doDestroy ? troshx_sos_core_InventorySignal.DeleteItem : troshx_sos_core_InventorySignal.DropItem);
		return null;
	}
	,dropMiscItem: function(alreadyEquiped,doDestroy) {
		if(doDestroy == null) {
			doDestroy = false;
		}
		var ind = this.equipedNonMeleeItems.indexOf(alreadyEquiped);
		if(!doDestroy) {
			var s = this._shiftItem(alreadyEquiped.item,2,1,this.getAttachmentArray(this.equipedNonMeleeItems,ind,"item"));
			if(s != null) {
				return s;
			}
		}
		this.equipedNonMeleeItems.splice(ind,1);
		this.dispatchSignal(doDestroy ? troshx_sos_core_InventorySignal.DeleteItem : troshx_sos_core_InventorySignal.DropItem);
		return null;
	}
	,dropEquipedWeapon: function(alreadyEquiped,doDestroy) {
		if(doDestroy == null) {
			doDestroy = false;
		}
		var ind = this.weapons.indexOf(alreadyEquiped);
		if(!doDestroy) {
			var s = this._shiftItem(alreadyEquiped.weapon,2,1,this.getAttachmentArray(this.weapons,ind,"weapon"));
			if(s != null) {
				return s;
			}
		}
		this.weapons.splice(ind,1);
		this.dispatchSignal(doDestroy ? troshx_sos_core_InventorySignal.DeleteItem : troshx_sos_core_InventorySignal.DropItem);
		return null;
	}
	,dropWornArmor: function(alreadyEquiped,doDestroy) {
		if(doDestroy == null) {
			doDestroy = false;
		}
		var ind = this.wornArmor.indexOf(alreadyEquiped);
		if(!doDestroy) {
			var s = this._shiftItem(alreadyEquiped.armor,2,1,this.getAttachmentArray(this.wornArmor,ind,"armor"));
			if(s != null) {
				return s;
			}
		}
		this.wornArmor.splice(ind,1);
		this.dispatchSignal(doDestroy ? troshx_sos_core_InventorySignal.DeleteItem : troshx_sos_core_InventorySignal.DropItem);
		return null;
	}
	,packEquipedShield: function(alreadyEquiped) {
		var ind = this.shields.indexOf(alreadyEquiped);
		var s = this._shiftItem(alreadyEquiped.shield,1,1);
		if(s != null) {
			return s;
		}
		this.shields.splice(ind,1);
		this.dispatchSignal(troshx_sos_core_InventorySignal.PackItem);
		return null;
	}
	,packMiscItem: function(alreadyEquiped) {
		var ind = this.equipedNonMeleeItems.indexOf(alreadyEquiped);
		var s = this._shiftItem(alreadyEquiped.item,1,1,this.getAttachmentArray(this.equipedNonMeleeItems,ind,"item"));
		if(s != null) {
			return s;
		}
		this.equipedNonMeleeItems.splice(ind,1);
		this.dispatchSignal(troshx_sos_core_InventorySignal.PackItem);
		return null;
	}
	,packEquipedWeapon: function(alreadyEquiped) {
		var ind = this.weapons.indexOf(alreadyEquiped);
		var s = this._shiftItem(alreadyEquiped.weapon,1,1,this.getAttachmentArray(this.weapons,ind,"weapon"));
		if(s != null) {
			return s;
		}
		this.weapons.splice(ind,1);
		this.dispatchSignal(troshx_sos_core_InventorySignal.PackItem);
		return null;
	}
	,packWornArmor: function(alreadyEquiped) {
		var ind = this.wornArmor.indexOf(alreadyEquiped);
		var s = this._shiftItem(alreadyEquiped.armor,1,1,this.getAttachmentArray(this.wornArmor,ind,"armor"));
		if(s != null) {
			return s;
		}
		this.wornArmor.splice(ind,1);
		this.dispatchSignal(troshx_sos_core_InventorySignal.PackItem);
		return null;
	}
	,deletePacked: function(itemQty) {
		this.packed["delete"](itemQty);
		this.dispatchSignal(troshx_sos_core_InventorySignal.DeleteItem);
	}
	,deleteDropped: function(itemQty) {
		this.dropped["delete"](itemQty);
		this.dispatchSignal(troshx_sos_core_InventorySignal.DeleteItem);
	}
	,_unholdAllItems: function(held,isForShield) {
		if(isForShield == null) {
			isForShield = false;
		}
		var w;
		var s;
		var t;
		var _g1 = 0;
		var _g = this.weapons.length;
		while(_g1 < _g) {
			var i = _g1++;
			w = this.weapons[i];
			if((w.weapon.flags & 2) == 0) {
				w.held &= ~held;
				if((w.weapon.flags & 1) != 0 && w.held != 3) {
					w.held = 0;
				}
			}
		}
		var _g11 = 0;
		var _g2 = this.shields.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			s = this.shields[i1];
			s.held &= ~held;
			if((s.shield.flags & 2) == 0 || isForShield) {
				s.held &= ~held;
				if((s.shield.flags & 1) != 0 && s.held != 3) {
					s.held = 0;
				}
			}
		}
		var _g12 = 0;
		var _g3 = this.equipedNonMeleeItems.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			t = this.equipedNonMeleeItems[i2];
			if((t.item.flags & 2) == 0) {
				t.held &= ~held;
				if((t.item.flags & 1) != 0 && t.held != 3) {
					t.held = 0;
				}
			}
		}
	}
	,layeredWearingMaskWith: function(a,name,body) {
		var _g1 = 0;
		var _g = this.wornArmor.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ar = this.wornArmor[i].armor;
			if(ar.name == name) {
				return a.getCoverageMask(body) & ar.getCoverageMask(body);
			}
		}
		return 0;
	}
	,equipItem: function(item,unheldRemark) {
		var unheld = 0;
		var readyAssign = null;
		var weaponAssign;
		var shieldAssign;
		var itemAssign;
		var armorAssign;
		if(js_Boot.__instanceof(item,troshx_sos_core_Weapon)) {
			weaponAssign = { attached : false, key : troshx_sos_core_Inventory.UID_COUNT++, weapon : js_Boot.__instanceof(item,troshx_sos_core_Weapon) ? item : null, held : 0, unheld : 0, unheldRemark : unheldRemark, holding1H : false};
			readyAssign = weaponAssign;
			this.weapons.push(readyAssign);
		} else if(js_Boot.__instanceof(item,troshx_sos_core_Shield)) {
			shieldAssign = { key : troshx_sos_core_Inventory.UID_COUNT++, attached : false, shield : js_Boot.__instanceof(item,troshx_sos_core_Shield) ? item : null, held : 0, unheld : 0, unheldRemark : unheldRemark};
			readyAssign = shieldAssign;
			this.shields.push(readyAssign);
		} else if(js_Boot.__instanceof(item,troshx_sos_core_Armor)) {
			armorAssign = { key : troshx_sos_core_Inventory.UID_COUNT++, attached : false, armor : js_Boot.__instanceof(item,troshx_sos_core_Armor) ? item : null, held : 0, unheld : 0, unheldRemark : unheldRemark};
			readyAssign = armorAssign;
			this.wornArmor.push(readyAssign);
		} else {
			itemAssign = { key : troshx_sos_core_Inventory.UID_COUNT++, attached : false, item : item, held : 0, unheld : 0, unheldRemark : unheldRemark};
			readyAssign = itemAssign;
			this.equipedNonMeleeItems.push(readyAssign);
		}
		return readyAssign;
	}
	,getEquipedAssignList: function(type) {
		if(type == "weapon") {
			return this.weapons;
		} else if(type == "shield") {
			return this.shields;
		} else if(type == "armor") {
			return this.wornArmor;
		} else {
			return this.equipedNonMeleeItems;
		}
	}
	,cleanupBeforeSerialize: function() {
		this.setSignaler(null);
	}
	,postSerialization: function() {
		this.postSerialize_2();
		this.postSerialize_3();
	}
	,postSerialize_2: function() {
		if(this.version == null || this.version < 2) {
			this.version = 2;
		} else {
			return false;
		}
		var _g1 = 0;
		var _g = this.wornArmor.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.wornArmor[i].armor.burdinadin == null) {
				this.wornArmor[i].armor.burdinadin = null;
			}
		}
		var armor;
		var weap;
		var _g11 = 0;
		var _g2 = this.dropped.list.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var item = this.dropped.list[i1].item;
			armor = js_Boot.__instanceof(item,troshx_sos_core_Armor) ? item : null;
			weap = js_Boot.__instanceof(item,troshx_sos_core_Weapon) ? item : null;
			if(armor != null) {
				if(armor.burdinadin == null) {
					armor.burdinadin = null;
				}
			}
		}
		var _g12 = 0;
		var _g3 = this.packed.list.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var item1 = this.packed.list[i2].item;
			armor = js_Boot.__instanceof(item1,troshx_sos_core_Armor) ? item1 : null;
			weap = js_Boot.__instanceof(item1,troshx_sos_core_Weapon) ? item1 : null;
			if(armor != null) {
				if(armor.burdinadin == null) {
					armor.burdinadin = null;
				}
			}
		}
		return true;
	}
	,postSerialize_3: function() {
		if(this.version == null || this.version < 3) {
			this.version = 3;
		} else {
			return false;
		}
		var _g1 = 0;
		var _g = this.weapons.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.weapons[i].holding1H == null) {
				this.weapons[i].holding1H = false;
			}
		}
		return true;
	}
	,__class__: troshx_sos_core_Inventory
};
var troshx_sos_core_InventorySignal = $hxClasses["troshx.sos.core.InventorySignal"] = { __ename__ : ["troshx","sos","core","InventorySignal"], __constructs__ : ["DeleteItem","PackItem","DropItem","EquipItem","HoldItem"] };
troshx_sos_core_InventorySignal.DeleteItem = ["DeleteItem",0];
troshx_sos_core_InventorySignal.DeleteItem.toString = $estr;
troshx_sos_core_InventorySignal.DeleteItem.__enum__ = troshx_sos_core_InventorySignal;
troshx_sos_core_InventorySignal.PackItem = ["PackItem",1];
troshx_sos_core_InventorySignal.PackItem.toString = $estr;
troshx_sos_core_InventorySignal.PackItem.__enum__ = troshx_sos_core_InventorySignal;
troshx_sos_core_InventorySignal.DropItem = ["DropItem",2];
troshx_sos_core_InventorySignal.DropItem.toString = $estr;
troshx_sos_core_InventorySignal.DropItem.__enum__ = troshx_sos_core_InventorySignal;
troshx_sos_core_InventorySignal.EquipItem = ["EquipItem",3];
troshx_sos_core_InventorySignal.EquipItem.toString = $estr;
troshx_sos_core_InventorySignal.EquipItem.__enum__ = troshx_sos_core_InventorySignal;
troshx_sos_core_InventorySignal.HoldItem = ["HoldItem",4];
troshx_sos_core_InventorySignal.HoldItem.toString = $estr;
troshx_sos_core_InventorySignal.HoldItem.__enum__ = troshx_sos_core_InventorySignal;
var troshx_sos_core_ItemQty = function(item,qty) {
	if(qty == null) {
		qty = 1;
	}
	this.attachments = null;
	this.item = item != null ? item : new troshx_sos_core_Item();
	this.qty = qty;
};
$hxClasses["troshx.sos.core.ItemQty"] = troshx_sos_core_ItemQty;
troshx_sos_core_ItemQty.__name__ = ["troshx","sos","core","ItemQty"];
troshx_sos_core_ItemQty.__interfaces__ = [troshx_ds_IValidable,troshx_ds_IUpdateWith,troshx_core_IUid];
troshx_sos_core_ItemQty.prototype = {
	isValid: function() {
		if(this.qty > 0 && this.item != null && this.item.name != null) {
			return StringTools.trim(this.item.name) != "";
		} else {
			return false;
		}
	}
	,getQtyCopy: function(qty) {
		var qtyer = new troshx_sos_core_ItemQty(this.item,qty);
		qtyer.attachments = this.attachments;
		return qtyer;
	}
	,getAttachmentsId: function() {
		var str = "";
		var _g1 = 0;
		var _g = this.attachments.length;
		while(_g1 < _g) {
			var i = _g1++;
			str += "+" + this.attachments[i].get_uid();
		}
		return str;
	}
	,getAttachmentsLabels: function() {
		var str = "";
		var _g1 = 0;
		var _g = this.attachments.length;
		while(_g1 < _g) {
			var i = _g1++;
			str += "+" + this.attachments[i].get_label();
		}
		return str;
	}
	,updateAgainst: function(ref) {
		this.qty += ref.qty;
	}
	,spliceAgainst: function(ref) {
		this.qty -= ref.qty;
		return this.qty;
	}
	,get_uid: function() {
		return this.item.get_uid() + (this.attachments != null ? this.getAttachmentsId() : "");
	}
	,get_label: function() {
		return this.item.get_label() + (this.attachments != null ? this.getAttachmentsLabels() : "");
	}
	,__class__: troshx_sos_core_ItemQty
};
var troshx_sos_core_MeleeSpecial = function() {
	this.custom = null;
	this.spatulateTip = 0;
	this.shock = 0;
	this.multiHit_Y = 0;
	this.multiHit = 0;
	this.draw = 0;
	this.crushing = 0;
	this.chain = 0;
	this.bleed = 0;
	this.APThrust = 0;
	this.APSwing = 0;
};
$hxClasses["troshx.sos.core.MeleeSpecial"] = troshx_sos_core_MeleeSpecial;
troshx_sos_core_MeleeSpecial.__name__ = ["troshx","sos","core","MeleeSpecial"];
troshx_sos_core_MeleeSpecial.getLabelsOfFlags = function(instance,flags) {
	if(flags == null) {
		flags = 0;
	}
	var arr = [];
	if(flags != 0) {
		if((flags & 1) != 0) {
			arr.push("Brace");
		}
		if((flags & 2) != 0) {
			arr.push("Calvary Sword");
		}
		if((flags & 4) != 0) {
			arr.push("Companion Weapon");
		}
		if((flags & 8) != 0) {
			arr.push("Couched Charge");
		}
		if((flags & 16) != 0) {
			arr.push("Fluid Thrusts");
		}
		if((flags & 32) != 0) {
			arr.push("Forward Swept");
		}
		if((flags & 64) != 0) {
			arr.push("Freakishly Large");
		}
		if((flags & 128) != 0) {
			arr.push("Hand Off");
		}
		if((flags & 256) != 0) {
			arr.push("Heavy Weapon");
		}
		if((flags & 512) != 0) {
			arr.push("Hook");
		}
		if((flags & 1024) != 0) {
			arr.push("Light Blade");
		}
		if((flags & 2048) != 0) {
			arr.push("Parrying Teeth");
		}
		if((flags & 4096) != 0) {
			arr.push("Swinging Slot");
		}
		if((flags & 8192) != 0) {
			arr.push("Thin Blade");
		}
		if((flags & 16384) != 0) {
			arr.push("Thrusting Slot");
		}
		if((flags & 32768) != 0) {
			arr.push("Tight Grip");
		}
		if((flags & 65536) != 0) {
			arr.push("Weapon Attachment");
		}
	}
	if(instance != null) {
		if(instance.APSwing != 0) {
			arr.push("AP Swing" + " " + instance.APSwing);
		}
		if(instance.APThrust != 0) {
			arr.push("AP Thrust" + " " + instance.APThrust);
		}
		if(instance.bleed != 0) {
			arr.push("Bleed" + " " + instance.bleed);
		}
		if(instance.chain != 0) {
			arr.push("Chain" + " " + instance.chain);
		}
		if(instance.crushing != 0) {
			arr.push("Crushing" + " " + instance.crushing);
		}
		if(instance.draw != 0) {
			arr.push("Draw" + " " + instance.draw);
		}
		if(instance.multiHit != 0) {
			arr.push("Multi Hit" + " " + instance.multiHit);
		}
		if(instance.shock != 0) {
			arr.push("Shock" + " " + instance.shock);
		}
		if(instance.spatulateTip != 0) {
			arr.push("Spatulate Tip" + " " + instance.spatulateTip);
		}
	}
	return arr;
};
troshx_sos_core_MeleeSpecial.getFlagVarLabels = function() {
	var arr = [];
	arr.push("Brace");
	arr.push("Calvary Sword");
	arr.push("Companion Weapon");
	arr.push("Couched Charge");
	arr.push("Fluid Thrusts");
	arr.push("Forward Swept");
	arr.push("Freakishly Large");
	arr.push("Hand Off");
	arr.push("Heavy Weapon");
	arr.push("Hook");
	arr.push("Light Blade");
	arr.push("Parrying Teeth");
	arr.push("Swinging Slot");
	arr.push("Thin Blade");
	arr.push("Thrusting Slot");
	arr.push("Tight Grip");
	arr.push("Weapon Attachment");
	return arr;
};
troshx_sos_core_MeleeSpecial.getIntVarNames = function() {
	var arr = [];
	arr.push("APSwing");
	arr.push("APThrust");
	arr.push("bleed");
	arr.push("chain");
	arr.push("crushing");
	arr.push("draw");
	arr.push("multiHit");
	arr.push("shock");
	arr.push("spatulateTip");
	return arr;
};
troshx_sos_core_MeleeSpecial.prototype = {
	__class__: troshx_sos_core_MeleeSpecial
};
var troshx_sos_core_MissileSpecial = function() {
	this.custom = null;
	this.winged = 0;
	this.shock = 0;
	this.scatter_y = 1;
	this.scatter = 0;
	this.flaming = 0;
	this.calvaryBow = 0;
	this.bleed = 0;
	this.AP = 0;
};
$hxClasses["troshx.sos.core.MissileSpecial"] = troshx_sos_core_MissileSpecial;
troshx_sos_core_MissileSpecial.__name__ = ["troshx","sos","core","MissileSpecial"];
troshx_sos_core_MissileSpecial.getLabelsOfFlags = function(instance,flags) {
	if(flags == null) {
		flags = 0;
	}
	var arr = [];
	if(flags != 0) {
		if((flags & 1) != 0) {
			arr.push("Bludgeon");
		}
		if((flags & 2) != 0) {
			arr.push("Narrow");
		}
		if((flags & 4) != 0) {
			arr.push("Shield Stick");
		}
		if((flags & 8) != 0) {
			arr.push("Ap First Hit Only");
		}
		if((flags & 16) != 0) {
			arr.push("Cheat Attachment");
		}
	}
	if(instance != null) {
		if(instance.AP != 0) {
			arr.push("AP" + " " + instance.AP);
		}
		if(instance.bleed != 0) {
			arr.push("Bleed" + " " + instance.bleed);
		}
		if(instance.calvaryBow != 0) {
			arr.push("Calvary Bow" + " " + instance.calvaryBow);
		}
		if(instance.flaming != 0) {
			arr.push("Flaming" + " " + instance.flaming);
		}
		if(instance.scatter != 0) {
			arr.push("Scatter" + " " + instance.scatter);
		}
		if(instance.shock != 0) {
			arr.push("Shock" + " " + instance.shock);
		}
		if(instance.winged != 0) {
			arr.push("Winged" + " " + instance.winged);
		}
	}
	return arr;
};
troshx_sos_core_MissileSpecial.getFlagVarNames = function() {
	var arr = [];
	arr.push("BLUDGEON");
	arr.push("NARROW");
	arr.push("SHIELD_STICK");
	arr.push("AP_FIRST_HIT_ONLY");
	arr.push("CHEAT_ATTACHMENT");
	return arr;
};
troshx_sos_core_MissileSpecial.getFlagVarLabels = function() {
	var arr = [];
	arr.push("Bludgeon");
	arr.push("Narrow");
	arr.push("Shield Stick");
	arr.push("Ap First Hit Only");
	arr.push("Cheat Attachment");
	return arr;
};
troshx_sos_core_MissileSpecial.getIntVarNames = function() {
	var arr = [];
	arr.push("AP");
	arr.push("bleed");
	arr.push("calvaryBow");
	arr.push("flaming");
	arr.push("scatter");
	arr.push("shock");
	arr.push("winged");
	return arr;
};
troshx_sos_core_MissileSpecial.prototype = {
	__class__: troshx_sos_core_MissileSpecial
};
var troshx_sos_core_Modifier = function() {
};
$hxClasses["troshx.sos.core.Modifier"] = troshx_sos_core_Modifier;
troshx_sos_core_Modifier.__name__ = ["troshx","sos","core","Modifier"];
troshx_sos_core_Modifier.getStaticModifierSlots = function() {
	var a = [];
	var _g = 0;
	while(_g < 21) {
		var i = _g++;
		a[i] = [];
	}
	return a;
};
troshx_sos_core_Modifier.getSituationalModifierSlots = function() {
	var a = [];
	var _g = 0;
	while(_g < 21) {
		var i = _g++;
		a[i] = [];
	}
	return a;
};
troshx_sos_core_Modifier.prototype = {
	__class__: troshx_sos_core_Modifier
};
var troshx_sos_core_StaticModifier = function() {
};
$hxClasses["troshx.sos.core.StaticModifier"] = troshx_sos_core_StaticModifier;
troshx_sos_core_StaticModifier.__name__ = ["troshx","sos","core","StaticModifier"];
troshx_sos_core_StaticModifier.create = function(index,name,add,multiply) {
	if(multiply == null) {
		multiply = 1;
	}
	var me = new troshx_sos_core_StaticModifier();
	me.name = name;
	me.index = index;
	me.multiply = multiply;
	me.add = add;
	return me;
};
troshx_sos_core_StaticModifier.prototype = {
	_setIndex: function(index) {
		this.index = index;
	}
	,getModifiedValueMultiply: function(value) {
		return value * this.multiply;
	}
	,getModifiedValueAdd: function(value) {
		return value + this.add;
	}
	,__class__: troshx_sos_core_StaticModifier
};
var troshx_sos_core_EventModifierBinding = function() {
};
$hxClasses["troshx.sos.core.EventModifierBinding"] = troshx_sos_core_EventModifierBinding;
troshx_sos_core_EventModifierBinding.__name__ = ["troshx","sos","core","EventModifierBinding"];
troshx_sos_core_EventModifierBinding.create = function(types,name,handler) {
	var me = new troshx_sos_core_EventModifierBinding();
	me.types = types;
	me.name = name;
	me.handler = handler;
	return me;
};
troshx_sos_core_EventModifierBinding.prototype = {
	__class__: troshx_sos_core_EventModifierBinding
};
var troshx_sos_core_Profeciency = function(name,type) {
	if(type == null) {
		type = 0;
	}
	if(name == null) {
		name = "";
	}
	this.type = type;
	this.name = name;
};
$hxClasses["troshx.sos.core.Profeciency"] = troshx_sos_core_Profeciency;
troshx_sos_core_Profeciency.__name__ = ["troshx","sos","core","Profeciency"];
troshx_sos_core_Profeciency.__interfaces__ = [troshx_ds_IUpdateWith,troshx_core_IUid];
troshx_sos_core_Profeciency.matchHandOffProfs = function(flags) {
	if(flags == 4) {
		return 2;
	} else if(flags == 8) {
		return 1;
	} else {
		return flags;
	}
};
troshx_sos_core_Profeciency.getCoreMelee = function() {
	if(troshx_sos_core_Profeciency.CORE_MELEE != null) {
		return troshx_sos_core_Profeciency.CORE_MELEE;
	} else {
		return troshx_sos_core_Profeciency.CORE_MELEE = troshx_sos_core_Profeciency.getNewCoreMelee();
	}
};
troshx_sos_core_Profeciency.getNewCoreMelee = function() {
	var a = [];
	a[7] = new troshx_sos_core_Profeciency("Wrestling",0);
	a[8] = new troshx_sos_core_Profeciency("Pugilism",0);
	a[6] = new troshx_sos_core_Profeciency("Dagger",0);
	a[0] = new troshx_sos_core_Profeciency("1H Sword",0);
	a[1] = new troshx_sos_core_Profeciency("1H Blunt",0);
	a[2] = new troshx_sos_core_Profeciency("2H Blunt",0);
	a[3] = new troshx_sos_core_Profeciency("2H Sword",0);
	a[4] = new troshx_sos_core_Profeciency("Spear",0);
	a[5] = new troshx_sos_core_Profeciency("Polearm",0);
	return a;
};
troshx_sos_core_Profeciency.getCoreRanged = function() {
	if(troshx_sos_core_Profeciency.CORE_RANGED != null) {
		return troshx_sos_core_Profeciency.CORE_RANGED;
	} else {
		return troshx_sos_core_Profeciency.CORE_RANGED = troshx_sos_core_Profeciency.getNewCoreRanged();
	}
};
troshx_sos_core_Profeciency.getNewCoreRanged = function() {
	var a = [];
	a[0] = new troshx_sos_core_Profeciency("Bow",1);
	a[1] = new troshx_sos_core_Profeciency("Sling",1);
	a[2] = new troshx_sos_core_Profeciency("Crossbow",1);
	a[3] = new troshx_sos_core_Profeciency("Firearm",1);
	a[4] = new troshx_sos_core_Profeciency("Throwing",1);
	return a;
};
troshx_sos_core_Profeciency.getProfsLabelsMelee = function(mask) {
	return troshx_sos_core_Profeciency.getLabelsOfArrayProfs(troshx_sos_core_Profeciency.getCoreMelee(),mask);
};
troshx_sos_core_Profeciency.getProfsLabelsRanged = function(mask) {
	return troshx_sos_core_Profeciency.getLabelsOfArrayProfs(troshx_sos_core_Profeciency.CORE_RANGED != null ? troshx_sos_core_Profeciency.CORE_RANGED : troshx_sos_core_Profeciency.CORE_RANGED = troshx_sos_core_Profeciency.getNewCoreRanged(),mask);
};
troshx_sos_core_Profeciency.getProfsCountMelee = function(mask) {
	return troshx_sos_core_Profeciency.getCountOfArrayProfs(troshx_sos_core_Profeciency.getCoreMelee(),mask);
};
troshx_sos_core_Profeciency.getProfsCountRanged = function(mask) {
	return troshx_sos_core_Profeciency.getCountOfArrayProfs(troshx_sos_core_Profeciency.CORE_RANGED != null ? troshx_sos_core_Profeciency.CORE_RANGED : troshx_sos_core_Profeciency.CORE_RANGED = troshx_sos_core_Profeciency.getNewCoreRanged(),mask);
};
troshx_sos_core_Profeciency.getCountOfArrayProfs = function(a,mask) {
	var count = 0;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		count += (mask & 1 << i) != 0 ? 1 : 0;
	}
	return count;
};
troshx_sos_core_Profeciency.getLabelsOfArrayProfs = function(a,mask) {
	var arr = [];
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		if((mask & 1 << i) != 0) {
			arr.push(a[i].name);
		}
	}
	return arr;
};
troshx_sos_core_Profeciency.prototype = {
	updateAgainst: function(ref) {
	}
	,spliceAgainst: function(ref) {
		return 0;
	}
	,get_uid: function() {
		return this.name + troshx_sos_core_Profeciency.SEPERATOR + this.type;
	}
	,__class__: troshx_sos_core_Profeciency
};
var troshx_sos_core_Race = function(name) {
	this.name = name;
	this.magic = false;
};
$hxClasses["troshx.sos.core.Race"] = troshx_sos_core_Race;
troshx_sos_core_Race.__name__ = ["troshx","sos","core","Race"];
troshx_sos_core_Race.__interfaces__ = [troshx_core_IUid];
troshx_sos_core_Race.prototype = {
	get_uid: function() {
		return this.name;
	}
	,__class__: troshx_sos_core_Race
};
var troshx_sos_core_School = function(name,profLimit,costArc) {
	if(costArc == null) {
		costArc = 0;
	}
	if(profLimit == null) {
		profLimit = 0;
	}
	if(name == null) {
		name = "";
	}
	this.costMoney = null;
	this.name = name;
	this.profLimit = profLimit;
	this.costArc = costArc;
};
$hxClasses["troshx.sos.core.School"] = troshx_sos_core_School;
troshx_sos_core_School.__name__ = ["troshx","sos","core","School"];
troshx_sos_core_School.getLevels = function() {
	return [0,1,1,1,2,2,2,2,3,3,3,3,3,6,6,6,6,8,10,10];
};
troshx_sos_core_School.getTalentAdds = function() {
	return [1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0];
};
troshx_sos_core_School.getSuperiorAdds = function() {
	return [0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1];
};
troshx_sos_core_School.prototype = {
	canAffordWith: function(arcPoints,money,schoolToReplace) {
		if(schoolToReplace != null) {
			arcPoints += schoolToReplace.costArc;
		}
		if(money != null && this.costMoney != null) {
			var _this = schoolToReplace != null && schoolToReplace.costMoney != null ? schoolToReplace.costMoney : troshx_sos_core_Money.ZERO;
			if(troshx_sos_core_Money.TEMP.matchWith(money).addAgainst(_this).subtractAgainst(this.costMoney).cp < 0) {
				return false;
			}
		}
		return arcPoints >= this.costArc;
	}
	,customRequire: function(charSheet) {
		return true;
	}
	,getSchoolBonuses: function(charSheet) {
		return null;
	}
	,get_uid: function() {
		return this.name;
	}
	,__class__: troshx_sos_core_School
};
var troshx_sos_core_SchoolBonuses = function() {
};
$hxClasses["troshx.sos.core.SchoolBonuses"] = troshx_sos_core_SchoolBonuses;
troshx_sos_core_SchoolBonuses.__name__ = ["troshx","sos","core","SchoolBonuses"];
troshx_sos_core_SchoolBonuses.prototype = {
	getUIFields: function() {
		return null;
	}
	,getTags: function() {
		return [];
	}
	,__class__: troshx_sos_core_SchoolBonuses
};
var troshx_sos_core_Shield = function() {
	this.strapType = 0;
	this.durability = 6;
	this.bashTN = 0;
	this.blockTN = 7;
	this.size = 0;
	this.AV = 1;
	troshx_sos_core_Item.call(this);
};
$hxClasses["troshx.sos.core.Shield"] = troshx_sos_core_Shield;
troshx_sos_core_Shield.__name__ = ["troshx","sos","core","Shield"];
troshx_sos_core_Shield.getHighCoverage = function() {
	return [{ "upperHead" : true, "lowerHead" : true, "face" : true, "neck" : true, "shoulder" : true, "upperArm" : false, "elbow" : false, "forearm" : false, "hand" : false},{ "upperHead" : true, "lowerHead" : true, "face" : true, "neck" : true, "shoulder" : true, "upperArm" : false, "elbow" : false, "forearm" : false, "hand" : false, "chest" : true},{ "upperHead" : true, "lowerHead" : true, "face" : true, "neck" : true, "shoulder" : true, "upperArm" : true, "elbow" : true, "forearm" : true, "hand" : true, "chest" : true, "belly" : true, "side" : true}];
};
troshx_sos_core_Shield.getLowCoverage = function() {
	return [{ "chest" : true, "belly" : true, "upperArm" : false, "elbow" : false, "forearm" : false, "hand" : false},{ "chest" : true, "belly" : true, "side" : true, "groin" : true, "hip" : true, "upperArm" : false, "elbow" : false, "forearm" : false, "hand" : false, "thigh" : true},{ "chest" : true, "belly" : true, "side" : true, "groin" : true, "hip" : true, "neck" : true, "upperArm" : false, "elbow" : false, "forearm" : false, "hand" : false, "knee" : true, "thigh" : true}];
};
troshx_sos_core_Shield.__super__ = troshx_sos_core_Item;
troshx_sos_core_Shield.prototype = $extend(troshx_sos_core_Item.prototype,{
	addTagsToStrArr: function(arr) {
		troshx_sos_core_Item.prototype.addTagsToStrArr.call(this,arr);
		if((this.flags & 2) != 0) {
			arr.push(this.strapType == 0 ? "Arm-strap" : "Shoulder-strap");
		}
	}
	,getTypeLabel: function() {
		return "Shield";
	}
	,__class__: troshx_sos_core_Shield
});
var troshx_sos_core_Skill = function() { };
$hxClasses["troshx.sos.core.Skill"] = troshx_sos_core_Skill;
troshx_sos_core_Skill.__name__ = ["troshx","sos","core","Skill"];
troshx_sos_core_Skill.isVarious = function(n) {
	return (n & n - 1) != 0;
};
troshx_sos_core_Skill.specialisationName = function(base,special) {
	return base + " (" + special + ")";
};
troshx_sos_core_Skill.getBaseFromSpecialisationNaive = function(name) {
	var index = name.indexOf(" (");
	if(index > 0) {
		return name.substring(0,index);
	} else {
		return null;
	}
};
troshx_sos_core_Skill.getBaseFromSpecialisation = function(name) {
	var index = name.indexOf(" (");
	var len = " (".length + ")".length;
	if(index > 0 && name.length > len && HxOverrides.substr(name,name.length - ")".length,null) == ")") {
		return name.substring(0,index);
	} else {
		return null;
	}
};
troshx_sos_core_Skill.getSplitFromSpecialisation = function(name) {
	var index = name.indexOf(" (");
	var len = " (".length + ")".length;
	if(index > 0 && name.length > len && HxOverrides.substr(name,name.length - ")".length,null) == ")") {
		return [name.substring(0,index),name.substring(index + " (".length,name.length - ")".length)];
	} else {
		return null;
	}
};
var troshx_sos_core_SkillTable = function() {
};
$hxClasses["troshx.sos.core.SkillTable"] = troshx_sos_core_SkillTable;
troshx_sos_core_SkillTable.__name__ = ["troshx","sos","core","SkillTable"];
troshx_sos_core_SkillTable.getNewEmptySkillTable = function(withRules) {
	var s = new troshx_sos_core_SkillTable();
	s.skillHash = { };
	if(withRules != null) {
		s.requiresTrained = withRules.requiresTrained;
		s.requiresSpecialisation = withRules.requiresSpecialisation;
	} else {
		s.requiresTrained = { };
		s.requiresSpecialisation = { };
	}
	return s;
};
troshx_sos_core_SkillTable.getDefaultSkillTable = function() {
	if(troshx_sos_core_SkillTable.DEFAULT != null) {
		return troshx_sos_core_SkillTable.DEFAULT;
	} else {
		return troshx_sos_core_SkillTable.DEFAULT = troshx_sos_core_SkillTable.getNewDefaultSkillTable();
	}
};
troshx_sos_core_SkillTable.getNewDefaultSkillTable = function() {
	var s = new troshx_sos_core_SkillTable();
	s.skillHash = { "Athletics" : 7, "Chymistry" : 64, "Climbing" : 4, "Cooking" : 64, "Crafting" : 64, "Drill" : 16, "Engineering" : 64, "Etiquette" : 32, "Gather Information" : 256, "Hunting" : 128, "Intimidation" : 256, "Knowledge" : 64, "Navigation" : 128, "Observation" : 128, "Oration" : 256, "Performance" : 256, "Persuasion" : 256, "Profession" : 16, "Research" : 64, "Riding" : 2, "Sailing" : 32, "Stealth" : 2, "Strategy" : 64, "Subterfuge" : 256, "Surgery" : 64, "Swimming" : 4, "Tactics" : 64, "Thievery" : 2};
	s.requiresTrained = { "Crafting" : true, "Engineering" : true, "History" : true, "Navigation" : true, "Swimming" : true, "Tactics" : true, "Strategy" : true, "Etiquette" : true};
	s.requiresSpecialisation = { "Profession" : true, "Knowledge" : true, "Crafting" : true, "Performance" : true};
	return s;
};
troshx_sos_core_SkillTable.sortArrayMethod = function(a,b) {
	var aStr = a.name.toLowerCase();
	var bStr = b.name.toLowerCase();
	if(aStr < bStr) {
		return -1;
	}
	if(aStr > bStr) {
		return 1;
	}
	return 0;
};
troshx_sos_core_SkillTable.prototype = {
	getSpecialisationList: function() {
		var arr = [];
		var _g = 0;
		var _g1 = Reflect.fields(this.requiresSpecialisation);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			arr.push(f);
		}
		return arr;
	}
	,getSkillObjectsAsArray: function(sortAlphabetically) {
		if(sortAlphabetically == null) {
			sortAlphabetically = true;
		}
		var arr = [];
		var _g = 0;
		var _g1 = Reflect.fields(this.skillHash);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			arr.push({ name : p, attribs : this.skillHash[p]});
		}
		if(sortAlphabetically) {
			arr.sort(troshx_sos_core_SkillTable.sortArrayMethod);
		}
		return arr;
	}
	,matchRulesWith: function(other) {
		this.requiresTrained = other.requiresTrained;
		this.requiresSpecialisation = other.requiresSpecialisation;
	}
	,requiresSpecification: function(name) {
		return this.requiresSpecialisation[name];
	}
	,clearAllSkills: function(flushed) {
		if(flushed) {
			this.skillHash = { };
		} else {
			var _g = 0;
			var _g1 = Reflect.fields(this.skillHash);
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				Reflect.deleteField(this.skillHash,p);
			}
		}
	}
	,canAttemptUntrained: function(name) {
		return !this.requiresTrained[name];
	}
	,getSkillValue: function(name) {
		return this.skillHash[name];
	}
	,hasSkill: function(name) {
		return Object.prototype.hasOwnProperty.call(this.skillHash,name);
	}
	,setSkill: function(name,attribs) {
		this.skillHash[name] = attribs;
	}
	,matchValuesWith: function(other) {
		var _g = 0;
		var _g1 = Reflect.fields(other.skillHash);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var result = other.skillHash[f];
			this.skillHash[f] = result;
		}
	}
	,addSpecialisationTo: function(skillName,special,specialAttribs) {
		if(specialAttribs == null) {
			specialAttribs = 0;
		}
		if(Object.prototype.hasOwnProperty.call(this.skillHash,skillName)) {
			throw new js__$Boot_HaxeError("No skill found for:" + skillName);
		}
		var key;
		key = skillName + " (" + special + ")";
		this.skillHash[key] = specialAttribs != 0 ? specialAttribs : this.skillHash[skillName];
		return key;
	}
	,removeSkill: function(name) {
		return Reflect.deleteField(this.skillHash,name);
	}
	,getSubjects: function() {
		var arr = [];
		var _g = 0;
		var _g1 = Reflect.fields(this.skillHash);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var sub = troshx_sos_core_Skill.getSplitFromSpecialisation(f);
			if(sub != null) {
				arr.push(sub[1]);
			}
		}
		return arr;
	}
	,__class__: troshx_sos_core_SkillTable
};
var troshx_sos_core_SocialClass = function(name,money,wealth) {
	this.wealthIndex = 0;
	this.classIndex = 0;
	this.name = name;
	this.money = money;
	this.wealth = wealth;
};
$hxClasses["troshx.sos.core.SocialClass"] = troshx_sos_core_SocialClass;
troshx_sos_core_SocialClass.__name__ = ["troshx","sos","core","SocialClass"];
troshx_sos_core_SocialClass.prototype = {
	__class__: troshx_sos_core_SocialClass
};
var troshx_sos_core_Talent = function() {
	this.level = 0;
	this.name = "";
};
$hxClasses["troshx.sos.core.Talent"] = troshx_sos_core_Talent;
troshx_sos_core_Talent.__name__ = ["troshx","sos","core","Talent"];
troshx_sos_core_Talent.__interfaces__ = [troshx_core_IUid];
troshx_sos_core_Talent.prototype = {
	get_uid: function() {
		return this.name + "_" + this.level;
	}
	,get_label: function() {
		return this.name + (this.level >= 1 ? "(" + this.level + ")" : "");
	}
	,__class__: troshx_sos_core_Talent
};
var troshx_sos_core_TargetZone = function() {
	this.description = "";
	this.weightsTotal = 0;
};
$hxClasses["troshx.sos.core.TargetZone"] = troshx_sos_core_TargetZone;
troshx_sos_core_TargetZone.__name__ = ["troshx","sos","core","TargetZone"];
troshx_sos_core_TargetZone.create = function(name,partWeights,parts,weightsTotal,description) {
	if(description == null) {
		description = "";
	}
	if(weightsTotal == null) {
		weightsTotal = 0;
	}
	var zb = new troshx_sos_core_TargetZone();
	zb.name = name;
	zb.parts = parts;
	zb.partWeights = partWeights;
	zb.description = description;
	zb.weightsTotal = weightsTotal;
	if(weightsTotal == 0) {
		zb.recalcWeightsTotal();
	}
	return zb;
};
troshx_sos_core_TargetZone.prototype = {
	recalcWeightsTotal: function() {
		var accum = 0;
		var i = this.partWeights.length;
		while(--i > -1) accum += this.partWeights[i];
		this.weightsTotal = accum;
	}
	,getBodyPart: function(floatRatio) {
		floatRatio *= this.weightsTotal;
		var accum = 0;
		var result = 0;
		var _g1 = 0;
		var _g = this.partWeights.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(floatRatio < accum) {
				break;
			}
			accum += this.partWeights[i];
			result = i;
		}
		return this.parts[result];
	}
	,getHitAreaMask: function() {
		var msk = 0;
		var _g1 = 0;
		var _g = this.parts.length;
		while(_g1 < _g) {
			var i = _g1++;
			msk |= 1 << this.parts[i];
		}
		return msk;
	}
	,__class__: troshx_sos_core_TargetZone
};
var troshx_sos_core_WeaponCustomise = function() {
	this.original = null;
	this.name = "";
	this.melee = null;
	this.meleeFlags = 0;
};
$hxClasses["troshx.sos.core.WeaponCustomise"] = troshx_sos_core_WeaponCustomise;
troshx_sos_core_WeaponCustomise.__name__ = ["troshx","sos","core","WeaponCustomise"];
troshx_sos_core_WeaponCustomise.__interfaces__ = [troshx_core_IUid];
troshx_sos_core_WeaponCustomise.prototype = {
	addMeleeTagsToStrArr: function(arr) {
		var flags = this.meleeFlags;
		if((flags & 1) != 0) {
			arr.push("*Custom Hilt");
		}
		if((flags & 2) != 0) {
			arr.push("*Ridiculously Sharp");
		}
		if((flags & 4) != 0) {
			arr.push("*Exquisite Decoration");
		}
		if((flags & 8) != 0) {
			arr.push("*Bizarre Gimmick");
		}
		if(this.melee != null) {
			var instance = this.melee;
			if(instance.customGrip != 0) {
				arr.push("*Custom Grip" + " " + instance.customGrip);
			}
			if(instance.fineForging != 0) {
				arr.push("*Fine Forging" + " " + instance.fineForging);
			}
			if(instance.integratedPistol != 0) {
				arr.push("*Integrated Pistol" + " " + instance.integratedPistol);
			}
		}
	}
	,hasBizarreGimmick: function() {
		return (this.meleeFlags & 8) != 0;
	}
	,hasExquisiteDecoration: function() {
		return (this.meleeFlags & 4) != 0;
	}
	,isRidiculouslySharp: function() {
		return (this.meleeFlags & 2) != 0;
	}
	,get_uid: function() {
		return "_" + this.name + "_" + this.meleeFlags + (this.melee != null ? this.melee.getUID(this.meleeFlags) : "");
	}
	,__class__: troshx_sos_core_WeaponCustomise
};
var troshx_sos_core_CustomMelee = function() {
	this.exquisiteDecorDesc = "";
	this.bizarreGimmickDesc = "";
	this.sharpened = true;
	this.integratedPistol = 0;
	this.fineForging = 0;
	this.customGrip = 0;
};
$hxClasses["troshx.sos.core.CustomMelee"] = troshx_sos_core_CustomMelee;
troshx_sos_core_CustomMelee.__name__ = ["troshx","sos","core","CustomMelee"];
troshx_sos_core_CustomMelee.prototype = {
	getUID: function(flags) {
		return "_" + this.customGrip + "_" + this.fineForging + "_" + this.integratedPistol;
	}
	,__class__: troshx_sos_core_CustomMelee
};
var troshx_sos_core_Wound = function(locationId,level,damageType) {
	this.age = 0;
	this.uidSuffix = "";
	this.flags = 0;
	this.BL = 0;
	this.pain = 0;
	this.stun = 0;
	this.leftSide = false;
	this.damageType = 0;
	this.level = 0;
	this.locationId = locationId;
	this.level = level;
	this.damageType = damageType;
};
$hxClasses["troshx.sos.core.Wound"] = troshx_sos_core_Wound;
troshx_sos_core_Wound.__name__ = ["troshx","sos","core","Wound"];
troshx_sos_core_Wound.__interfaces__ = [troshx_ds_IUpdateWith];
troshx_sos_core_Wound.getNewFlagLabels = function() {
	var arr = [];
	arr.push("Staunched");
	arr.push("Treated");
	return arr;
};
troshx_sos_core_Wound.getFlagLabels = function() {
	if(troshx_sos_core_Wound.FLAG_LABELS != null) {
		return troshx_sos_core_Wound.FLAG_LABELS;
	} else {
		return troshx_sos_core_Wound.FLAG_LABELS = troshx_sos_core_Wound.getNewFlagLabels();
	}
};
troshx_sos_core_Wound.getNewEmptyAssign = function() {
	var w = new troshx_sos_core_Wound("",0,0);
	w.notes = "";
	return w;
};
troshx_sos_core_Wound.prototype = {
	isNullified: function() {
		if(this.stun == 0 && this.pain == 0) {
			return this.BL == 0;
		} else {
			return false;
		}
	}
	,getDescLabel: function(body,damageTypeLabels) {
		var dmgLabel = this.damageType >= 0 && this.damageType < damageTypeLabels.length ? " " + damageTypeLabels[this.damageType] : "";
		var hitLoc = body.getHitLocationById(this.locationId);
		return "Level " + this.level + dmgLabel + " wound" + (this.locationId != "" ? " on the " + (hitLoc != null && hitLoc.twoSided ? this.leftSide ? "Left " : "Right " : "") + body.getHitLocationLabelFromId(this.locationId) : "");
	}
	,updateAgainst: function(ref) {
		if(ref.stun > this.stun) {
			this.stun = ref.stun;
		}
		if(ref.pain > this.pain) {
			this.pain = ref.pain;
		}
		if(ref.BL > this.BL) {
			this.BL = ref.BL;
		}
		this.flags &= -4;
		this.age = 0;
	}
	,spliceAgainst: function(ref) {
		this.updateAgainst(ref);
		return -1;
	}
	,makeUnique: function() {
		this.uidSuffix = "^" + troshx_sos_core_Wound.UNIQUE_COUNT;
	}
	,isTreated: function() {
		return (this.flags & 2) != 0;
	}
	,gotBloodLost: function() {
		return (this.flags & 3) == 0;
	}
	,getUID: function(body) {
		return this.locationId + "_" + this.level + "_" + this.damageType + (body.gotSideWithId(this.locationId) ? this.leftSide ? "l" : "r" : "") + this.uidSuffix;
	}
	,__class__: troshx_sos_core_Wound
};
var troshx_sos_events_Challenge = function() {
	this.totalSuccesses = null;
	this.rolls = null;
};
$hxClasses["troshx.sos.events.Challenge"] = troshx_sos_events_Challenge;
troshx_sos_events_Challenge.__name__ = ["troshx","sos","events","Challenge"];
troshx_sos_events_Challenge.prototype = {
	isResolved: function() {
		return this.totalSuccesses != null;
	}
	,__class__: troshx_sos_events_Challenge
};
var troshx_sos_events_SOSEvent = $hxClasses["troshx.sos.events.SOSEvent"] = { __ename__ : ["troshx","sos","events","SOSEvent"], __constructs__ : ["FATIQUE_GAIN","MELEE_INITIATIVE_TEST","MISS_TARGET","HIT_TARGET","HIT_TARGET_ARMOR","DAMAGE_TARGET_RESOLVE","WOUND_INFLICT","MELEE_EXCHANGE_RESOLVE","MELEE_BOUT_RESOLVE","CHALLENGE_INIT","CHALLENGE_EXECUTE"] };
troshx_sos_events_SOSEvent.FATIQUE_GAIN = function($char,fatique) { var $x = ["FATIQUE_GAIN",0,$char,fatique]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.MELEE_INITIATIVE_TEST = function(from,target) { var $x = ["MELEE_INITIATIVE_TEST",1,from,target]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.MISS_TARGET = function(from,target,ammo) { var $x = ["MISS_TARGET",2,from,target,ammo]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.HIT_TARGET = function(from,target,ammo) { var $x = ["HIT_TARGET",3,from,target,ammo]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.HIT_TARGET_ARMOR = function(from,target,armor,ammo) { var $x = ["HIT_TARGET_ARMOR",4,from,target,armor,ammo]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.DAMAGE_TARGET_RESOLVE = function(from,target,armor,ammo) { var $x = ["DAMAGE_TARGET_RESOLVE",5,from,target,armor,ammo]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.WOUND_INFLICT = function($char,w) { var $x = ["WOUND_INFLICT",6,$char,w]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.MELEE_EXCHANGE_RESOLVE = ["MELEE_EXCHANGE_RESOLVE",7];
troshx_sos_events_SOSEvent.MELEE_EXCHANGE_RESOLVE.toString = $estr;
troshx_sos_events_SOSEvent.MELEE_EXCHANGE_RESOLVE.__enum__ = troshx_sos_events_SOSEvent;
troshx_sos_events_SOSEvent.MELEE_BOUT_RESOLVE = ["MELEE_BOUT_RESOLVE",8];
troshx_sos_events_SOSEvent.MELEE_BOUT_RESOLVE.toString = $estr;
troshx_sos_events_SOSEvent.MELEE_BOUT_RESOLVE.__enum__ = troshx_sos_events_SOSEvent;
troshx_sos_events_SOSEvent.CHALLENGE_INIT = function(attributes,skills,challenge) { var $x = ["CHALLENGE_INIT",9,attributes,skills,challenge]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.CHALLENGE_EXECUTE = function($char,attributes,skills,challenge) { var $x = ["CHALLENGE_EXECUTE",10,$char,attributes,skills,challenge]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
var troshx_sos_macro_MacroUtil = function() { };
$hxClasses["troshx.sos.macro.MacroUtil"] = troshx_sos_macro_MacroUtil;
troshx_sos_macro_MacroUtil.__name__ = ["troshx","sos","macro","MacroUtil"];
var troshx_sos_pregens_FightCharacters = function() {
	this.pool = troshx_sos_pregens_FightCharacters.get();
};
$hxClasses["troshx.sos.pregens.FightCharacters"] = troshx_sos_pregens_FightCharacters;
troshx_sos_pregens_FightCharacters.__name__ = ["troshx","sos","pregens","FightCharacters"];
troshx_sos_pregens_FightCharacters.get = function() {
	return [new troshx_core_CharSave("Commoner","cy27:troshx.sos.sheets.CharSheety9:woundHashogy6:woundsahy4:bodycy24:troshx.sos.core.BodyChary15:hitLocationHashoy9:upperHeadzy4:facei1y9:lowerHeadi2y4:necki3y8:shoulderi4y5:chesti5y4:sidei6y5:bellyi7y3:hipi8y5:groini9y5:thighi10y4:kneei11y4:shini12y4:footi13y8:upperArmi14y5:elbowi15y7:forearmi16y4:handi17y9:upperBacki18y9:lowerBacki19gy4:namey8:Humanoidy11:targetZonesacy26:troshx.sos.core.TargetZoney11:descriptiony16:Downward%20Swingy12:weightsTotali10R26y4:Heady5:partsai4i2i1zhy11:partWeightsai3i2i2i3hgcR29R30y14:Upward%20SwingR32i10R26R33R34ai5i3i2i1hR35ai3i2i3i2hgcR29R30y0:R32i10R26y4:NeckR34ai4i3i2i1hR35ai3i3i2i2hgcR29R30R37R32i10R26y5:TorsoR34ai7i6i5hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20ArmR34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20ArmR34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20LegR34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20LegR34ai13i12i11hR35ai3i4i3hgcR29R30R37R32i10R26y5:GroinR34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R33R34ai3i1zhR35ai3i4i3hgcR29R30R37R32i10R26R38R34ai5i3i1hR35ai3i4i3hgcR29R30R37R32i10R26y5:ChestR34ai7i5i4i3hR35ai3i4i2i1hgcR29R30R37R32i10R26y5:BellyR34ai9i8i6i7hR35ai1i1i5i3hgcR29R30R37R32i10R26R40R34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26R41R34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26R44R34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R42R34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26R43R34ai13i12i11hR35ai3i4i3hghy12:hitLocationsacy27:troshx.sos.core.HitLocationR26y12:Upper%20Heady2:idR6y8:twoSidedfgcR48R26y4:FaceR50R7R51fgcR48R26y12:Lower%20HeadR50R8R51fgcR48R26R38R50R9R51fgcR48R26y8:ShoulderR50R10R51tgcR48R26R45R50R11R51fgcR48R26y4:SideR50R12R51tgcR48R26R46R50R13R51fgcR48R26y3:HipR50R14R51tgcR48R26R44R50R15R51fgcR48R26y5:ThighR50R16R51tgcR48R26y4:KneeR50R17R51tgcR48R26y4:ShinR50R18R51tgcR48R26y4:FootR50R19R51tgcR48R26R40R50R20R51tgcR48R26y5:ElbowR50R21R51tgcR48R26y7:ForearmR50R22R51tgcR48R26y4:HandR50R23R51tgcR48R26y12:Upper%20BackR50R24R51fgcR48R26y12:Lower%20BackR50R25R51fghy16:thrustStartIndexi9y14:rearStartIndexi18y19:missileHitLocationsai-1i9i11i11i12i15i13i14i16i17hy10:thrustMaski261632y9:swingMaski511gy9:inventorycy25:troshx.sos.core.Inventoryy7:versioni3y14:shieldPositionzy7:weaponsaoy8:attachedfy3:keyi4y6:weaponcy22:troshx.sos.core.Weapony6:isAmmofy7:firearmny8:crossbowny11:requiredStrzy11:stuckChancezy14:missileSpecialny12:missileFlagszy11:damageTypeMi1y7:damageMzy4:atnMzy5:rangezy12:meleeSpecialcy28:troshx.sos.core.MeleeSpecialy6:customny12:spatulateTipzy5:shockzy10:multiHit_Yzy8:multiHitzy4:drawi1y8:crushingzy5:chainzy5:bleedzy8:APThrustzy7:APSwingzgy10:meleeFlagsi1024y5:guardzy3:dtni9y11:damageTypeTi1y11:damageTypeSzy7:damageTzy7:damageSi-1y4:atnTi6y4:atnSi6y7:variantny5:reachi3y6:rangedfy11:profsCustomny5:profsi64y9:customiseny4:uniti1y12:costCurrencyzy4:costi7y5:flagszy6:weightzR50R37R26y15:Knife%20(Large)gy4:heldzy6:unheldzy12:unheldRemarkR37y9:holding1Hfghy7:shieldsahy20:equipedNonMeleeItemsahy9:wornArmorahy8:dropPackfy6:packedcy22:troshx.ds.IDMatchArrayy4:listahgy7:droppedcR134R135ahgy8:signalerngy7:arcFlawR37y8:arcGloryR37y9:arcBeliefR37y7:arcEpicR37y7:arcSagaR37y8:arcSpentzy14:arcPointsAccumzy5:banescy21:troshx.ds.HashedArrayy4:hashogR135ahgy5:boonscR146R147oy19:Hale%20and%20Heartycy26:troshx.sos.core.BoonAssigny12:_minRequiredi1y9:_canceledfy15:_forcePermanentfy8:discounti2y4:booncy28:troshx.sos.bnb.HaleAndHeartyR26R149y5:costsai2i4hR122zy9:clampRankfy13:multipleTimeszy8:channelszy13:superChannelszgy4:ranki1y11:_costCachedi2y16:_remainingCachedi999ggR135ar99hgy8:direPastfy7:talentsahy6:skillscy26:troshx.sos.core.SkillTabley9:skillHashoy9:Chymistryi2y7:Cookingi6y7:Huntingi2y10:Navigationi1y7:Stealthi1y7:Surgeryi6y22:Crafting%20(Homestead)i4y17:Crafting%20(Wood)i2y21:Profession%20(Doctor)i2y21:Profession%20(Farmer)i5gy15:requiresTrainedoy8:Craftingty11:Engineeringty7:HistorytR173ty8:Swimmingty7:Tacticsty8:Strategyty9:Etiquettetgy22:requiresSpecialisationoy10:Professionty9:KnowledgetR181ty11:Performancetggy22:wealthAssetAssignCountzy12:wealthAssetsahy11:socialClasscy27:troshx.sos.core.SocialClassy11:wealthIndexi2y10:classIndexi2R26y14:Poor%20Freemany5:moneycy21:troshx.sos.core.Moneyy2:cpzy2:spzy2:gpi15gy6:wealthzgR199cR200R201i5R202i19R203i14gy24:situationalModifierTableaahahahahahahahahahahahahahahahahahahahahahhy19:staticModifierTableaahahahahahahahahahahahahahahahahahahahahahhy6:ingamety7:fatiquezy11:talentNotesahy20:masteryManueverNotesahy21:superiorManueverNotesahR116ny11:profsRangedzy10:profsMeleei337y11:schoolLeveli1y13:schoolBonusescy34:troshx.sos.schools.ScrapperBonusesgy6:schoolcy27:troshx.sos.schools.Scrappery9:costMoneynR26y8:Scrappery9:profLimiti4y7:costArczgy9:gritAccumzy5:pronefy10:healthLosszR73i2y10:perceptioni4y12:intelligencei4y3:witi4y9:willpoweri4y6:healthi4y9:endurancei4y7:agilityi4y8:strengthi4y3:agei-1y10:leftHandedfy6:genderzy4:racecy22:troshx.sos.races.HumanR26y5:Humany5:magicfgy5:titleR37y5:notesR37y7:factionR37y8:nicknameR37R26y8:Commonerg","0/8 S CP:5"),new troshx_core_CharSave("Street Thug","cy27:troshx.sos.sheets.CharSheety9:woundHashogy6:woundsahy4:bodycy24:troshx.sos.core.BodyChary15:hitLocationHashoy9:upperHeadzy4:facei1y9:lowerHeadi2y4:necki3y8:shoulderi4y5:chesti5y4:sidei6y5:bellyi7y3:hipi8y5:groini9y5:thighi10y4:kneei11y4:shini12y4:footi13y8:upperArmi14y5:elbowi15y7:forearmi16y4:handi17y9:upperBacki18y9:lowerBacki19gy4:namey8:Humanoidy11:targetZonesacy26:troshx.sos.core.TargetZoney11:descriptiony16:Downward%20Swingy12:weightsTotali10R26y4:Heady5:partsai4i2i1zhy11:partWeightsai3i2i2i3hgcR29R30y14:Upward%20SwingR32i10R26R33R34ai5i3i2i1hR35ai3i2i3i2hgcR29R30y0:R32i10R26y4:NeckR34ai4i3i2i1hR35ai3i3i2i2hgcR29R30R37R32i10R26y5:TorsoR34ai7i6i5hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20ArmR34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20ArmR34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20LegR34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20LegR34ai13i12i11hR35ai3i4i3hgcR29R30R37R32i10R26y5:GroinR34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R33R34ai3i1zhR35ai3i4i3hgcR29R30R37R32i10R26R38R34ai5i3i1hR35ai3i4i3hgcR29R30R37R32i10R26y5:ChestR34ai7i5i4i3hR35ai3i4i2i1hgcR29R30R37R32i10R26y5:BellyR34ai9i8i6i7hR35ai1i1i5i3hgcR29R30R37R32i10R26R40R34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26R41R34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26R44R34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R42R34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26R43R34ai13i12i11hR35ai3i4i3hghy12:hitLocationsacy27:troshx.sos.core.HitLocationR26y12:Upper%20Heady2:idR6y8:twoSidedfgcR48R26y4:FaceR50R7R51fgcR48R26y12:Lower%20HeadR50R8R51fgcR48R26R38R50R9R51fgcR48R26y8:ShoulderR50R10R51tgcR48R26R45R50R11R51fgcR48R26y4:SideR50R12R51tgcR48R26R46R50R13R51fgcR48R26y3:HipR50R14R51tgcR48R26R44R50R15R51fgcR48R26y5:ThighR50R16R51tgcR48R26y4:KneeR50R17R51tgcR48R26y4:ShinR50R18R51tgcR48R26y4:FootR50R19R51tgcR48R26R40R50R20R51tgcR48R26y5:ElbowR50R21R51tgcR48R26y7:ForearmR50R22R51tgcR48R26y4:HandR50R23R51tgcR48R26y12:Upper%20BackR50R24R51fgcR48R26y12:Lower%20BackR50R25R51fghy16:thrustStartIndexi9y14:rearStartIndexi18y19:missileHitLocationsai-1i9i11i11i12i15i13i14i16i17hy10:thrustMaski261632y9:swingMaski511gy9:inventorycy25:troshx.sos.core.Inventoryy7:versioni3y14:shieldPositionzy7:weaponsaoy8:attachedfy3:keyi30y6:weaponcy22:troshx.sos.core.Weapony15:_showCustomTagsty6:isAmmofy7:firearmny8:crossbowny11:requiredStrzy11:stuckChancezy14:missileSpecialny12:missileFlagszy11:damageTypeMi1y7:damageMzy4:atnMzy5:rangezy12:meleeSpecialcy28:troshx.sos.core.MeleeSpecialy6:customny12:spatulateTipzy5:shocki1y10:multiHit_Yzy8:multiHitzy4:drawzy8:crushingzy5:chainzy5:bleedzy8:APThrustzy7:APSwingi1gy10:meleeFlagsi16384y5:guardzy3:dtni7y11:damageTypeTi2y11:damageTypeSi2y7:damageTi-2y7:damageSi1y4:atnTi7y4:atnSi7y7:variantny5:reachi3y6:rangedfy11:profsCustomny5:profsi2y9:customiseny4:uniti1y12:costCurrencyi1y4:costi1y5:flagszy6:weightzR50R37R26y10:Bar%20Macegy4:heldi1y6:unheldzy12:unheldRemarkR37y9:holding1HfgoR76fR77i31R78cR79R81fR82nR83nR84zR85zR86nR87zR88i1R89zR90zR91zR92nR105i9232R106i1R107i7R108i1R109zR110i1R111i-1R112i6R113i7R114nR115i3R116fR117nR118i64R119nR120i1R121zR122i6R123zR124zR50R37R26y15:Rondel%20DaggergR126zR127zR128R37R129fgoR76fR77i34R78cR79R80tR81fR82nR83nR84zR85i4R86nR87zR88i1R89i1R90i7R91i10R92nR105zR106zR107zR108i1R109zR110zR111zR112zR113zR114nR115i4R116tR117nR118i16R119nR120i1R121zR122i8R123zR124zR50R37R26y26:Knife%20(Throwing)%20%2F0cgR126zR127zR128R37R129fghy7:shieldsahy20:equipedNonMeleeItemsahy9:wornArmoraoR77i4R76fy5:armorcy21:troshx.sos.core.ArmorR119ny7:specialny12:specialFlagsi8y2:ppzy10:burdinadinny3:AVBi4y3:AVPi3y3:AVCi2R120i1R121zR122i17R123zR124d0.5R50R37R26y14:Quilted%20Coaty8:coverageoR11zR13zR12zR24zR25zR10zR17zR16zR14zR15zggR126zR127zR128R37goR77i5R76fR135cR136R119nR137nR138zR139zR140nR141i2R142i2R143i3R120i1R121i1R122i1R123zR124zR50R37R26y16:Leather%20GlovesR145oR23zggR126zR127zR128R37goR77i6R76fR135cR136R119nR137nR138i8R139zR141i1R142i1R143i1R120i1R121zR122i1R123zR124zR50R37R26y35:Neck-Wrap%20(such%20as%20a%20Scarf)R145oR9zggR126zR127zR128R37goR77i7R76fR135cR136R119nR137nR138zR139zR140nR141i3R142i3R143i4R120i1R121i1R122i1R123zR124zR50R37R26y28:Hardened%20Leather%20GreavesR145oR18zggR126zR127zR128R37goR77i8R76fR135cR136R119nR137nR138zR139zR140nR141i3R142i3R143i4R120i1R121i1R122i3R123zR124zR50R37R26y31:Hardened%20Leather%20RerebracesR145oR20zggR126zR127zR128R37goR77i9R76fR135cR136R119nR137nR138zR139zR140nR141i2R142i2R143i3R120i1R121i1R122i1R123zR124zR50R37R26y15:Leather%20BootsR145oR19zggR126zR127zR128R37ghy8:dropPackfy6:packedcy22:troshx.ds.IDMatchArrayy4:listahgy7:droppedcR153R154ahgy8:signalerngy7:arcFlawR37y8:arcGloryR37y9:arcBeliefR37y7:arcEpicR37y7:arcSagaR37y8:arcSpentzy14:arcPointsAccumzy5:banescy21:troshx.ds.HashedArrayy4:hashogR154ahgy5:boonscR165R166oy19:Hale%20and%20Heartycy26:troshx.sos.core.BoonAssigny12:_minRequiredi1y9:_canceledfy15:_forcePermanentfy8:discounti2y4:booncy28:troshx.sos.bnb.HaleAndHeartyR26R168y5:costsai2i4hR123zy9:clampRankfy13:multipleTimeszy8:channelszy13:superChannelszgy4:ranki1y11:_costCachedi2y16:_remainingCachedi999ggR154ar121hgy8:direPastfy7:talentsahy6:skillscy26:troshx.sos.core.SkillTabley9:skillHashoy9:Athleticsi3y8:Climbingi1y20:Gather%20Informationi1y12:Intimidationi1y22:Knowledge%20(Criminal)i1y10:Navigationi1y11:Observationi5y7:Stealthi4y8:Swimmingi1y8:Thieveryi5gy15:requiresTrainedoy8:Craftingty11:Engineeringty7:HistorytR194tR197ty7:Tacticsty8:Strategyty9:Etiquettetgy22:requiresSpecialisationoy10:Professionty9:KnowledgetR200ty11:Performancetggy22:wealthAssetAssignCountzy12:wealthAssetsahy11:socialClasscy27:troshx.sos.core.SocialClassy11:wealthIndexzy10:classIndexzR26y13:Slave%2FExiley5:moneycy21:troshx.sos.core.Moneyy2:cpzy2:spzy2:gpzgy6:wealthzgR217cR218R219i2R220zR221zgy24:situationalModifierTableaahahahahahahahahahahahahahahahahahahahahahhy19:staticModifierTableaahahahahahahahahahahahahahahahahahahahahahhy6:ingamety7:fatiquezy11:talentNotesaR37R37hy20:masteryManueverNotesahy21:superiorManueverNotesaR37hR117ny11:profsRangedi8y10:profsMeleei451y11:schoolLeveli5y13:schoolBonusescy34:troshx.sos.schools.ScrapperBonusesgy6:schoolcy27:troshx.sos.schools.Scrappery9:costMoneynR26y8:Scrappery9:profLimiti4y7:costArczgy9:gritAccumzy5:pronefy10:healthLosszR73i2y10:perceptioni3y12:intelligencei3y3:witi4y9:willpoweri6y6:healthi4y9:endurancei4y7:agilityi5y8:strengthi6y3:agei-1y10:leftHandedfy6:genderzy4:racecy22:troshx.sos.races.HumanR26y5:Humany5:magicfgy5:titleR37y5:notesR37y7:factionR37y8:nicknameR37R26y13:Street%20Thugg","0.5/10 S CP:9"),new troshx_core_CharSave("Street Thug Boss","cy27:troshx.sos.sheets.CharSheety9:woundHashogy6:woundsahy4:bodycy24:troshx.sos.core.BodyChary15:hitLocationHashoy9:upperHeadzy4:facei1y9:lowerHeadi2y4:necki3y8:shoulderi4y5:chesti5y4:sidei6y5:bellyi7y3:hipi8y5:groini9y5:thighi10y4:kneei11y4:shini12y4:footi13y8:upperArmi14y5:elbowi15y7:forearmi16y4:handi17y9:upperBacki18y9:lowerBacki19gy4:namey8:Humanoidy11:targetZonesacy26:troshx.sos.core.TargetZoney11:descriptiony16:Downward%20Swingy12:weightsTotali10R26y4:Heady5:partsai4i2i1zhy11:partWeightsai3i2i2i3hgcR29R30y14:Upward%20SwingR32i10R26R33R34ai5i3i2i1hR35ai3i2i3i2hgcR29R30y0:R32i10R26y4:NeckR34ai4i3i2i1hR35ai3i3i2i2hgcR29R30R37R32i10R26y5:TorsoR34ai7i6i5hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20ArmR34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20ArmR34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20LegR34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20LegR34ai13i12i11hR35ai3i4i3hgcR29R30R37R32i10R26y5:GroinR34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R33R34ai3i1zhR35ai3i4i3hgcR29R30R37R32i10R26R38R34ai5i3i1hR35ai3i4i3hgcR29R30R37R32i10R26y5:ChestR34ai7i5i4i3hR35ai3i4i2i1hgcR29R30R37R32i10R26y5:BellyR34ai9i8i6i7hR35ai1i1i5i3hgcR29R30R37R32i10R26R40R34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26R41R34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26R44R34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R42R34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26R43R34ai13i12i11hR35ai3i4i3hghy12:hitLocationsacy27:troshx.sos.core.HitLocationR26y12:Upper%20Heady2:idR6y8:twoSidedfgcR48R26y4:FaceR50R7R51fgcR48R26y12:Lower%20HeadR50R8R51fgcR48R26R38R50R9R51fgcR48R26y8:ShoulderR50R10R51tgcR48R26R45R50R11R51fgcR48R26y4:SideR50R12R51tgcR48R26R46R50R13R51fgcR48R26y3:HipR50R14R51tgcR48R26R44R50R15R51fgcR48R26y5:ThighR50R16R51tgcR48R26y4:KneeR50R17R51tgcR48R26y4:ShinR50R18R51tgcR48R26y4:FootR50R19R51tgcR48R26R40R50R20R51tgcR48R26y5:ElbowR50R21R51tgcR48R26y7:ForearmR50R22R51tgcR48R26y4:HandR50R23R51tgcR48R26y12:Upper%20BackR50R24R51fgcR48R26y12:Lower%20BackR50R25R51fghy16:thrustStartIndexi9y14:rearStartIndexi18y19:missileHitLocationsai-1i9i11i11i12i15i13i14i16i17hy10:thrustMaski261632y9:swingMaski511gy9:inventorycy25:troshx.sos.core.Inventoryy7:versioni3y14:shieldPositionzy7:weaponsaoy8:attachedfy3:keyi6y6:weaponcy22:troshx.sos.core.Weapony15:_showCustomTagsty6:isAmmofy7:firearmny8:crossbowny11:requiredStrzy11:stuckChancei4y14:missileSpecialny12:missileFlagszy11:damageTypeMi1y7:damageMi1y4:atnMi7y5:rangei10y12:meleeSpecialny10:meleeFlagszy5:guardzy3:dtnzy11:damageTypeTi1y11:damageTypeSzy7:damageTzy7:damageSzy4:atnTzy4:atnSzy7:variantny5:reachi4y6:rangedty11:profsCustomny5:profsi16y9:customiseny4:uniti1y12:costCurrencyzy4:costi8y5:flagszy6:weightzR50R37R26y26:Knife%20(Throwing)%20%2F0cgy4:heldzy6:unheldzy12:unheldRemarkR37y9:holding1HfgoR76fR77i24R78cR79R80tR81fR82nR83nR84zR85zR86nR87zR88i1R89zR90zR91zR92cy28:troshx.sos.core.MeleeSpecialy6:customny12:spatulateTipzy5:shocki1y10:multiHit_Yzy8:multiHitzy4:drawzy8:crushingzy5:chainzy5:bleedzy8:APThrustzy7:APSwingi1gR93i16384R94zR95i7R96i2R97i2R98i-2R99i1R100i7R101i7R102nR103i3R104fR105nR106i2R107nR108i1R109i1R110i1R111zR112zR50R37R26y10:Bar%20MacegR114y1:1R115zR116R37R117fgoR76fR77i25R78cR79R81fR82nR83nR84zR85zR86nR87zR88i1R89zR90zR91zR92nR93i1028R94i3R95i6R96i1R97zR98zR99i-1R100i7R101i7R102nR103i2R104fR105nR106i64R107nR108i1R109i1R110i3R111zR112zR50R37R26y13:Main%20GauchegR114zR115zR116R37R117fgoR78cR79R80tR81fR82nR83nR84zR85zR86nR87zR88i1R89zR90zR91zR92nR93i65536R94zR95zR96i1R97zR98zR99zR100i7R101zR102nR103i2R104fR105nR106i2R107nR108i1R109zR110i1R111zR112zR50R37R26y14:Arming%20SpikegR114zR115zR116R37R77i14R117fR76fghy7:shieldsahy20:equipedNonMeleeItemsahy9:wornArmoraoR77i14R76fy5:armorcy21:troshx.sos.core.ArmorR107ny7:specialny12:specialFlagsi8y2:ppzy10:burdinadinny3:AVBi4y3:AVPi3y3:AVCi2R108i1R109zR110i17R111zR112d0.5R50R37R26y14:Quilted%20Coaty8:coverageoR11zR13zR12zR24zR25zR10zR17zR16zR14zR15zggR114zR115zR116R37goR77i15R76fR137cR138R107nR139nR140zR141zR142nR143i2R144i2R145i3R108i1R109i1R110i1R111zR112zR50R37R26y16:Leather%20GlovesR147oR23zggR114zR115zR116R37goR77i16R76fR137cR138R107nR139nR140i8R141zR143i1R144i1R145i1R108i1R109zR110i1R111zR112zR50R37R26y35:Neck-Wrap%20(such%20as%20a%20Scarf)R147oR9zggR114zR115zR116R37goR77i17R76fR137cR138R107nR139nR140zR141zR142nR143i3R144i3R145i4R108i1R109i1R110i1R111zR112zR50R37R26y28:Hardened%20Leather%20GreavesR147oR18zggR114zR115zR116R37goR77i19R76fR137cR138R107nR139nR140zR141zR142nR143i2R144i2R145i3R108i1R109i1R110i1R111zR112zR50R37R26y15:Leather%20BootsR147oR19zggR114zR115zR116R37ghy8:dropPackfy6:packedcy22:troshx.ds.IDMatchArrayy4:listahgy7:droppedcR154R155ahgy8:signalerngy7:arcFlawR37y8:arcGloryR37y9:arcBeliefR37y7:arcEpicR37y7:arcSagaR37y8:arcSpentzy14:arcPointsAccumzy5:banescy21:troshx.ds.HashedArrayy4:hashoy18:Barren%2FSterilitycy26:troshx.sos.core.BaneAssigny12:_minRequiredzy9:_canceledfy15:_forcePermanentfy8:discountzy4:banecy32:troshx.sos.bnb.BarrenOrSterilityR26R168y5:costsai1i3hR111i2y9:clampRankfy13:multipleTimeszy8:channelszy13:superChannelszy6:isBanety10:conditionsancy30:troshx.sos.bnb.EunuchConditionghgy4:ranki1y11:_costCachedi1gy6:WantedcR169R170zR171fR172fR173zR174cy21:troshx.sos.bnb.WantedR26R186R176ai5i10i15hR111zR177fR178zR179zR180zR181tgR184i1R185i5gy18:Facial%20DeformitycR169R170zR171fR172fR173zR174cy30:troshx.sos.bnb.FacialDeformityR26R188R176ai2i4i8hR111i2R177fR178zR179zR180zR181tgR184i1R185i2gy14:Lasting%20Paincy32:troshx.sos.bnb.LastingPainAssigny15:__hasUIFields__ty10:permaMask2zy9:permaMaskzy17:hitLocationsMajorzy17:hitLocationsMinori512R170zR171fR172fR173zy4:charr0R174cy26:troshx.sos.bnb.LastingPainR26R190R176ai4i8hR111i2R177tR178i-2R179zR180zR181tgR184i1R185i4ggR155ar117r122r125r128hgy5:boonscR166R167oy19:Hale%20and%20Heartycy26:troshx.sos.core.BoonAssignR170i1R171fR172fR173i2y4:booncy28:troshx.sos.bnb.HaleAndHeartyR26R200R176ai2i4hR111zR177fR178zR179zR180zgR184i1R185i2y16:_remainingCachedi999gy12:BloodthirstycR201R170zR171fR172fR173zR202cy27:troshx.sos.bnb.BloodthirstyR26R205R176ai4hR111zR177fR178zR179zR180zgR184i1R185i4R204i999gy4:RichcR201R170zR171fR172fR173zR202cy19:troshx.sos.bnb.RichR26R207R176ai1i3i5hR111i1R177fR178zR179i8R180zy15:staticModifiersacy30:troshx.sos.core.StaticModifierR26y10:Rich%20(i)y5:indexi19y8:multiplyd1.1y3:addzgcR210R26y11:Rich%20(ii)R212i19R213d1.5R214zgcR210R26y12:Rich%20(iii)R212i19R213i2R214zghgR184i1R185i1R204i999gy23:Natural%20Born%20KillercR201R170zR171fR172fR173zR202cy32:troshx.sos.bnb.NaturalBornKillerR26R217R176ai6i12i18hR111zR177fR178zR179zR180zR209acR210R26y29:Natural%20Born%20Killer%20(i)R212i13R213i1R214i1gcR210R26y30:Natural%20Born%20Killer%20(ii)R212i13R213i1R214i2gcR210R26y31:Natural%20Born%20Killer%20(iii)R212i13R213i1R214i3ghgR184i1R204i999ggR155ar134r137r140r147hgy8:direPastfy7:talentsahy6:skillscy26:troshx.sos.core.SkillTabley9:skillHashoy9:Athleticsi2y8:Climbingi1y20:Gather%20Informationi3y12:Intimidationi3y22:Knowledge%20(Criminal)i3y11:Observationi5y7:Stealthi2y8:Swimmingi1y8:Thieveryi4gy15:requiresTrainedoy8:Craftingty11:Engineeringty7:Historyty10:NavigationtR234ty7:Tacticsty8:Strategyty9:Etiquettetgy22:requiresSpecialisationoy10:Professionty9:KnowledgetR237ty11:Performancetggy22:wealthAssetAssignCountzy12:wealthAssetsahy11:socialClasscy27:troshx.sos.core.SocialClassy11:wealthIndexzy10:classIndexzR26y13:Slave%2FExiley5:moneycy21:troshx.sos.core.Moneyy2:cpzy2:spi10y2:gpzgy6:wealthzgR255cR256R257i12R258i10R259zgy24:situationalModifierTableaahahahahahahahahahahahahahahahahahahahahahhy19:staticModifierTableaahahahahahahahahahahahahahar151hahahahahahar144hahhy6:ingamety7:fatiquezy11:talentNotesaR37R37hy20:masteryManueverNotesahy21:superiorManueverNotesaR37hR105ny11:profsRangedi8y10:profsMeleei451y11:schoolLeveli5y13:schoolBonusescy34:troshx.sos.schools.ScrapperBonusesgy6:schoolcy27:troshx.sos.schools.Scrappery9:costMoneynR26y8:Scrappery9:profLimiti4y7:costArczgy9:gritAccumzy5:pronefy10:healthLosszR73i2y10:perceptioni4y12:intelligencei3y3:witi5y9:willpoweri6y6:healthi4y9:endurancei4y7:agilityi7y8:strengthi6y3:agei-1y10:leftHandedfy6:genderzy4:racecy22:troshx.sos.races.HumanR26y5:Humany5:magicfgy5:titleR37y5:notesR37y7:factionR37y8:nicknameR37R26y20:Street%20Thug%20Bossg","0.5/10 S CP:12*"),new troshx_core_CharSave("Street Berserker","cy27:troshx.sos.sheets.CharSheety9:woundHashogy6:woundsahy4:bodycy24:troshx.sos.core.BodyChary15:hitLocationHashoy9:upperHeadzy4:facei1y9:lowerHeadi2y4:necki3y8:shoulderi4y5:chesti5y4:sidei6y5:bellyi7y3:hipi8y5:groini9y5:thighi10y4:kneei11y4:shini12y4:footi13y8:upperArmi14y5:elbowi15y7:forearmi16y4:handi17y9:upperBacki18y9:lowerBacki19gy4:namey8:Humanoidy11:targetZonesacy26:troshx.sos.core.TargetZoney11:descriptiony16:Downward%20Swingy12:weightsTotali10R26y4:Heady5:partsai4i2i1zhy11:partWeightsai3i2i2i3hgcR29R30y14:Upward%20SwingR32i10R26R33R34ai5i3i2i1hR35ai3i2i3i2hgcR29R30y0:R32i10R26y4:NeckR34ai4i3i2i1hR35ai3i3i2i2hgcR29R30R37R32i10R26y5:TorsoR34ai7i6i5hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20ArmR34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20ArmR34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20LegR34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20LegR34ai13i12i11hR35ai3i4i3hgcR29R30R37R32i10R26y5:GroinR34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R33R34ai3i1zhR35ai3i4i3hgcR29R30R37R32i10R26R38R34ai5i3i1hR35ai3i4i3hgcR29R30R37R32i10R26y5:ChestR34ai7i5i4i3hR35ai3i4i2i1hgcR29R30R37R32i10R26y5:BellyR34ai9i8i6i7hR35ai1i1i5i3hgcR29R30R37R32i10R26R40R34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26R41R34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26R44R34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R42R34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26R43R34ai13i12i11hR35ai3i4i3hghy12:hitLocationsacy27:troshx.sos.core.HitLocationR26y12:Upper%20Heady2:idR6y8:twoSidedfgcR48R26y4:FaceR50R7R51fgcR48R26y12:Lower%20HeadR50R8R51fgcR48R26R38R50R9R51fgcR48R26y8:ShoulderR50R10R51tgcR48R26R45R50R11R51fgcR48R26y4:SideR50R12R51tgcR48R26R46R50R13R51fgcR48R26y3:HipR50R14R51tgcR48R26R44R50R15R51fgcR48R26y5:ThighR50R16R51tgcR48R26y4:KneeR50R17R51tgcR48R26y4:ShinR50R18R51tgcR48R26y4:FootR50R19R51tgcR48R26R40R50R20R51tgcR48R26y5:ElbowR50R21R51tgcR48R26y7:ForearmR50R22R51tgcR48R26y4:HandR50R23R51tgcR48R26y12:Upper%20BackR50R24R51fgcR48R26y12:Lower%20BackR50R25R51fghy16:thrustStartIndexi9y14:rearStartIndexi18y19:missileHitLocationsai-1i9i11i11i12i15i13i14i16i17hy10:thrustMaski261632y9:swingMaski511gy9:inventorycy25:troshx.sos.core.Inventoryy7:versioni3y14:shieldPositionzy7:weaponsaoy8:attachedfy3:keyi18y6:weaponcy22:troshx.sos.core.Weapony15:_showCustomTagsty6:isAmmofy7:firearmny8:crossbowny11:requiredStrzy11:stuckChancezy14:missileSpecialny12:missileFlagszy11:damageTypeMi1y7:damageMzy4:atnMzy5:rangezy12:meleeSpecialcy28:troshx.sos.core.MeleeSpecialy6:customny12:spatulateTipzy5:shocki1y10:multiHit_Yzy8:multiHitzy4:drawzy8:crushingzy5:chainzy5:bleedzy8:APThrustzy7:APSwingi1gy10:meleeFlagsi16384y5:guardzy3:dtni7y11:damageTypeTi2y11:damageTypeSi2y7:damageTi-2y7:damageSi1y4:atnTi7y4:atnSi7y7:variantny5:reachi3y6:rangedfy11:profsCustomny5:profsi2y9:customiseny4:uniti1y12:costCurrencyi1y4:costi1y5:flagszy6:weightzR50R37R26y10:Bar%20Macegy4:heldi1y6:unheldzy12:unheldRemarkR37y9:holding1HfgoR76fR77i19R78cR79R81fR82nR83nR84zR85zR86nR87zR88i1R89zR90zR91zR92nR105i9232R106i1R107i7R108i1R109zR110i1R111i-1R112i6R113i7R114nR115i3R116fR117nR118i64R119nR120i1R121zR122i6R123zR124zR50R37R26y15:Rondel%20DaggergR126zR127zR128R37R129fgoR76fR77i21R78cR79R81fR82nR83nR84zR85zR86nR87zR88i1R89zR90zR91zR92nR105zR106i1R107i8R108i1R109zR110i1R111zR112i6R113i6R114nR115i3R116fR117nR118i64R119nR120i1R121zR122i10R123zR124zR50R37R26y38:Bowie%20Knife%2F%20Pishkan%20ToothpickgR126zR127zR128R37R129fgoR76fR77i8R78cR79R80tR81fR82nR83nR84zR85zR86nR87zR88i1R89zR90zR91zR92nR105i65536R106zR107zR108i1R109zR110zR111zR112i7R113zR114nR115i1R116fR117nR118i2R119nR120i1R121zR122i1R123zR124zR50R37R26y14:Arming%20SpikegR126zR127zR128R37R129fghy7:shieldsahy20:equipedNonMeleeItemsahy9:wornArmoraoR77i12R76fy5:armorcy21:troshx.sos.core.ArmorR119ny7:specialny12:specialFlagsi8y2:ppzy10:burdinadinny3:AVBi4y3:AVPi3y3:AVCi2R120i1R121zR122i17R123zR124d0.5R50R37R26y14:Quilted%20Coaty8:coverageoR11zR13zR12zR24zR25zR10zR17zR16zR14zR15zggR126zR127zR128R37goR77i13R76fR136cR137R119nR138nR139zR140zR141nR142i2R143i2R144i3R120i1R121i1R122i1R123zR124zR50R37R26y16:Leather%20GlovesR146oR23zggR126zR127zR128R37goR77i14R76fR136cR137R119nR138nR139i8R140zR142i1R143i1R144i1R120i1R121zR122i1R123zR124zR50R37R26y35:Neck-Wrap%20(such%20as%20a%20Scarf)R146oR9zggR126zR127zR128R37goR77i15R76fR136cR137R119nR138nR139zR140zR141nR142i3R143i3R144i4R120i1R121i1R122i1R123zR124zR50R37R26y28:Hardened%20Leather%20GreavesR146oR18zggR126zR127zR128R37goR77i16R76fR136cR137R119nR138nR139zR140zR141nR142i3R143i3R144i4R120i1R121i1R122i3R123zR124zR50R37R26y31:Hardened%20Leather%20RerebracesR146oR20zggR126zR127zR128R37goR77i17R76fR136cR137R119nR138nR139zR140zR141nR142i2R143i2R144i3R120i1R121i1R122i1R123zR124zR50R37R26y15:Leather%20BootsR146oR19zggR126zR127zR128R37ghy8:dropPackfy6:packedcy22:troshx.ds.IDMatchArrayy4:listahgy7:droppedcR154R155ahgy8:signalerngy7:arcFlawR37y8:arcGloryR37y9:arcBeliefR37y7:arcEpicR37y7:arcSagaR37y8:arcSpentzy14:arcPointsAccumzy5:banescy21:troshx.ds.HashedArrayy4:hashoy18:Barren%2FSterilitycy26:troshx.sos.core.BaneAssigny12:_minRequiredzy9:_canceledfy15:_forcePermanentfy8:discountzy4:banecy32:troshx.sos.bnb.BarrenOrSterilityR26R168y5:costsai1i3hR123i2y9:clampRankfy13:multipleTimeszy8:channelszy13:superChannelszy6:isBanety10:conditionsancy30:troshx.sos.bnb.EunuchConditionghgy4:ranki2y11:_costCachedi3gy18:Complete%20MonstercR169R170zR171fR172fR173zR174cy30:troshx.sos.bnb.CompleteMonsterR26R186R176ai10hR123zR177fR178zR179i256R180zR181tgR184i1R185i10gy6:WantedcR169R170zR171fR172fR173zR174cy21:troshx.sos.bnb.WantedR26R188R176ai5i10i15hR123zR177fR178zR179zR180zR181tgR184i1R185i5gy18:Facial%20DeformitycR169R170zR171fR172fR173zR174cy30:troshx.sos.bnb.FacialDeformityR26R190R176ai2i4i8hR123i2R177fR178zR179zR180zR181tgR184i1R185i2ggR155ar120r125r128r131hgy5:boonscR166R167oy19:Hale%20and%20Heartycy26:troshx.sos.core.BoonAssignR170i1R171fR172fR173i2y4:booncy28:troshx.sos.bnb.HaleAndHeartyR26R193R176ai2i4hR123zR177fR178zR179zR180zgR184i1R185i2y16:_remainingCachedi999gy12:BloodthirstycR194R170zR171fR172fR173zR195cy27:troshx.sos.bnb.BloodthirstyR26R198R176ai4hR123zR177fR178zR179zR180zgR184i1R185i4R197i999gy9:BerserkercR194R170zR171fR172fR173zR195cy24:troshx.sos.bnb.BerserkerR26R200R176ai8i12hR123zR177fR178zR179zR180zy15:staticModifiersacy30:troshx.sos.core.StaticModifierR26R200y5:indexi13y8:multiplyi1y3:addi4gr147hgR184i1R185i8R197i999gy11:True%20GritcR194R170zR171fR172fR173zR195cy23:troshx.sos.bnb.TrueGritR26R207R176ai2i4i6hR123i1R177fR178zR179i16R180zR202acR203R26y17:True%20Grit%20(i)R204i20R205i1R206i1gcR203R26y18:True%20Grit%20(ii)R204i20R205i1R206i2gcR203R26y19:True%20Grit%20(iii)R204i20R205i1R206i3ghgR184i1R185i2R197i999gy4:RichcR194R170zR171fR172fR173zR195cy19:troshx.sos.bnb.RichR26R212R176ai1i3i5hR123i1R177fR178zR179i8R180zR202acR203R26y10:Rich%20(i)R204i19R205d1.1R206zgcR203R26y11:Rich%20(ii)R204i19R205d1.5R206zgcR203R26y12:Rich%20(iii)R204i19R205i2R206zghgR184i1R185i1R197i999ggR155ar137r140r143r148r155hgy8:direPastfy7:talentsahy6:skillscy26:troshx.sos.core.SkillTabley9:skillHashoy9:Athleticsi2y8:Climbingi1y20:Gather%20Informationi3y12:Intimidationi3y22:Knowledge%20(Criminal)i3y11:Observationi5y7:Stealthi2y8:Swimmingi1y8:Thieveryi4gy15:requiresTrainedoy8:Craftingty11:Engineeringty7:Historyty10:NavigationtR229ty7:Tacticsty8:Strategyty9:Etiquettetgy22:requiresSpecialisationoy10:Professionty9:KnowledgetR232ty11:Performancetggy22:wealthAssetAssignCountzy12:wealthAssetsahy11:socialClasscy27:troshx.sos.core.SocialClassy11:wealthIndexzy10:classIndexzR26y13:Slave%2FExiley5:moneycy21:troshx.sos.core.Moneyy2:cpzy2:spi10y2:gpzgy6:wealthzgR250cR251R252i12R253i10R254zgy24:situationalModifierTableaahahahahahahahahahahahahahahahahahahahahahhy19:staticModifierTableaahahahahahahahahahahahahahar147hahahahahahar159har152hhy6:ingamety7:fatiquezy11:talentNotesaR37R37hy20:masteryManueverNotesahy21:superiorManueverNotesaR37hR117ny11:profsRangedi8y10:profsMeleei451y11:schoolLeveli5y13:schoolBonusescy34:troshx.sos.schools.ScrapperBonusesgy6:schoolcy27:troshx.sos.schools.Scrappery9:costMoneynR26y8:Scrappery9:profLimiti4y7:costArczgy9:gritAccumzy5:pronefy10:healthLosszR73i2y10:perceptioni4y12:intelligencei3y3:witi5y9:willpoweri6y6:healthi4y9:endurancei4y7:agilityi7y8:strengthi6y3:agei-1y10:leftHandedfy6:genderzy4:racecy22:troshx.sos.races.HumanR26y5:Humany5:magicfgy5:titleR37y5:notesR37y7:factionR37y8:nicknameR37R26y18:Street%20Berserkerg","0.5/10 S CP:15*"),new troshx_core_CharSave("Retiarius","cy27:troshx.sos.sheets.CharSheety9:woundHashogy6:woundsahy4:bodycy24:troshx.sos.core.BodyChary15:hitLocationHashoy9:upperHeadzy4:facei1y9:lowerHeadi2y4:necki3y8:shoulderi4y5:chesti5y4:sidei6y5:bellyi7y3:hipi8y5:groini9y5:thighi10y4:kneei11y4:shini12y4:footi13y8:upperArmi14y5:elbowi15y7:forearmi16y4:handi17y9:upperBacki18y9:lowerBacki19gy4:namey8:Humanoidy11:targetZonesacy26:troshx.sos.core.TargetZoney11:descriptiony16:Downward%20Swingy12:weightsTotali10R26y4:Heady5:partsai4i2i1zhy11:partWeightsai3i2i2i3hgcR29R30y14:Upward%20SwingR32i10R26R33R34ai5i3i2i1hR35ai3i2i3i2hgcR29R30y0:R32i10R26y4:NeckR34ai4i3i2i1hR35ai3i3i2i2hgcR29R30R37R32i10R26y5:TorsoR34ai7i6i5hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20ArmR34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20ArmR34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20LegR34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20LegR34ai13i12i11hR35ai3i4i3hgcR29R30R37R32i10R26y5:GroinR34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R33R34ai3i1zhR35ai3i4i3hgcR29R30R37R32i10R26R38R34ai5i3i1hR35ai3i4i3hgcR29R30R37R32i10R26y5:ChestR34ai7i5i4i3hR35ai3i4i2i1hgcR29R30R37R32i10R26y5:BellyR34ai9i8i6i7hR35ai1i1i5i3hgcR29R30R37R32i10R26R40R34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26R41R34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26R44R34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R42R34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26R43R34ai13i12i11hR35ai3i4i3hghy12:hitLocationsacy27:troshx.sos.core.HitLocationR26y12:Upper%20Heady2:idR6y8:twoSidedfgcR48R26y4:FaceR50R7R51fgcR48R26y12:Lower%20HeadR50R8R51fgcR48R26R38R50R9R51fgcR48R26y8:ShoulderR50R10R51tgcR48R26R45R50R11R51fgcR48R26y4:SideR50R12R51tgcR48R26R46R50R13R51fgcR48R26y3:HipR50R14R51tgcR48R26R44R50R15R51fgcR48R26y5:ThighR50R16R51tgcR48R26y4:KneeR50R17R51tgcR48R26y4:ShinR50R18R51tgcR48R26y4:FootR50R19R51tgcR48R26R40R50R20R51tgcR48R26y5:ElbowR50R21R51tgcR48R26y7:ForearmR50R22R51tgcR48R26y4:HandR50R23R51tgcR48R26y12:Upper%20BackR50R24R51fgcR48R26y12:Lower%20BackR50R25R51fghy16:thrustStartIndexi9y14:rearStartIndexi18y19:missileHitLocationsai-1i9i11i11i12i15i13i14i16i17hy10:thrustMaski261632y9:swingMaski511gy9:inventorycy25:troshx.sos.core.Inventoryy7:versioni3y14:shieldPositionzy7:weaponsaoy8:attachedfy3:keyi38y6:weaponcy22:troshx.sos.core.Weapony15:_showCustomTagsty6:isAmmofy7:firearmny8:crossbowny11:requiredStrzy11:stuckChancezy14:missileSpecialny12:missileFlagszy11:damageTypeMi1y7:damageMzy4:atnMzy5:rangezy12:meleeSpecialcy28:troshx.sos.core.MeleeSpecialy6:customny12:spatulateTipzy5:shockzy10:multiHit_Yzy8:multiHiti3y4:drawzy8:crushingzy5:chainzy5:bleedzy8:APThrustzy7:APSwingzgy10:meleeFlagsi128y5:guardzy3:dtni7y11:damageTypeTi1y11:damageTypeSzy7:damageTzy7:damageSzy4:atnTi7y4:atnSi9y7:variantcR79R80tR81fR82nR83nR84zR85zR86nR87zR88i1R89zR90zR91zR92cR93R94nR95zR96zR97zR98i3R99zR100zR101zR102zR103zR104zgR105zR106zR107i9R108i1R109zR110i-1R111i-1R112i8R113i10R114ny5:reachi5y6:rangedfy11:profsCustomny5:profsi48y9:customiseny4:uniti1y12:costCurrencyzy4:costzy5:flagszy6:weightzR50R37R26y7:TridentgR115i5R116fR117nR118i48R119nR120i1R121zR122i5R123i1R124i4R50R37R26R125gy4:heldy1:1y6:unheldzy12:unheldRemarkR37y9:holding1HtgoR76fR77i42R78cR79R81fR82nR83nR84zR85zR86nR87zR88i1R89zR90zR91zR92cR93R94nR95i2R96zR97zR98zR99zR100zR101zR102zR103zR104zgR105i1024R106zR107i7R108i1R109zR110i1R111i-1R112i6R113i7R114nR115i2R116fR117nR118i64R119nR120i1R121zR122i6R123zR124zR50R37R26y5:PugiogR126zR128zR129R37R130fgoR76fR77i16R78cR79R80tR81fR82nR83nR84zR85zR86nR87zR88i2R89i-10R90i7R91i5R92nR105zR106zR107zR108i1R109zR110zR111zR112zR113zR114nR115i4R116tR117nR118i16R119nR120i1R121i1R122i1R123zR124i2R50R37R26y17:Net%20(Retiarius)gR126i2R128zR129R37R130fgoR76fR77i12R78cR79R81fR82nR83nR84zR85zR86nR87zR88i1R89zR90zR91zR92nR105zR106zR107i7R108i1R109zR110i1R111i1R112i7R113i7R114nR115i3R116fR117nR118i1R119nR120i1R121i1R122i1R123zR124zR50R37R26y7:GladiusgR126zR128zR129R37R130fghy7:shieldsahy20:equipedNonMeleeItemsahy9:wornArmoraoR77i30R76fy5:armorcy21:troshx.sos.core.ArmorR119ny7:specialny12:specialFlagsi2y2:ppzy10:burdinadinny3:AVBi4y3:AVPi5y3:AVCi6R120i1R121i1R122i10R123zR124i1R50R37R26y23:(Half)%20Iron%20Galerusy8:coverageoR10i1R20i3ggR126zR128zR129R37goR137cR138R119nR139nR140zR141zR142nR143i1R144i2R145i1R120i1R121zR122zR123zR124zR50R37R26y16:Cloth%20BindingsR147oR18zR22zggR76fR126zR128zR129R37R77i8goR77i14R76fR137cR138R119nR139nR140zR141zR142nR143i3R144i3R145i4R120i1R121i1R122i3R123zR124zR50R37R26y40:(Half)%20Hardened%20Leather%20RerebracesR147oR20zggR126zR128zR129R37goR137cR138R119nR139nR140zR141zR142nR143i3R144i2R145i3R120i1R121zR122zR123zR124zR50R37R26y17:Leather%20BalteusR147oR13zggR76fR126zR128zR129R37R77i158ghy8:dropPackfy6:packedcy22:troshx.ds.IDMatchArrayy4:listahgy7:droppedcR153R154ahgy8:signalerngy7:arcFlawR37y8:arcGloryR37y9:arcBeliefR37y7:arcEpicR37y7:arcSagaR37y8:arcSpentzy14:arcPointsAccumzy5:banescy21:troshx.ds.HashedArrayy4:hashogR154ahgy5:boonscR165R166oy19:Hale%20and%20Heartycy26:troshx.sos.core.BoonAssigny12:_minRequiredi1y9:_canceledfy15:_forcePermanentfy8:discounti2y4:booncy28:troshx.sos.bnb.HaleAndHeartyR26R168y5:costsai2i4hR123zy9:clampRankfy13:multipleTimeszy8:channelszy13:superChannelszgy4:ranki1y11:_costCachedi2y16:_remainingCachedi999ggR154ar120hgy8:direPastfy7:talentsahy6:skillscy26:troshx.sos.core.SkillTabley9:skillHashoy7:Cookingi2y7:Huntingi4y10:Navigationi2y7:Stealthi2gy15:requiresTrainedoy8:Craftingty11:Engineeringty7:HistorytR191ty8:Swimmingty7:Tacticsty8:Strategyty9:Etiquettetgy22:requiresSpecialisationoy10:Professionty9:KnowledgetR194ty11:Performancetggy22:wealthAssetAssignCountzy12:wealthAssetsahy11:socialClasscy27:troshx.sos.core.SocialClassy11:wealthIndexzy10:classIndexzR26y13:Slave%2FExiley5:moneycy21:troshx.sos.core.Moneyy2:cpzy2:spzy2:gpzgy6:wealthzgR212cR213R214zR215zR216zgy24:situationalModifierTableaahahahahahahahahahahahahahahahahahahahahahhy19:staticModifierTableaahahahahahahahahahahahahahahahahahahahahacy30:troshx.sos.core.StaticModifierR26y16:Warrior's%20Grity5:indexi20y8:multiplyi1y3:addi2ghhy6:ingamety7:fatiquezy11:talentNotesaR37R37R37hy20:masteryManueverNotesahy21:superiorManueverNotesaR37R37R37hR117ny11:profsRangedi17y10:profsMeleei507y11:schoolLeveli9y13:schoolBonusescy33:troshx.sos.schools.SoldierBonusesgy6:schoolcy26:troshx.sos.schools.Soldiery9:costMoneynR26y7:Soldiery9:profLimiti10y7:costArci1y15:staticModifiersr177gy9:gritAccumzy5:pronefy10:healthLosszR73i2y10:perceptioni6y12:intelligencei2y3:witi8y9:willpoweri3y6:healthi4y9:endurancei4y7:agilityi8y8:strengthi4y3:agei-1y10:leftHandedfy6:genderzy4:racecy22:troshx.sos.races.HumanR26y5:Humany5:magicfgy5:titleR37y5:notesR37y7:factionR37y8:nicknameR37R26y9:Retiariusg","1/8 L CP:17"),new troshx_core_CharSave("Dimachaerus-Light","cy27:troshx.sos.sheets.CharSheety9:woundHashogy6:woundsahy4:bodycy24:troshx.sos.core.BodyChary15:hitLocationHashoy9:upperHeadzy4:facei1y9:lowerHeadi2y4:necki3y8:shoulderi4y5:chesti5y4:sidei6y5:bellyi7y3:hipi8y5:groini9y5:thighi10y4:kneei11y4:shini12y4:footi13y8:upperArmi14y5:elbowi15y7:forearmi16y4:handi17y9:upperBacki18y9:lowerBacki19gy4:namey8:Humanoidy11:targetZonesacy26:troshx.sos.core.TargetZoney11:descriptiony16:Downward%20Swingy12:weightsTotali10R26y4:Heady5:partsai4i2i1zhy11:partWeightsai3i2i2i3hgcR29R30y14:Upward%20SwingR32i10R26R33R34ai5i3i2i1hR35ai3i2i3i2hgcR29R30y0:R32i10R26y4:NeckR34ai4i3i2i1hR35ai3i3i2i2hgcR29R30R37R32i10R26y5:TorsoR34ai7i6i5hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20ArmR34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20ArmR34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20LegR34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20LegR34ai13i12i11hR35ai3i4i3hgcR29R30R37R32i10R26y5:GroinR34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R33R34ai3i1zhR35ai3i4i3hgcR29R30R37R32i10R26R38R34ai5i3i1hR35ai3i4i3hgcR29R30R37R32i10R26y5:ChestR34ai7i5i4i3hR35ai3i4i2i1hgcR29R30R37R32i10R26y5:BellyR34ai9i8i6i7hR35ai1i1i5i3hgcR29R30R37R32i10R26R40R34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26R41R34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26R44R34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R42R34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26R43R34ai13i12i11hR35ai3i4i3hghy12:hitLocationsacy27:troshx.sos.core.HitLocationR26y12:Upper%20Heady2:idR6y8:twoSidedfgcR48R26y4:FaceR50R7R51fgcR48R26y12:Lower%20HeadR50R8R51fgcR48R26R38R50R9R51fgcR48R26y8:ShoulderR50R10R51tgcR48R26R45R50R11R51fgcR48R26y4:SideR50R12R51tgcR48R26R46R50R13R51fgcR48R26y3:HipR50R14R51tgcR48R26R44R50R15R51fgcR48R26y5:ThighR50R16R51tgcR48R26y4:KneeR50R17R51tgcR48R26y4:ShinR50R18R51tgcR48R26y4:FootR50R19R51tgcR48R26R40R50R20R51tgcR48R26y5:ElbowR50R21R51tgcR48R26y7:ForearmR50R22R51tgcR48R26y4:HandR50R23R51tgcR48R26y12:Upper%20BackR50R24R51fgcR48R26y12:Lower%20BackR50R25R51fghy16:thrustStartIndexi9y14:rearStartIndexi18y19:missileHitLocationsai-1i9i11i11i12i15i13i14i16i17hy10:thrustMaski261632y9:swingMaski511gy9:inventorycy25:troshx.sos.core.Inventoryy7:versioni3y14:shieldPositionzy7:weaponsaoy8:attachedfy3:keyi18y6:weaponcy22:troshx.sos.core.Weapony6:isAmmofy7:firearmny8:crossbowny11:requiredStrzy11:stuckChancezy14:missileSpecialny12:missileFlagszy11:damageTypeMi1y7:damageMzy4:atnMzy5:rangezy12:meleeSpecialcy28:troshx.sos.core.MeleeSpecialy6:customny12:spatulateTipzy5:shockzy10:multiHit_Yzy8:multiHitzy4:drawi4y8:crushingzy5:chainzy5:bleedzy8:APThrustzy7:APSwingzgy10:meleeFlagsi512y5:guardzy3:dtni7y11:damageTypeTi1y11:damageTypeSzy7:damageTzy7:damageSi1y4:atnTi7y4:atnSi7y7:variantny5:reachi3y6:rangedfy11:profsCustomny5:profsi1y9:customiseny4:uniti1y12:costCurrencyzy4:costi15y5:flagszy6:weightzR50R37R26y4:Sicagy4:heldzy6:unheldzy12:unheldRemarkR37y9:holding1HfgoR76fR77i19R78r85R125zR126zR127R37R128fghy7:shieldsahy20:equipedNonMeleeItemsahy9:wornArmoraoR77i6R76fy5:armorcy21:troshx.sos.core.ArmorR118ny7:specialny12:specialFlagszy2:ppzy10:burdinadinny3:AVBi2y3:AVPi1y3:AVCi2R119i1R120zR121zR122zR123zR50R37R26y16:Cloth%20Bindingsy8:coverageoR18zR22zR15i2R17zggR125zR126zR127R37goR77i9R76fR132cR133R118nR134nR135zR136zR137nR138i2R139i2R140i3R119i1R120zR121zR122zR123zR50R37R26y17:Leather%20BalteusR142oR13zggR125zR126zR127R37goR77i10R76fR132cR133R118nR134nR135zR136zR137nR138i3R139i3R140i4R119i1R120zR121i6R122zR123zR50R37R26y32:Hardened%20Leather%20Knee-GuardsR142oR17zggR125zR126zR127R37goR77i11R76fR132cR133R118nR134nR135i2R136zR137nR138i4R139i5R140i6R119i1R120zR121zR122zR123i3R50R37R26y13:Iron%20ManicaR142oR20i1R22i1R10i3R21i1ggR125zR126zR127R37goR132cR133R118nR134nR135zR136zR137nR138i2R139i2R140i3R119i1R120zR121zR122zR123zR50R37R26y23:Leather%20Shin%20GuardsR142oR18zggR76fR125zR126zR127R37R77zghy8:dropPackfy6:packedcy22:troshx.ds.IDMatchArrayy4:listahgy7:droppedcR149R150acy23:troshx.sos.core.ItemQtyy11:attachmentsny4:itemcR79R80fR81nR82nR83zR84zR85nR86zR87i1R88zR89zR90zR91cR92R93nR94i2R95zR96zR97zR98zR99zR100zR101zR102zR103zgR104i1024R105zR106i7R107i1R108zR109i1R110i-1R111i6R112i7R113nR114i2R115fR116nR117i64R118nR119i1R120zR121i6R122zR123zR50R37R26y5:Pugiogy3:qtyi2gcR152R153nR154cR79R80fR81nR82nR83zR84zR85nR86zR87i1R88zR89zR90zR91nR104zR105zR106i7R107i1R108zR109i1R110i1R111i7R112i7R113nR114i3R115fR116nR117i1R118nR119i1R120i1R121i1R122zR123zR50R37R26y7:GladiusgR156i2ghgy8:signalerngy7:arcFlawR37y8:arcGloryR37y9:arcBeliefR37y7:arcEpicR37y7:arcSagaR37y8:arcSpentzy14:arcPointsAccumzy5:banescy21:troshx.ds.HashedArrayy4:hashogR150ahgy5:boonscR167R168oy19:Hale%20and%20Heartycy26:troshx.sos.core.BoonAssigny12:_minRequiredi1y9:_canceledfy15:_forcePermanentfy8:discounti2y4:booncy28:troshx.sos.bnb.HaleAndHeartyR26R170y5:costsai2i4hR122zy9:clampRankfy13:multipleTimeszy8:channelszy13:superChannelszgy4:ranki1y11:_costCachedi2y16:_remainingCachedi15ggR150ar120hgy8:direPastfy7:talentsahy6:skillscy26:troshx.sos.core.SkillTabley9:skillHashoy9:Athleticsi1y10:Navigationi1y11:Observationi2y7:Stealthi4y8:Thieveryi2gy15:requiresTrainedoy8:Craftingty11:Engineeringty7:HistorytR192ty8:Swimmingty7:Tacticsty8:Strategyty9:Etiquettetgy22:requiresSpecialisationoy10:Professionty9:KnowledgetR197ty11:Performancetggy22:wealthAssetAssignCountzy12:wealthAssetsahy11:socialClasscy27:troshx.sos.core.SocialClassy11:wealthIndexzy10:classIndexzR26y13:Slave%2FExiley5:moneycy21:troshx.sos.core.Moneyy2:cpzy2:spzy2:gpzgy6:wealthzgR215cR216R217zR218i4R219zgy24:situationalModifierTableaahahahahahahahahahahahahahahahahahahahahahhy19:staticModifierTableaahahahahahahahahahahahahahahahahahahahahacy30:troshx.sos.core.StaticModifierR26y16:Warrior's%20Grity5:indexi20y8:multiplyi1y3:addi2ghhy6:ingamety7:fatiquezy11:talentNotesaR37R37R37hy20:masteryManueverNotesahy21:superiorManueverNotesaR37R37R37hR116ny11:profsRangedi16y10:profsMeleei511y11:schoolLeveli9y13:schoolBonusescy33:troshx.sos.schools.SoldierBonusesgy6:schoolcy26:troshx.sos.schools.Soldiery9:costMoneynR26y7:Soldiery9:profLimiti10y7:costArci1y15:staticModifiersr177gy9:gritAccumzy5:pronefy10:healthLosszR73i2y10:perceptioni6y12:intelligencei2y3:witi7y9:willpoweri4y6:healthi4y9:endurancei4y7:agilityi8y8:strengthi4y3:agei-1y10:leftHandedfy6:genderzy4:racecy22:troshx.sos.races.HumanR26y5:Humany5:magicfgy5:titleR37y5:notesR37y7:factionR37y8:nicknameR37R26y16:Dimarcheri-Lightg","3/8 S CP:16"),new troshx_core_CharSave("Dimachaerus-Medium","cy27:troshx.sos.sheets.CharSheety9:woundHashogy6:woundsahy4:bodycy24:troshx.sos.core.BodyChary15:hitLocationHashoy9:upperHeadzy4:facei1y9:lowerHeadi2y4:necki3y8:shoulderi4y5:chesti5y4:sidei6y5:bellyi7y3:hipi8y5:groini9y5:thighi10y4:kneei11y4:shini12y4:footi13y8:upperArmi14y5:elbowi15y7:forearmi16y4:handi17y9:upperBacki18y9:lowerBacki19gy4:namey8:Humanoidy11:targetZonesacy26:troshx.sos.core.TargetZoney11:descriptiony16:Downward%20Swingy12:weightsTotali10R26y4:Heady5:partsai4i2i1zhy11:partWeightsai3i2i2i3hgcR29R30y14:Upward%20SwingR32i10R26R33R34ai5i3i2i1hR35ai3i2i3i2hgcR29R30y0:R32i10R26y4:NeckR34ai4i3i2i1hR35ai3i3i2i2hgcR29R30R37R32i10R26y5:TorsoR34ai7i6i5hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20ArmR34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20ArmR34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20LegR34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20LegR34ai13i12i11hR35ai3i4i3hgcR29R30R37R32i10R26y5:GroinR34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R33R34ai3i1zhR35ai3i4i3hgcR29R30R37R32i10R26R38R34ai5i3i1hR35ai3i4i3hgcR29R30R37R32i10R26y5:ChestR34ai7i5i4i3hR35ai3i4i2i1hgcR29R30R37R32i10R26y5:BellyR34ai9i8i6i7hR35ai1i1i5i3hgcR29R30R37R32i10R26R40R34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26R41R34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26R44R34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R42R34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26R43R34ai13i12i11hR35ai3i4i3hghy12:hitLocationsacy27:troshx.sos.core.HitLocationR26y12:Upper%20Heady2:idR6y8:twoSidedfgcR48R26y4:FaceR50R7R51fgcR48R26y12:Lower%20HeadR50R8R51fgcR48R26R38R50R9R51fgcR48R26y8:ShoulderR50R10R51tgcR48R26R45R50R11R51fgcR48R26y4:SideR50R12R51tgcR48R26R46R50R13R51fgcR48R26y3:HipR50R14R51tgcR48R26R44R50R15R51fgcR48R26y5:ThighR50R16R51tgcR48R26y4:KneeR50R17R51tgcR48R26y4:ShinR50R18R51tgcR48R26y4:FootR50R19R51tgcR48R26R40R50R20R51tgcR48R26y5:ElbowR50R21R51tgcR48R26y7:ForearmR50R22R51tgcR48R26y4:HandR50R23R51tgcR48R26y12:Upper%20BackR50R24R51fgcR48R26y12:Lower%20BackR50R25R51fghy16:thrustStartIndexi9y14:rearStartIndexi18y19:missileHitLocationsai-1i9i11i11i12i15i13i14i16i17hy10:thrustMaski261632y9:swingMaski511gy9:inventorycy25:troshx.sos.core.Inventoryy7:versioni3y14:shieldPositionzy7:weaponsaoy8:attachedfy3:keyi18y6:weaponcy22:troshx.sos.core.Weapony6:isAmmofy7:firearmny8:crossbowny11:requiredStrzy11:stuckChancezy14:missileSpecialny12:missileFlagszy11:damageTypeMi1y7:damageMzy4:atnMzy5:rangezy12:meleeSpecialcy28:troshx.sos.core.MeleeSpecialy6:customny12:spatulateTipzy5:shockzy10:multiHit_Yzy8:multiHitzy4:drawi4y8:crushingzy5:chainzy5:bleedzy8:APThrustzy7:APSwingzgy10:meleeFlagsi512y5:guardzy3:dtni7y11:damageTypeTi1y11:damageTypeSzy7:damageTzy7:damageSi1y4:atnTi7y4:atnSi7y7:variantny5:reachi3y6:rangedfy11:profsCustomny5:profsi1y9:customiseny4:uniti1y12:costCurrencyzy4:costi15y5:flagszy6:weightzR50R37R26y4:Sicagy4:heldzy6:unheldzy12:unheldRemarkR37y9:holding1HfgoR76fR77i19R78r85R125zR126zR127R37R128fghy7:shieldsahy20:equipedNonMeleeItemsahy9:wornArmoraoR77i6R76fy5:armorcy21:troshx.sos.core.ArmorR118ny7:specialny12:specialFlagszy2:ppzy10:burdinadinny3:AVBi2y3:AVPi1y3:AVCi2R119i1R120zR121zR122zR123zR50R37R26y16:Cloth%20Bindingsy8:coverageoR18zR22zR15i2R17zggR125zR126zR127R37goR77i7R76fR132cR133R118nR134cy28:troshx.sos.core.ArmorSpecialy13:otherBodyTypeny11:hitModifierny8:wornWithny13:layerCoveragezy5:layerzy18:restrictsBreathingi2gR135i3R136i1R137nR138i4R139i5R140i6R119i1R120i1R121i10R122zR123d1.5R50R37R26y12:Full%20VisorR142oR7i1ggR125zR126zR127R37goR77i8R76fR132cR133R118nR134nR135i2R136zR138i4R139i5R140i6R119i1R120i1R121i15R122zR123i2R50R37R26y11:Iron%20HelmR142oR6zR8zR9i2R10i2ggR125zR126zR127R37goR77i9R76fR132cR133R118nR134nR135zR136zR137nR138i2R139i2R140i3R119i1R120zR121zR122zR123zR50R37R26y17:Leather%20BalteusR142oR13zggR125zR126zR127R37goR77i10R76fR132cR133R118nR134nR135zR136zR137nR138i3R139i3R140i4R119i1R120zR121i6R122zR123zR50R37R26y32:Hardened%20Leather%20Knee-GuardsR142oR17zggR125zR126zR127R37goR77i11R76fR132cR133R118nR134nR135i2R136zR137nR138i4R139i5R140i6R119i1R120zR121zR122zR123i3R50R37R26y13:Iron%20ManicaR142oR20i1R22i1R10i3R21i1ggR125zR126zR127R37goR132cR133R118nR134nR135zR136zR137nR138i2R139i2R140i3R119i1R120zR121zR122zR123zR50R37R26y23:Leather%20Shin%20GuardsR142oR18zggR76fR125zR126zR127R37R77zghy8:dropPackfy6:packedcy22:troshx.ds.IDMatchArrayy4:listahgy7:droppedcR158R159acy23:troshx.sos.core.ItemQtyy11:attachmentsny4:itemcR79R80fR81nR82nR83zR84zR85nR86zR87i1R88zR89zR90zR91cR92R93nR94i2R95zR96zR97zR98zR99zR100zR101zR102zR103zgR104i1024R105zR106i7R107i1R108zR109i1R110i-1R111i6R112i7R113nR114i2R115fR116nR117i64R118nR119i1R120zR121i6R122zR123zR50R37R26y5:Pugiogy3:qtyi2gcR161R162nR163cR79R80fR81nR82nR83zR84zR85nR86zR87i1R88zR89zR90zR91nR104zR105zR106i7R107i1R108zR109i1R110i1R111i7R112i7R113nR114i3R115fR116nR117i1R118nR119i1R120i1R121i1R122zR123zR50R37R26y7:GladiusgR165i2ghgy8:signalerngy7:arcFlawR37y8:arcGloryR37y9:arcBeliefR37y7:arcEpicR37y7:arcSagaR37y8:arcSpentzy14:arcPointsAccumzy5:banescy21:troshx.ds.HashedArrayy4:hashogR159ahgy5:boonscR176R177oy19:Hale%20and%20Heartycy26:troshx.sos.core.BoonAssigny12:_minRequiredi1y9:_canceledfy15:_forcePermanentfy8:discounti2y4:booncy28:troshx.sos.bnb.HaleAndHeartyR26R179y5:costsai2i4hR122zy9:clampRankfy13:multipleTimeszy8:channelszy13:superChannelszgy4:ranki1y11:_costCachedi2y16:_remainingCachedi999ggR159ar127hgy8:direPastfy7:talentsahy6:skillscy26:troshx.sos.core.SkillTabley9:skillHashoy9:Athleticsi2y10:Navigationi1y11:Observationi2y7:Stealthi3y8:Thieveryi2gy15:requiresTrainedoy8:Craftingty11:Engineeringty7:HistorytR201ty8:Swimmingty7:Tacticsty8:Strategyty9:Etiquettetgy22:requiresSpecialisationoy10:Professionty9:KnowledgetR206ty11:Performancetggy22:wealthAssetAssignCountzy12:wealthAssetsahy11:socialClasscy27:troshx.sos.core.SocialClassy11:wealthIndexi1y10:classIndexi1R26y7:Peasanty5:moneycy21:troshx.sos.core.Moneyy2:cpzy2:spzy2:gpi5gy6:wealthzgR224cR225R226zR227i9R228i3gy24:situationalModifierTableaahahahahahahahahahahahahahahahahahahahahahhy19:staticModifierTableaahahahahahahahahahahahahahahahahahahahahacy30:troshx.sos.core.StaticModifierR26y16:Warrior's%20Grity5:indexi20y8:multiplyi1y3:addi2ghhy6:ingamety7:fatiquezy11:talentNotesaR37R37R37hy20:masteryManueverNotesahy21:superiorManueverNotesaR37R37hR116ny11:profsRangedi16y10:profsMeleei511y11:schoolLeveli8y13:schoolBonusescy33:troshx.sos.schools.SoldierBonusesgy6:schoolcy26:troshx.sos.schools.Soldiery9:costMoneynR26y7:Soldiery9:profLimiti10y7:costArci1y15:staticModifiersr184gy9:gritAccumzy5:pronefy10:healthLosszR73i2y10:perceptioni5y12:intelligencei2y3:witi7y9:willpoweri4y6:healthi4y9:endurancei4y7:agilityi7y8:strengthi6y3:agei-1y10:leftHandedfy6:genderzy4:racecy22:troshx.sos.races.HumanR26y5:Humany5:magicfgy5:titleR37y5:notesR37y7:factionR37y8:nicknameR37R26y17:Dimarcheri-Mediumg","6.5/10 S CP:15"),new troshx_core_CharSave("Thracian","cy27:troshx.sos.sheets.CharSheety9:woundHashogy6:woundsahy4:bodycy24:troshx.sos.core.BodyChary15:hitLocationHashoy9:upperHeadzy4:facei1y9:lowerHeadi2y4:necki3y8:shoulderi4y5:chesti5y4:sidei6y5:bellyi7y3:hipi8y5:groini9y5:thighi10y4:kneei11y4:shini12y4:footi13y8:upperArmi14y5:elbowi15y7:forearmi16y4:handi17y9:upperBacki18y9:lowerBacki19gy4:namey8:Humanoidy11:targetZonesacy26:troshx.sos.core.TargetZoney11:descriptiony16:Downward%20Swingy12:weightsTotali10R26y4:Heady5:partsai4i2i1zhy11:partWeightsai3i2i2i3hgcR29R30y14:Upward%20SwingR32i10R26R33R34ai5i3i2i1hR35ai3i2i3i2hgcR29R30y0:R32i10R26y4:NeckR34ai4i3i2i1hR35ai3i3i2i2hgcR29R30R37R32i10R26y5:TorsoR34ai7i6i5hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20ArmR34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20ArmR34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20LegR34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20LegR34ai13i12i11hR35ai3i4i3hgcR29R30R37R32i10R26y5:GroinR34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R33R34ai3i1zhR35ai3i4i3hgcR29R30R37R32i10R26R38R34ai5i3i1hR35ai3i4i3hgcR29R30R37R32i10R26y5:ChestR34ai7i5i4i3hR35ai3i4i2i1hgcR29R30R37R32i10R26y5:BellyR34ai9i8i6i7hR35ai1i1i5i3hgcR29R30R37R32i10R26R40R34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26R41R34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26R44R34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R42R34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26R43R34ai13i12i11hR35ai3i4i3hghy12:hitLocationsacy27:troshx.sos.core.HitLocationR26y12:Upper%20Heady2:idR6y8:twoSidedfgcR48R26y4:FaceR50R7R51fgcR48R26y12:Lower%20HeadR50R8R51fgcR48R26R38R50R9R51fgcR48R26y8:ShoulderR50R10R51tgcR48R26R45R50R11R51fgcR48R26y4:SideR50R12R51tgcR48R26R46R50R13R51fgcR48R26y3:HipR50R14R51tgcR48R26R44R50R15R51fgcR48R26y5:ThighR50R16R51tgcR48R26y4:KneeR50R17R51tgcR48R26y4:ShinR50R18R51tgcR48R26y4:FootR50R19R51tgcR48R26R40R50R20R51tgcR48R26y5:ElbowR50R21R51tgcR48R26y7:ForearmR50R22R51tgcR48R26y4:HandR50R23R51tgcR48R26y12:Upper%20BackR50R24R51fgcR48R26y12:Lower%20BackR50R25R51fghy16:thrustStartIndexi9y14:rearStartIndexi18y19:missileHitLocationsai-1i9i11i11i12i15i13i14i16i17hy10:thrustMaski261632y9:swingMaski511gy9:inventorycy25:troshx.sos.core.Inventoryy7:versioni3y14:shieldPositionzy7:weaponsaoy8:attachedfy3:keyi17y6:weaponcy22:troshx.sos.core.Weapony6:isAmmofy7:firearmny8:crossbowny11:requiredStrzy11:stuckChancezy14:missileSpecialny12:missileFlagszy11:damageTypeMi1y7:damageMzy4:atnMzy5:rangezy12:meleeSpecialcy28:troshx.sos.core.MeleeSpecialy6:customny12:spatulateTipi2y5:shockzy10:multiHit_Yzy8:multiHitzy4:drawzy8:crushingzy5:chainzy5:bleedzy8:APThrustzy7:APSwingzgy10:meleeFlagsi1024y5:guardzy3:dtni7y11:damageTypeTi1y11:damageTypeSzy7:damageTi1y7:damageSi-1y4:atnTi6y4:atnSi7y7:variantny5:reachi2y6:rangedfy11:profsCustomny5:profsi64y9:customiseny4:uniti1y12:costCurrencyzy4:costi6y5:flagszy6:weightzR50R37R26y5:Pugiogy4:heldzy6:unheldzy12:unheldRemarkR37y9:holding1HfgoR76fR77i52R78cR79R80fR81nR82nR83zR84zR85nR86zR87i1R88zR89zR90zR91cR92R93nR94zR95zR96zR97zR98i4R99zR100zR101zR102zR103zgR104i512R105zR106i7R107i1R108zR109zR110i1R111i7R112i7R113nR114i3R115fR116nR117i1R118nR119i1R120zR121i15R122zR123zR50R37R26y4:SicagR125zR126zR127R37R128fghy7:shieldsaoR77i51R76fy6:shieldcy22:troshx.sos.core.Shieldy9:strapTypezy10:durabilityi6y6:bashTNzy7:blockTNi6y4:sizei1y2:AVi8R119i1R120i1R121i10R122zR123i1R50R37R26y25:Rodela%20%3A6(%2B0b)%2012gR125y1:0R126zR127R37ghy20:equipedNonMeleeItemsahy9:wornArmoraoR77i7R76fy5:armorcy21:troshx.sos.core.ArmorR118ny7:specialny12:specialFlagszy2:ppzy10:burdinadinny3:AVBi3y3:AVPi3y3:AVCi4R119i1R120zR121i6R122zR123zR50R37R26y32:Hardened%20Leather%20Knee-Guardsy8:coverageoR17zggR125zR126zR127R37goR77i13R76fR143cR144R118nR145nR146i2R147zR149i4R150i5R151i6R119i1R120i1R121i15R122zR123i2R50R37R26y11:Iron%20HelmR153oR6zR8zR9i2R10i2ggR125zR126zR127R37goR77i15R76fR143cR144R118nR145cy28:troshx.sos.core.ArmorSpecialy13:otherBodyTypeny11:hitModifierny8:wornWithny13:layerCoveragezy5:layerzy18:restrictsBreathingi2gR146i3R147i1R148nR149i4R150i5R151i6R119i1R120i1R121i10R122zR123d1.5R50R37R26y12:Full%20VisorR153oR7i1ggR125zR126zR127R37goR77i13R76fR143cR144R118nR145nR146i2R147zR148nR149i4R150i5R151i6R119i1R120i1R121i3R122zR123d1.5R50R37R26y22:(Half)%20Iron%20ManicaR153oR22zR21zR20zR10i2ggR125zR126zR127R37goR77i33R76fR143cR144R118nR145nR146zR147zR148nR149i2R150i1R151i2R119i1R120zR121zR122zR123zR50R37R26y16:Cloth%20BindingsR153oR18zR22zR13i2R15i2R17zggR125zR126zR127R37goR77i68R76fR143cR144R118nR145nR146i2R147zR148nR149i4R150i5R151i6R119i1R120zR121zR122zR123d2.5R50R37R26y29:Iron%20Shin%20Higher%20GuardsR153oR18zR16i3ggR125zR126zR127R37ghy8:dropPackfy6:packedcy22:troshx.ds.IDMatchArrayy4:listahgy7:droppedcR168R169ahgy8:signalerngy7:arcFlawR37y8:arcGloryR37y9:arcBeliefR37y7:arcEpicR37y7:arcSagaR37y8:arcSpentzy14:arcPointsAccumzy5:banescy21:troshx.ds.HashedArrayy4:hashogR169ahgy5:boonscR180R181oy19:Hale%20and%20Heartycy26:troshx.sos.core.BoonAssigny12:_minRequiredi1y9:_canceledfy15:_forcePermanentfy8:discounti2y4:booncy28:troshx.sos.bnb.HaleAndHeartyR26R183y5:costsai2i4hR122zy9:clampRankfy13:multipleTimeszy8:channelszy13:superChannelszgy4:ranki1y11:_costCachedi2y16:_remainingCachedi999ggR169ar123hgy8:direPastfy7:talentsahy6:skillscy26:troshx.sos.core.SkillTabley9:skillHashoy9:Athleticsi4y5:Drilli4y7:Tacticsi2gy15:requiresTrainedoy8:Craftingty11:Engineeringty7:Historyty10:Navigationty8:SwimmingtR206ty8:Strategyty9:Etiquettetgy22:requiresSpecialisationoy10:Professionty9:KnowledgetR208ty11:Performancetggy22:wealthAssetAssignCountzy12:wealthAssetsahy11:socialClasscy27:troshx.sos.core.SocialClassy11:wealthIndexi1y10:classIndexi1R26y7:Peasanty5:moneycy21:troshx.sos.core.Moneyy2:cpzy2:spzy2:gpi5gy6:wealthzgR226cR227R228zR229i15R230i2gy24:situationalModifierTableaahahahahahahahahahahahahahahahahahahahahahhy19:staticModifierTableaahahahahahahahahahahahahahahahahahahahahacy30:troshx.sos.core.StaticModifierR26y16:Warrior's%20Grity5:indexi20y8:multiplyi1y3:addi2ghhy6:ingamety7:fatiquezy11:talentNotesaR37R37R37hy20:masteryManueverNotesahy21:superiorManueverNotesaR37R37hR116ny11:profsRangedi16y10:profsMeleei511y11:schoolLeveli8y13:schoolBonusescy33:troshx.sos.schools.SoldierBonusesgy6:schoolcy26:troshx.sos.schools.Soldiery9:costMoneynR26y7:Soldiery9:profLimiti10y7:costArci1y15:staticModifiersr180gy9:gritAccumzy5:pronefy10:healthLosszR73i2y10:perceptioni6y12:intelligencei2y3:witi6y9:willpoweri4y6:healthi4y9:endurancei4y7:agilityi8y8:strengthi5y3:agei-1y10:leftHandedfy6:genderzy4:racecy22:troshx.sos.races.HumanR26y5:Humany5:magicfgy5:titleR37y5:notesR37y7:factionR37y8:nicknameR37R26y8:Thraciang","3/8 S CP:16"),new troshx_core_CharSave("Provocator","cy27:troshx.sos.sheets.CharSheety9:woundHashogy6:woundsahy4:bodycy24:troshx.sos.core.BodyChary15:hitLocationHashoy9:upperHeadzy4:facei1y9:lowerHeadi2y4:necki3y8:shoulderi4y5:chesti5y4:sidei6y5:bellyi7y3:hipi8y5:groini9y5:thighi10y4:kneei11y4:shini12y4:footi13y8:upperArmi14y5:elbowi15y7:forearmi16y4:handi17y9:upperBacki18y9:lowerBacki19gy4:namey8:Humanoidy11:targetZonesacy26:troshx.sos.core.TargetZoney11:descriptiony16:Downward%20Swingy12:weightsTotali10R26y4:Heady5:partsai4i2i1zhy11:partWeightsai3i2i2i3hgcR29R30y14:Upward%20SwingR32i10R26R33R34ai5i3i2i1hR35ai3i2i3i2hgcR29R30y0:R32i10R26y4:NeckR34ai4i3i2i1hR35ai3i3i2i2hgcR29R30R37R32i10R26y5:TorsoR34ai7i6i5hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20ArmR34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20ArmR34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20LegR34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20LegR34ai13i12i11hR35ai3i4i3hgcR29R30R37R32i10R26y5:GroinR34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R33R34ai3i1zhR35ai3i4i3hgcR29R30R37R32i10R26R38R34ai5i3i1hR35ai3i4i3hgcR29R30R37R32i10R26y5:ChestR34ai7i5i4i3hR35ai3i4i2i1hgcR29R30R37R32i10R26y5:BellyR34ai9i8i6i7hR35ai1i1i5i3hgcR29R30R37R32i10R26R40R34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26R41R34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26R44R34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R42R34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26R43R34ai13i12i11hR35ai3i4i3hghy12:hitLocationsacy27:troshx.sos.core.HitLocationR26y12:Upper%20Heady2:idR6y8:twoSidedfgcR48R26y4:FaceR50R7R51fgcR48R26y12:Lower%20HeadR50R8R51fgcR48R26R38R50R9R51fgcR48R26y8:ShoulderR50R10R51tgcR48R26R45R50R11R51fgcR48R26y4:SideR50R12R51tgcR48R26R46R50R13R51fgcR48R26y3:HipR50R14R51tgcR48R26R44R50R15R51fgcR48R26y5:ThighR50R16R51tgcR48R26y4:KneeR50R17R51tgcR48R26y4:ShinR50R18R51tgcR48R26y4:FootR50R19R51tgcR48R26R40R50R20R51tgcR48R26y5:ElbowR50R21R51tgcR48R26y7:ForearmR50R22R51tgcR48R26y4:HandR50R23R51tgcR48R26y12:Upper%20BackR50R24R51fgcR48R26y12:Lower%20BackR50R25R51fghy16:thrustStartIndexi9y14:rearStartIndexi18y19:missileHitLocationsai-1i9i11i11i12i15i13i14i16i17hy10:thrustMaski261632y9:swingMaski511gy9:inventorycy25:troshx.sos.core.Inventoryy7:versioni3y14:shieldPositionzy7:weaponsaoy8:attachedfy3:keyi17y6:weaponcy22:troshx.sos.core.Weapony6:isAmmofy7:firearmny8:crossbowny11:requiredStrzy11:stuckChancezy14:missileSpecialny12:missileFlagszy11:damageTypeMi1y7:damageMzy4:atnMzy5:rangezy12:meleeSpecialcy28:troshx.sos.core.MeleeSpecialy6:customny12:spatulateTipi2y5:shockzy10:multiHit_Yzy8:multiHitzy4:drawzy8:crushingzy5:chainzy5:bleedzy8:APThrustzy7:APSwingzgy10:meleeFlagsi1024y5:guardzy3:dtni7y11:damageTypeTi1y11:damageTypeSzy7:damageTi1y7:damageSi-1y4:atnTi6y4:atnSi7y7:variantny5:reachi2y6:rangedfy11:profsCustomny5:profsi64y9:customiseny4:uniti1y12:costCurrencyzy4:costi6y5:flagszy6:weightzR50R37R26y5:Pugiogy4:heldzy6:unheldzy12:unheldRemarkR37y9:holding1HfgoR76fR77i18R78cR79R80fR81nR82nR83zR84zR85nR86zR87i1R88zR89zR90zR91nR104zR105zR106i7R107i1R108zR109i1R110i1R111i7R112i7R113nR114i3R115fR116nR117i1R118nR119i1R120i1R121i1R122zR123zR50R37R26y7:GladiusgR125y1:1R126zR127R37R128fghy7:shieldsaoR77i12R76fy6:shieldcy22:troshx.sos.core.Shieldy9:strapTypezy10:durabilityi6y6:bashTNzy7:blockTNi7y4:sizei2y2:AVi6R119i1R120i1R121i5R122zR123i2R50R37R26y25:Scutum%3A%206(%2B1b)%2012gR125zR126zR127R37ghy20:equipedNonMeleeItemsahy9:wornArmoraoR77i13R76fy5:armorcy21:troshx.sos.core.ArmorR118ny7:specialny12:specialFlagsi2y2:ppzy3:AVBi4y3:AVPi5y3:AVCi6R119i1R120i1R121i15R122zR123i2R50R37R26y11:Iron%20Helmy8:coverageoR6zR8zR9i2R10i2ggR125zR126zR127R37goR77i15R76fR143cR144R118nR145cy28:troshx.sos.core.ArmorSpecialy13:otherBodyTypeny11:hitModifierny8:wornWithny13:layerCoveragezy5:layerzy18:restrictsBreathingi2gR146i3R147i1y10:burdinadinnR148i4R149i5R150i6R119i1R120i1R121i10R122zR123d1.5R50R37R26y12:Full%20VisorR152oR7i1ggR125zR126zR127R37goR77i16R76fR143cR144R118nR145nR146i2R147zR148i4R149i5R150i6R119i1R120i1R121i1R122zR123d0.5R50R37R26y17:Iron%20HeartguardR152oR11i1ggR125zR126zR127R37goR77i67R76fR143cR144R118nR145nR146i2R147zR160nR148i4R149i5R150i6R119i1R120zR121zR122zR123i1R50R37R26y29:(Half)%20Iron%20Shin%20GuardsR152oR18zggR125zR126zR127R37goR77i68R76fR143cR144R118nR145nR146i2R147zR160nR148i4R149i5R150i6R119i1R120zR121zR122zR123d1.5R50R37R26y22:(Half)%20Iron%20ManicaR152oR20i1R22i1R10i3R21i1ggR125zR126zR127R37goR77i69R76fR143cR144R118nR145nR146zR147zR160nR148i2R149i1R150i2R119i1R120zR121zR122zR123zR50R37R26y16:Cloth%20BindingsR152oR18zR22zR13i2R15i2R17zggR125zR126zR127R37ghy8:dropPackfy6:packedcy22:troshx.ds.IDMatchArrayy4:listahgy7:droppedcR168R169ahgy8:signalerngy7:arcFlawR37y8:arcGloryR37y9:arcBeliefR37y7:arcEpicR37y7:arcSagaR37y8:arcSpentzy14:arcPointsAccumzy5:banescy21:troshx.ds.HashedArrayy4:hashogR169ahgy5:boonscR180R181oy19:Hale%20and%20Heartycy26:troshx.sos.core.BoonAssigny12:_minRequiredi1y9:_canceledfy15:_forcePermanentfy8:discounti2y4:booncy28:troshx.sos.bnb.HaleAndHeartyR26R183y5:costsai2i4hR122zy9:clampRankfy13:multipleTimeszy8:channelszy13:superChannelszgy4:ranki1y11:_costCachedi2y16:_remainingCachedi999ggR169ar122hgy8:direPastfy7:talentsahy6:skillscy26:troshx.sos.core.SkillTabley9:skillHashoy9:Athleticsi4y5:Drilli4y7:Tacticsi2gy15:requiresTrainedoy8:Craftingty11:Engineeringty7:Historyty10:Navigationty8:SwimmingtR206ty8:Strategyty9:Etiquettetgy22:requiresSpecialisationoy10:Professionty9:KnowledgetR208ty11:Performancetggy22:wealthAssetAssignCountzy12:wealthAssetsahy11:socialClasscy27:troshx.sos.core.SocialClassy11:wealthIndexi1y10:classIndexi1R26y7:Peasanty5:moneycy21:troshx.sos.core.Moneyy2:cpzy2:spzy2:gpi5gy6:wealthzgR226cR227R228zR229i15R230i2gy24:situationalModifierTableaahahahahahahahahahahahahahahahahahahahahahhy19:staticModifierTableaahahahahahahahahahahahahahahahahahahahahacy30:troshx.sos.core.StaticModifierR26y16:Warrior's%20Grity5:indexi20y8:multiplyi1y3:addi2ghhy6:ingamety7:fatiquezy11:talentNotesaR37R37R37hy20:masteryManueverNotesahy21:superiorManueverNotesaR37R37hR116ny11:profsRangedi16y10:profsMeleei511y11:schoolLeveli8y13:schoolBonusescy33:troshx.sos.schools.SoldierBonusesgy6:schoolcy26:troshx.sos.schools.Soldiery9:costMoneynR26y7:Soldiery9:profLimiti10y7:costArci1y15:staticModifiersr179gy9:gritAccumzy5:pronefy10:healthLosszR73i2y10:perceptioni5y12:intelligencei2y3:witi7y9:willpoweri4y6:healthi4y9:endurancei5y7:agilityi7y8:strengthi6y3:agei-1y10:leftHandedfy6:genderzy4:racecy22:troshx.sos.races.HumanR26y5:Humany5:magicfgy5:titleR37y5:notesR37y7:factionR37y8:nicknameR37R26y10:Provocatorg","8.5/11 S CP:15"),new troshx_core_CharSave("Hoplomachus","cy27:troshx.sos.sheets.CharSheety9:woundHashogy6:woundsahy4:bodycy24:troshx.sos.core.BodyChary15:hitLocationHashoy9:upperHeadzy4:facei1y9:lowerHeadi2y4:necki3y8:shoulderi4y5:chesti5y4:sidei6y5:bellyi7y3:hipi8y5:groini9y5:thighi10y4:kneei11y4:shini12y4:footi13y8:upperArmi14y5:elbowi15y7:forearmi16y4:handi17y9:upperBacki18y9:lowerBacki19gy4:namey8:Humanoidy11:targetZonesacy26:troshx.sos.core.TargetZoney11:descriptiony16:Downward%20Swingy12:weightsTotali10R26y4:Heady5:partsai4i2i1zhy11:partWeightsai3i2i2i3hgcR29R30y14:Upward%20SwingR32i10R26R33R34ai5i3i2i1hR35ai3i2i3i2hgcR29R30y0:R32i10R26y4:NeckR34ai4i3i2i1hR35ai3i3i2i2hgcR29R30R37R32i10R26y5:TorsoR34ai7i6i5hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20ArmR34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20ArmR34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20LegR34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20LegR34ai13i12i11hR35ai3i4i3hgcR29R30R37R32i10R26y5:GroinR34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R33R34ai3i1zhR35ai3i4i3hgcR29R30R37R32i10R26R38R34ai5i3i1hR35ai3i4i3hgcR29R30R37R32i10R26y5:ChestR34ai7i5i4i3hR35ai3i4i2i1hgcR29R30R37R32i10R26y5:BellyR34ai9i8i6i7hR35ai1i1i5i3hgcR29R30R37R32i10R26R40R34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26R41R34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26R44R34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R42R34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26R43R34ai13i12i11hR35ai3i4i3hghy12:hitLocationsacy27:troshx.sos.core.HitLocationR26y12:Upper%20Heady2:idR6y8:twoSidedfgcR48R26y4:FaceR50R7R51fgcR48R26y12:Lower%20HeadR50R8R51fgcR48R26R38R50R9R51fgcR48R26y8:ShoulderR50R10R51tgcR48R26R45R50R11R51fgcR48R26y4:SideR50R12R51tgcR48R26R46R50R13R51fgcR48R26y3:HipR50R14R51tgcR48R26R44R50R15R51fgcR48R26y5:ThighR50R16R51tgcR48R26y4:KneeR50R17R51tgcR48R26y4:ShinR50R18R51tgcR48R26y4:FootR50R19R51tgcR48R26R40R50R20R51tgcR48R26y5:ElbowR50R21R51tgcR48R26y7:ForearmR50R22R51tgcR48R26y4:HandR50R23R51tgcR48R26y12:Upper%20BackR50R24R51fgcR48R26y12:Lower%20BackR50R25R51fghy16:thrustStartIndexi9y14:rearStartIndexi18y19:missileHitLocationsai-1i9i11i11i12i15i13i14i16i17hy10:thrustMaski261632y9:swingMaski511gy9:inventorycy25:troshx.sos.core.Inventoryy7:versioni3y14:shieldPositionzy7:weaponsaoy8:attachedfy3:keyi17y6:weaponcy22:troshx.sos.core.Weapony6:isAmmofy7:firearmny8:crossbowny11:requiredStrzy11:stuckChancezy14:missileSpecialny12:missileFlagszy11:damageTypeMi1y7:damageMzy4:atnMzy5:rangezy12:meleeSpecialcy28:troshx.sos.core.MeleeSpecialy6:customny12:spatulateTipi2y5:shockzy10:multiHit_Yzy8:multiHitzy4:drawzy8:crushingzy5:chainzy5:bleedzy8:APThrustzy7:APSwingzgy10:meleeFlagsi1024y5:guardzy3:dtni7y11:damageTypeTi1y11:damageTypeSzy7:damageTi1y7:damageSi-1y4:atnTi6y4:atnSi7y7:variantny5:reachi2y6:rangedfy11:profsCustomny5:profsi64y9:customiseny4:uniti1y12:costCurrencyzy4:costi6y5:flagszy6:weightzR50R37R26y5:Pugiogy4:heldzy6:unheldzy12:unheldRemarkR37y9:holding1HfgoR76fR77i18R78cR79R80fR81nR82nR83zR84zR85nR86zR87i1R88zR89zR90zR91nR104zR105zR106i7R107i1R108zR109i1R110i1R111i7R112i7R113nR114i3R115fR116nR117i1R118nR119i1R120i1R121i1R122zR123zR50R37R26y7:GladiusgR125zR126zR127R37R128fgoR76fR77i15R78cR79y15:_showCustomTagstR80fR81nR82nR83zR84zR85nR86zR87i1R88zR89zR90zR91nR104i144R105zR106i7R107i1R108zR109i2R110zR111i7R112i7R113cR79R130tR80fR81nR82nR83zR84zR85nR86zR87i1R88zR89zR90zR91nR104zR105zR106i9R107i1R108zR109i1R110i-1R111i7R112i9R113nR114i6R115fR116nR117i16R118nR119i1R120zR121zR122zR123zR50R37R26y16:Spear%20(Arming)gR114i6R115fR116nR117i16R118nR119i1R120zR121i6R122i1R123i4R50R37R26R131gR125y1:1R126zR127R37R128tghy7:shieldsaoR77i14R76fy6:shieldcy22:troshx.sos.core.Shieldy9:strapTypezy10:durabilityi6y6:bashTNzy7:blockTNi6y4:sizei1y2:AVi8R119i1R120i1R121i10R122zR123i1R50R37R26y25:Rodela%20%3A6(%2B0b)%2012gR125zR126zR127R37ghy20:equipedNonMeleeItemsahy9:wornArmoraoR77i13R76fy5:armorcy21:troshx.sos.core.ArmorR118ny7:specialny12:specialFlagsi2y2:ppzy3:AVBi4y3:AVPi5y3:AVCi6R119i1R120i1R121i15R122zR123i2R50R37R26y11:Iron%20Helmy8:coverageoR6zR8zR9i2R10i2ggR125zR126zR127R37goR77i15R76fR145cR146R118nR147cy28:troshx.sos.core.ArmorSpecialy13:otherBodyTypeny11:hitModifierny8:wornWithny13:layerCoveragezy5:layerzy18:restrictsBreathingi2gR148i3R149i1y10:burdinadinnR150i4R151i5R152i6R119i1R120i1R121i10R122zR123d1.5R50R37R26y12:Full%20VisorR154oR7i1ggR125zR126zR127R37goR77i9R76fR145cR146R118nR147nR148zR149zR162nR150i2R151i1R152i2R119i1R120zR121zR122zR123zR50R37R26y16:Cloth%20BindingsR154oR18zR22zR13i2R15i2R17zggR125zR126zR127R37goR77i12R76fR145cR146R118nR147nR148zR149zR162nR150i4R151i5R152i6R119i1R120zR121zR122zR123d2.5R50R37R26y29:Iron%20Shin%20Higher%20GuardsR154oR18zR16i3ggR125zR126zR127R37goR77i14R76fR145cR146R118nR147nR148zR149zR162nR150i1R151i1R152i1R119i1R120zR121zR122zR123zR50R37R26y29:Leather%20Balteus%20(Partial)R154oR13zggR125zR126zR127R37goR77i15R76fR145cR146R118nR147nR148zR149zR162nR150i4R151i5R152i6R119i1R120zR121zR122zR123d1.5R50R37R26y22:(Half)%20Iron%20ManicaR154oR20i1R22i1R10i3R21i1ggR125zR126zR127R37ghy8:dropPackfy6:packedcy22:troshx.ds.IDMatchArrayy4:listahgy7:droppedcR170R171acy23:troshx.sos.core.ItemQtyy11:attachmentsny4:itemcR146R118nR147nR148zR149zR162nR150i4R151i5R152i6R119i1R120zR121zR122zR123i2R50R37R26y20:Iron%20Shin%20GuardsR154oR18zggy3:qtyi1gcR173R174nR175cR146R118nR147nR148zR149zR162nR150i2R151i2R152i3R119i1R120zR121zR122zR123zR50R37R26y16:Leather%20ManicaR154oR20zR22zR10i2ggR177i1ghgy8:signalerngy7:arcFlawR37y8:arcGloryR37y9:arcBeliefR37y7:arcEpicR37y7:arcSagaR37y8:arcSpentzy14:arcPointsAccumzy5:banescy21:troshx.ds.HashedArrayy4:hashogR171ahgy5:boonscR188R189oy19:Hale%20and%20Heartycy26:troshx.sos.core.BoonAssigny12:_minRequiredi1y9:_canceledfy15:_forcePermanentfy8:discounti2y4:booncy28:troshx.sos.bnb.HaleAndHeartyR26R191y5:costsai2i4hR122zy9:clampRankfy13:multipleTimeszy8:channelszy13:superChannelszgy4:ranki1y11:_costCachedi2y16:_remainingCachedi999ggR171ar131hgy8:direPastfy7:talentsahy6:skillscy26:troshx.sos.core.SkillTabley9:skillHashoy9:Athleticsi4y5:Drilli4y7:Tacticsi2gy15:requiresTrainedoy8:Craftingty11:Engineeringty7:Historyty10:Navigationty8:SwimmingtR214ty8:Strategyty9:Etiquettetgy22:requiresSpecialisationoy10:Professionty9:KnowledgetR216ty11:Performancetggy22:wealthAssetAssignCountzy12:wealthAssetsahy11:socialClasscy27:troshx.sos.core.SocialClassy11:wealthIndexi1y10:classIndexi1R26y7:Peasanty5:moneycy21:troshx.sos.core.Moneyy2:cpzy2:spzy2:gpi5gy6:wealthzgR234cR235R236i6R237i2R238i2gy24:situationalModifierTableaahahahahahahahahahahahahahahahahahahahahahhy19:staticModifierTableaahahahahahahahahahahahahahahahahahahahahacy30:troshx.sos.core.StaticModifierR26y16:Warrior's%20Grity5:indexi20y8:multiplyi1y3:addi2ghhy6:ingamety7:fatiquezy11:talentNotesaR37R37R37hy20:masteryManueverNotesahy21:superiorManueverNotesaR37R37hR116ny11:profsRangedi16y10:profsMeleei511y11:schoolLeveli8y13:schoolBonusescy33:troshx.sos.schools.SoldierBonusesgy6:schoolcy26:troshx.sos.schools.Soldiery9:costMoneynR26y7:Soldiery9:profLimiti10y7:costArci1y15:staticModifiersr188gy9:gritAccumzy5:pronefy10:healthLosszR73i2y10:perceptioni5y12:intelligencei2y3:witi4y9:willpoweri4y6:healthi4y9:endurancei6y7:agilityi8y8:strengthi6y3:agei-1y10:leftHandedfy6:genderzy4:racecy22:troshx.sos.races.HumanR26y5:Humany5:magicfgy5:titleR37y5:notesR37y7:factionR37y8:nicknameR37R26y11:Hoplomachusg","8.5/12 VL CP:14"),new troshx_core_CharSave("Murmillo","cy27:troshx.sos.sheets.CharSheety9:woundHashogy6:woundsahy4:bodycy24:troshx.sos.core.BodyChary15:hitLocationHashoy9:upperHeadzy4:facei1y9:lowerHeadi2y4:necki3y8:shoulderi4y5:chesti5y4:sidei6y5:bellyi7y3:hipi8y5:groini9y5:thighi10y4:kneei11y4:shini12y4:footi13y8:upperArmi14y5:elbowi15y7:forearmi16y4:handi17y9:upperBacki18y9:lowerBacki19gy4:namey8:Humanoidy11:targetZonesacy26:troshx.sos.core.TargetZoney11:descriptiony16:Downward%20Swingy12:weightsTotali10R26y4:Heady5:partsai4i2i1zhy11:partWeightsai3i2i2i3hgcR29R30y14:Upward%20SwingR32i10R26R33R34ai5i3i2i1hR35ai3i2i3i2hgcR29R30y0:R32i10R26y4:NeckR34ai4i3i2i1hR35ai3i3i2i2hgcR29R30R37R32i10R26y5:TorsoR34ai7i6i5hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20ArmR34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20ArmR34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20LegR34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20LegR34ai13i12i11hR35ai3i4i3hgcR29R30R37R32i10R26y5:GroinR34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R33R34ai3i1zhR35ai3i4i3hgcR29R30R37R32i10R26R38R34ai5i3i1hR35ai3i4i3hgcR29R30R37R32i10R26y5:ChestR34ai7i5i4i3hR35ai3i4i2i1hgcR29R30R37R32i10R26y5:BellyR34ai9i8i6i7hR35ai1i1i5i3hgcR29R30R37R32i10R26R40R34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26R41R34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26R44R34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R42R34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26R43R34ai13i12i11hR35ai3i4i3hghy12:hitLocationsacy27:troshx.sos.core.HitLocationR26y12:Upper%20Heady2:idR6y8:twoSidedfgcR48R26y4:FaceR50R7R51fgcR48R26y12:Lower%20HeadR50R8R51fgcR48R26R38R50R9R51fgcR48R26y8:ShoulderR50R10R51tgcR48R26R45R50R11R51fgcR48R26y4:SideR50R12R51tgcR48R26R46R50R13R51fgcR48R26y3:HipR50R14R51tgcR48R26R44R50R15R51fgcR48R26y5:ThighR50R16R51tgcR48R26y4:KneeR50R17R51tgcR48R26y4:ShinR50R18R51tgcR48R26y4:FootR50R19R51tgcR48R26R40R50R20R51tgcR48R26y5:ElbowR50R21R51tgcR48R26y7:ForearmR50R22R51tgcR48R26y4:HandR50R23R51tgcR48R26y12:Upper%20BackR50R24R51fgcR48R26y12:Lower%20BackR50R25R51fghy16:thrustStartIndexi9y14:rearStartIndexi18y19:missileHitLocationsai-1i9i11i11i12i15i13i14i16i17hy10:thrustMaski261632y9:swingMaski511gy9:inventorycy25:troshx.sos.core.Inventoryy7:versioni3y14:shieldPositionzy7:weaponsaoy8:attachedfy3:keyi17y6:weaponcy22:troshx.sos.core.Weapony6:isAmmofy7:firearmny8:crossbowny11:requiredStrzy11:stuckChancezy14:missileSpecialny12:missileFlagszy11:damageTypeMi1y7:damageMzy4:atnMzy5:rangezy12:meleeSpecialcy28:troshx.sos.core.MeleeSpecialy6:customny12:spatulateTipi2y5:shockzy10:multiHit_Yzy8:multiHitzy4:drawzy8:crushingzy5:chainzy5:bleedzy8:APThrustzy7:APSwingzgy10:meleeFlagsi1024y5:guardzy3:dtni7y11:damageTypeTi1y11:damageTypeSzy7:damageTi1y7:damageSi-1y4:atnTi6y4:atnSi7y7:variantny5:reachi2y6:rangedfy11:profsCustomny5:profsi64y9:customiseny4:uniti1y12:costCurrencyzy4:costi6y5:flagszy6:weightzR50R37R26y5:Pugiogy4:heldzy6:unheldzy12:unheldRemarkR37y9:holding1HfgoR76fR77i18R78cR79R80fR81nR82nR83zR84zR85nR86zR87i1R88zR89zR90zR91nR104zR105zR106i7R107i1R108zR109i1R110i1R111i7R112i7R113nR114i3R115fR116nR117i1R118nR119i1R120i1R121i1R122zR123zR50R37R26y7:GladiusgR125y1:1R126zR127R37R128fghy7:shieldsaoR77i12R76fy6:shieldcy22:troshx.sos.core.Shieldy9:strapTypezy10:durabilityi6y6:bashTNzy7:blockTNi7y4:sizei2y2:AVi6R119i1R120i1R121i5R122zR123i2R50R37R26y25:Scutum%3A%206(%2B1b)%2012gR125zR126zR127R37ghy20:equipedNonMeleeItemsahy9:wornArmoraoR77i7R76fy5:armorcy21:troshx.sos.core.ArmorR118ny7:specialny12:specialFlagszy2:ppzy10:burdinadinny3:AVBi3y3:AVPi3y3:AVCi4R119i1R120zR121i6R122zR123zR50R37R26y32:Hardened%20Leather%20Knee-Guardsy8:coverageoR17zggR125zR126zR127R37goR77i13R76fR143cR144R118nR145nR146i2R147zR149i4R150i5R151i6R119i1R120i1R121i15R122zR123i2R50R37R26y11:Iron%20HelmR153oR6zR8zR9i2R10i2ggR125zR126zR127R37goR77i15R76fR143cR144R118nR145cy28:troshx.sos.core.ArmorSpecialy13:otherBodyTypeny11:hitModifierny8:wornWithny13:layerCoveragezy5:layerzy18:restrictsBreathingi2gR146i3R147i1R148nR149i4R150i5R151i6R119i1R120i1R121i10R122zR123d1.5R50R37R26y12:Full%20VisorR153oR7i1ggR125zR126zR127R37goR77i35R76fR143cR144R118nR145nR146i2R147zR148nR149i4R150i5R151i6R119i1R120zR121zR122zR123i2R50R37R26y20:Iron%20Shin%20GuardsR153oR18zggR125zR126zR127R37goR77i36R76fR143cR144R118nR145nR146zR147zR148nR149i2R150i1R151i2R119i1R120zR121zR122zR123zR50R37R26y16:Cloth%20BindingsR153oR18zR22zR15i2R17zggR125zR126zR127R37goR77i37R76fR143cR144R118nR145nR146zR147zR148nR149i2R150i2R151i3R119i1R120zR121zR122zR123zR50R37R26y17:Leather%20BalteusR153oR13zggR125zR126zR127R37goR77i38R76fR143cR144R118nR145nR146i2R147zR148nR149i4R150i5R151i6R119i1R120zR121zR122zR123d1.5R50R37R26y22:(Half)%20Iron%20ManicaR153oR20i1R22i1R10i3R21i1ggR125zR126zR127R37ghy8:dropPackfy6:packedcy22:troshx.ds.IDMatchArrayy4:listahgy7:droppedcR169R170ahgy8:signalerngy7:arcFlawR37y8:arcGloryR37y9:arcBeliefR37y7:arcEpicR37y7:arcSagaR37y8:arcSpentzy14:arcPointsAccumzy5:banescy21:troshx.ds.HashedArrayy4:hashogR170ahgy5:boonscR181R182oy19:Hale%20and%20Heartycy26:troshx.sos.core.BoonAssigny12:_minRequiredi1y9:_canceledfy15:_forcePermanentfy8:discounti2y4:booncy28:troshx.sos.bnb.HaleAndHeartyR26R184y5:costsai2i4hR122zy9:clampRankfy13:multipleTimeszy8:channelszy13:superChannelszgy4:ranki1y11:_costCachedi2y16:_remainingCachedi999ggR170ar125hgy8:direPastfy7:talentsahy6:skillscy26:troshx.sos.core.SkillTabley9:skillHashoy9:Athleticsi4y5:Drilli4y7:Tacticsi2gy15:requiresTrainedoy8:Craftingty11:Engineeringty7:Historyty10:Navigationty8:SwimmingtR207ty8:Strategyty9:Etiquettetgy22:requiresSpecialisationoy10:Professionty9:KnowledgetR209ty11:Performancetggy22:wealthAssetAssignCountzy12:wealthAssetsahy11:socialClasscy27:troshx.sos.core.SocialClassy11:wealthIndexi1y10:classIndexi1R26y7:Peasanty5:moneycy21:troshx.sos.core.Moneyy2:cpzy2:spzy2:gpi5gy6:wealthzgR227cR228R229zR230i15R231i2gy24:situationalModifierTableaahahahahahahahahahahahahahahahahahahahahahhy19:staticModifierTableaahahahahahahahahahahahahahahahahahahahahacy30:troshx.sos.core.StaticModifierR26y16:Warrior's%20Grity5:indexi20y8:multiplyi1y3:addi2ghhy6:ingamety7:fatiquezy11:talentNotesaR37R37R37hy20:masteryManueverNotesahy21:superiorManueverNotesaR37R37hR116ny11:profsRangedi16y10:profsMeleei511y11:schoolLeveli8y13:schoolBonusescy33:troshx.sos.schools.SoldierBonusesgy6:schoolcy26:troshx.sos.schools.Soldiery9:costMoneynR26y7:Soldiery9:profLimiti10y7:costArci1y15:staticModifiersr182gy9:gritAccumzy5:pronefy10:healthLosszR73i2y10:perceptioni4y12:intelligencei2y3:witi4y9:willpoweri4y6:healthi4y9:endurancei5y7:agilityi8y8:strengthi8y3:agei-1y10:leftHandedfy6:genderzy4:racecy22:troshx.sos.races.HumanR26y5:Humany5:magicfgy5:titleR37y5:notesR37y7:factionR37y8:nicknameR37R26y8:Murmillog","8.5/13 S CP:14"),new troshx_core_CharSave("Secutor","cy27:troshx.sos.sheets.CharSheety9:woundHashogy6:woundsahy4:bodycy24:troshx.sos.core.BodyChary15:hitLocationHashoy9:upperHeadzy4:facei1y9:lowerHeadi2y4:necki3y8:shoulderi4y5:chesti5y4:sidei6y5:bellyi7y3:hipi8y5:groini9y5:thighi10y4:kneei11y4:shini12y4:footi13y8:upperArmi14y5:elbowi15y7:forearmi16y4:handi17y9:upperBacki18y9:lowerBacki19gy4:namey8:Humanoidy11:targetZonesacy26:troshx.sos.core.TargetZoney11:descriptiony16:Downward%20Swingy12:weightsTotali10R26y4:Heady5:partsai4i2i1zhy11:partWeightsai3i2i2i3hgcR29R30y14:Upward%20SwingR32i10R26R33R34ai5i3i2i1hR35ai3i2i3i2hgcR29R30y0:R32i10R26y4:NeckR34ai4i3i2i1hR35ai3i3i2i2hgcR29R30R37R32i10R26y5:TorsoR34ai7i6i5hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20ArmR34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20ArmR34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20LegR34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20LegR34ai13i12i11hR35ai3i4i3hgcR29R30R37R32i10R26y5:GroinR34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R33R34ai3i1zhR35ai3i4i3hgcR29R30R37R32i10R26R38R34ai5i3i1hR35ai3i4i3hgcR29R30R37R32i10R26y5:ChestR34ai7i5i4i3hR35ai3i4i2i1hgcR29R30R37R32i10R26y5:BellyR34ai9i8i6i7hR35ai1i1i5i3hgcR29R30R37R32i10R26R40R34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26R41R34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26R44R34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R42R34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26R43R34ai13i12i11hR35ai3i4i3hghy12:hitLocationsacy27:troshx.sos.core.HitLocationR26y12:Upper%20Heady2:idR6y8:twoSidedfgcR48R26y4:FaceR50R7R51fgcR48R26y12:Lower%20HeadR50R8R51fgcR48R26R38R50R9R51fgcR48R26y8:ShoulderR50R10R51tgcR48R26R45R50R11R51fgcR48R26y4:SideR50R12R51tgcR48R26R46R50R13R51fgcR48R26y3:HipR50R14R51tgcR48R26R44R50R15R51fgcR48R26y5:ThighR50R16R51tgcR48R26y4:KneeR50R17R51tgcR48R26y4:ShinR50R18R51tgcR48R26y4:FootR50R19R51tgcR48R26R40R50R20R51tgcR48R26y5:ElbowR50R21R51tgcR48R26y7:ForearmR50R22R51tgcR48R26y4:HandR50R23R51tgcR48R26y12:Upper%20BackR50R24R51fgcR48R26y12:Lower%20BackR50R25R51fghy16:thrustStartIndexi9y14:rearStartIndexi18y19:missileHitLocationsai-1i9i11i11i12i15i13i14i16i17hy10:thrustMaski261632y9:swingMaski511gy9:inventorycy25:troshx.sos.core.Inventoryy7:versioni3y14:shieldPositionzy7:weaponsaoy8:attachedfy3:keyi17y6:weaponcy22:troshx.sos.core.Weapony6:isAmmofy7:firearmny8:crossbowny11:requiredStrzy11:stuckChancezy14:missileSpecialny12:missileFlagszy11:damageTypeMi1y7:damageMzy4:atnMzy5:rangezy12:meleeSpecialcy28:troshx.sos.core.MeleeSpecialy6:customny12:spatulateTipi2y5:shockzy10:multiHit_Yzy8:multiHitzy4:drawzy8:crushingzy5:chainzy5:bleedzy8:APThrustzy7:APSwingzgy10:meleeFlagsi1024y5:guardzy3:dtni7y11:damageTypeTi1y11:damageTypeSzy7:damageTi1y7:damageSi-1y4:atnTi6y4:atnSi7y7:variantny5:reachi2y6:rangedfy11:profsCustomny5:profsi64y9:customiseny4:uniti1y12:costCurrencyzy4:costi6y5:flagszy6:weightzR50R37R26y5:Pugiogy4:heldzy6:unheldzy12:unheldRemarkR37y9:holding1HfgoR76fR77i18R78cR79R80fR81nR82nR83zR84zR85nR86zR87i1R88zR89zR90zR91nR104zR105zR106i7R107i1R108zR109i1R110i1R111i7R112i7R113nR114i3R115fR116nR117i1R118nR119i1R120i1R121i1R122zR123zR50R37R26y7:GladiusgR125y1:1R126zR127R37R128fghy7:shieldsaoR77i12R76fy6:shieldcy22:troshx.sos.core.Shieldy9:strapTypezy10:durabilityi6y6:bashTNzy7:blockTNi7y4:sizei2y2:AVi6R119i1R120i1R121i5R122zR123i2R50R37R26y25:Scutum%3A%206(%2B1b)%2012gR125zR126zR127R37ghy20:equipedNonMeleeItemsahy9:wornArmoraoR77i7R76fy5:armorcy21:troshx.sos.core.ArmorR118ny7:specialny12:specialFlagszy2:ppzy10:burdinadinny3:AVBi3y3:AVPi3y3:AVCi4R119i1R120zR121i6R122zR123zR50R37R26y32:Hardened%20Leather%20Knee-Guardsy8:coverageoR17zggR125zR126zR127R37goR77i13R76fR143cR144R118nR145nR146i2R147zR149i4R150i5R151i6R119i1R120i1R121i15R122zR123i2R50R37R26y11:Iron%20HelmR153oR6zR8zR9i2R10i2ggR125zR126zR127R37goR77i15R76fR143cR144R118nR145cy28:troshx.sos.core.ArmorSpecialy13:otherBodyTypeny11:hitModifierny8:wornWithny13:layerCoveragezy5:layerzy18:restrictsBreathingi2gR146i3R147i1R148nR149i4R150i5R151i6R119i1R120i1R121i10R122zR123d1.5R50R37R26y12:Full%20VisorR153oR7i1ggR125zR126zR127R37goR77i35R76fR143cR144R118nR145nR146i2R147zR148nR149i4R150i5R151i6R119i1R120zR121zR122zR123i2R50R37R26y20:Iron%20Shin%20GuardsR153oR18zggR125zR126zR127R37goR77i36R76fR143cR144R118nR145nR146zR147zR148nR149i2R150i1R151i2R119i1R120zR121zR122zR123zR50R37R26y16:Cloth%20BindingsR153oR18zR22zR15i2R17zggR125zR126zR127R37goR77i37R76fR143cR144R118nR145nR146zR147zR148nR149i2R150i2R151i3R119i1R120zR121zR122zR123zR50R37R26y17:Leather%20BalteusR153oR13zggR125zR126zR127R37goR77i38R76fR143cR144R118nR145nR146i2R147zR148nR149i4R150i5R151i6R119i1R120zR121zR122zR123d1.5R50R37R26y22:(Half)%20Iron%20ManicaR153oR20i1R22i1R10i3R21i1ggR125zR126zR127R37ghy8:dropPackfy6:packedcy22:troshx.ds.IDMatchArrayy4:listahgy7:droppedcR169R170ahgy8:signalerngy7:arcFlawR37y8:arcGloryR37y9:arcBeliefR37y7:arcEpicR37y7:arcSagaR37y8:arcSpentzy14:arcPointsAccumzy5:banescy21:troshx.ds.HashedArrayy4:hashogR170ahgy5:boonscR181R182oy19:Hale%20and%20Heartycy26:troshx.sos.core.BoonAssigny12:_minRequiredi1y9:_canceledfy15:_forcePermanentfy8:discounti2y4:booncy28:troshx.sos.bnb.HaleAndHeartyR26R184y5:costsai2i4hR122zy9:clampRankfy13:multipleTimeszy8:channelszy13:superChannelszgy4:ranki1y11:_costCachedi2y16:_remainingCachedi999ggR170ar125hgy8:direPastfy7:talentsahy6:skillscy26:troshx.sos.core.SkillTabley9:skillHashoy9:Athleticsi4y5:Drilli4y7:Tacticsi2gy15:requiresTrainedoy8:Craftingty11:Engineeringty7:Historyty10:Navigationty8:SwimmingtR207ty8:Strategyty9:Etiquettetgy22:requiresSpecialisationoy10:Professionty9:KnowledgetR209ty11:Performancetggy22:wealthAssetAssignCountzy12:wealthAssetsahy11:socialClasscy27:troshx.sos.core.SocialClassy11:wealthIndexi1y10:classIndexi1R26y7:Peasanty5:moneycy21:troshx.sos.core.Moneyy2:cpzy2:spzy2:gpi5gy6:wealthzgR227cR228R229zR230i8R231i2gy24:situationalModifierTableaahahahahahahahahahahahahahahahahahahahahahhy19:staticModifierTableaahahahahahahahahahahahahahahahahahahahahacy30:troshx.sos.core.StaticModifierR26y16:Warrior's%20Grity5:indexi20y8:multiplyi1y3:addi2ghhy6:ingamety7:fatiquezy11:talentNotesaR37R37R37hy20:masteryManueverNotesahy21:superiorManueverNotesaR37R37R37hR116ny11:profsRangedi16y10:profsMeleei511y11:schoolLeveli9y13:schoolBonusescy33:troshx.sos.schools.SoldierBonusesgy6:schoolcy26:troshx.sos.schools.Soldiery9:costMoneynR26y7:Soldiery9:profLimiti10y7:costArci1y15:staticModifiersr182gy9:gritAccumzy5:pronefy10:healthLosszR73i2y10:perceptioni5y12:intelligencei2y3:witi4y9:willpoweri4y6:healthi4y9:endurancei8y7:agilityi6y8:strengthi6y3:agei-1y10:leftHandedfy6:genderzy4:racecy22:troshx.sos.races.HumanR26y5:Humany5:magicfgy5:titleR37y5:notesR37y7:factionR37y8:nicknameR37R26y7:Secutorg","8.5/13 VL CP:14"),new troshx_core_CharSave("Anglian Huscarl","cy27:troshx.sos.sheets.CharSheety9:woundHashogy6:woundsahy4:bodycy24:troshx.sos.core.BodyChary15:hitLocationHashoy9:upperHeadzy4:facei1y9:lowerHeadi2y4:necki3y8:shoulderi4y5:chesti5y4:sidei6y5:bellyi7y3:hipi8y5:groini9y5:thighi10y4:kneei11y4:shini12y4:footi13y8:upperArmi14y5:elbowi15y7:forearmi16y4:handi17y9:upperBacki18y9:lowerBacki19gy4:namey8:Humanoidy11:targetZonesacy26:troshx.sos.core.TargetZoney11:descriptiony16:Downward%20Swingy12:weightsTotali10R26y4:Heady5:partsai4i2i1zhy11:partWeightsai3i2i2i3hgcR29R30y14:Upward%20SwingR32i10R26R33R34ai5i3i2i1hR35ai3i2i3i2hgcR29R30y0:R32i10R26y4:NeckR34ai4i3i2i1hR35ai3i3i2i2hgcR29R30R37R32i10R26y5:TorsoR34ai7i6i5hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20ArmR34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20ArmR34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20LegR34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20LegR34ai13i12i11hR35ai3i4i3hgcR29R30R37R32i10R26y5:GroinR34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R33R34ai3i1zhR35ai3i4i3hgcR29R30R37R32i10R26R38R34ai5i3i1hR35ai3i4i3hgcR29R30R37R32i10R26y5:ChestR34ai7i5i4i3hR35ai3i4i2i1hgcR29R30R37R32i10R26y5:BellyR34ai9i8i6i7hR35ai1i1i5i3hgcR29R30R37R32i10R26R40R34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26R41R34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26R44R34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R42R34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26R43R34ai13i12i11hR35ai3i4i3hghy12:hitLocationsacy27:troshx.sos.core.HitLocationR26y12:Upper%20Heady2:idR6y8:twoSidedfgcR48R26y4:FaceR50R7R51fgcR48R26y12:Lower%20HeadR50R8R51fgcR48R26R38R50R9R51fgcR48R26y8:ShoulderR50R10R51tgcR48R26R45R50R11R51fgcR48R26y4:SideR50R12R51tgcR48R26R46R50R13R51fgcR48R26y3:HipR50R14R51tgcR48R26R44R50R15R51fgcR48R26y5:ThighR50R16R51tgcR48R26y4:KneeR50R17R51tgcR48R26y4:ShinR50R18R51tgcR48R26y4:FootR50R19R51tgcR48R26R40R50R20R51tgcR48R26y5:ElbowR50R21R51tgcR48R26y7:ForearmR50R22R51tgcR48R26y4:HandR50R23R51tgcR48R26y12:Upper%20BackR50R24R51fgcR48R26y12:Lower%20BackR50R25R51fghy16:thrustStartIndexi9y14:rearStartIndexi18y19:missileHitLocationsai-1i9i11i11i12i15i13i14i16i17hy10:thrustMaski261632y9:swingMaski511gy9:inventorycy25:troshx.sos.core.Inventoryy7:versioni3y14:shieldPositionzy7:weaponsaoy8:attachedfy3:keyi24y6:weaponcy22:troshx.sos.core.Weapony6:isAmmofy7:firearmny8:crossbowny11:requiredStrzy11:stuckChancezy14:missileSpecialny12:missileFlagszy11:damageTypeMi1y7:damageMzy4:atnMzy5:rangezy12:meleeSpecialcy28:troshx.sos.core.MeleeSpecialy6:customny12:spatulateTipi1y5:shockzy10:multiHit_Yzy8:multiHitzy4:drawzy8:crushingzy5:chainzy5:bleedzy8:APThrustzy7:APSwingzgy10:meleeFlagszy5:guardi1y3:dtni7y11:damageTypeTi1y11:damageTypeSzy7:damageTzy7:damageSi1y4:atnTi7y4:atnSi7y7:variantny5:reachi4y6:rangedfy11:profsCustomny5:profsi1y9:customiseny4:uniti1y12:costCurrencyi2y4:costi1y5:flagszy6:weightd0.5R50R37R26y24:Arming%20Sword%20(Early)gy4:heldzy6:unheldzy12:unheldRemarkR37y9:holding1HfgoR76fR77i36R78cR79R80fR81nR82nR83zR84zR85nR86zR87i1R88zR89zR90zR91cR92R93nR94i2R95zR96zR97zR98zR99zR100zR101zR102zR103zgR104i1024R105zR106i7R107i1R108zR109i1R110i-1R111i6R112i7R113nR114i2R115fR116nR117i64R118nR119i1R120zR121i6R122zR123zR50R37R26y5:PugiogR125zR126zR127R37R128fghy7:shieldsaoR77i23R76fy6:shieldcy22:troshx.sos.core.Shieldy9:strapTypezy10:durabilityi6y6:bashTNzy7:blockTNi6y4:sizezy2:AVi6R119i1R120zR121i10R122zR123zR50R37R26y33:Wooden%20Targe%20%3A7(%2B0b)%2010gR125zR126zR127R37ghy20:equipedNonMeleeItemsahy9:wornArmoraoR77i15R76fy5:armorcy21:troshx.sos.core.ArmorR118ny7:specialny12:specialFlagszy2:ppzy10:burdinadinny3:AVBi2y3:AVPi2y3:AVCi3R119i1R120i1R121i2R122zR123zR50R37R26y18:Leather%20Leggingsy8:coverageoR15zR14zR16zR17zR18zggR125zR126zR127R37goR77i16R76fR142cR143R118nR144cy28:troshx.sos.core.ArmorSpecialy13:otherBodyTypeny11:hitModifierny8:wornWithny13:layerCoveragezy5:layeri1y18:restrictsBreathingzgR145i6R146zR147nR148i3R149i4R150i6R119i1R120i1R121i3R122zR123i1R50R37R26y12:Mail%20BootsR152oR19zggR125zR126zR127R37goR77i17R76fR142cR143R118nR144cR153R154nR155nR156nR157zR158i1R159zgR145i6R146zR147nR148i3R149i4R150i6R119i1R120i2R121i2R122zR123d2.5R50R37R26y11:Mail%20CoatR152oR11zR12zR13zR24zR25zR14zR16zR17zR10zR15zggR125zR126zR127R37goR77i18R76fR142cR143R118nR144cR153R154nR155nR156nR157zR158i1R159zgR145i6R146zR147nR148i3R149i4R150i6R119i1R120i1R121i3R122zR123d0.5R50R37R26y23:Mail%20Gloves%2FMittensR152oR23zggR125zR126zR127R37goR77i19R76fR142cR143R118nR144cR153R154nR155nR156nR157zR158i1R159zgR145i2R146zR147nR148i3R149i4R150i6R119i1R120i2R121i1R122zR123d1.5R50R37R26y21:Mail%20Long%20SleevesR152oR22zR21zR20zR10zggR125zR126zR127R37goR77i21R76fR142cR143R118nR144nR145i8R146zR147nR148i4R149i3R150i2R119i1R120zR121i17R122zR123d0.5R50R37R26y14:Quilted%20CoatR152oR11zR13zR12zR24zR25zR10zR17zR16zR14zR15zggR125zR126zR127R37goR77i22R76fR142cR143R118nR144nR145i8R146zR147nR148i4R149i3R150i2R119i1R120zR121i6R122zR123zR50R37R26y24:Quilted%20Long%20SleevesR152oR21zR22zR20zR10zggR125zR126zR127R37goR77i33R76fR142cR143R118nR144cR153R154nR155cy27:troshx.sos.core.HitModifiery5:addAVzy10:multiplyAVzy14:targetZoneMaski2y12:locationMaskzgR156nR157zR158zR159zgR145i2R146zR147nR148i1R149i2R150i4R119i1R120i1R121i1R122zR123zR50R37R26y9:Bar-NaselR152oR7i1ggR125zR126zR127R37goR77i34R76fR142cR143R118nR144cR153R154nR155nR156nR157zR158i1R159zgR145i6R146zR147nR148i3R149i4R150i6R119i1R120i1R121i2R122zR123i1R50R37R26y11:Mail%20CoifR152oR8zR9zR6zggR125zR126zR127R37goR77i35R76fR142cR143R118nR144cR153R154nR155cR166R167i2R168i1R169i1R170zgR156nR157zR158zR159zgR145i2R146zR148i6R149i7R150i8R119i1R120i1R121i2R122zR123i2R50R37R26y14:Conical%20HelmR152oR6zggR125zR126zR127R37ghy8:dropPackfy6:packedcy22:troshx.ds.IDMatchArrayy4:listahgy7:droppedcR176R177ahgy8:signalerngy7:arcFlawR37y8:arcGloryR37y9:arcBeliefR37y7:arcEpicR37y7:arcSagaR37y8:arcSpentzy14:arcPointsAccumzy5:banescy21:troshx.ds.HashedArrayy4:hashoy11:Old%20Woundcy29:troshx.sos.bnb.OldWoundAssigny15:__hasUIFields__ty9:permaMaskzR47i8281y12:_minRequiredzy9:_canceledfy15:_forcePermanentfy8:discountzy4:charr0y4:banecy23:troshx.sos.bnb.OldWoundR26R190y5:costsai1hR122i2y9:clampRankfy13:multipleTimesi-2y8:channelszy13:superChannelszy6:isBanetgy4:ranki1y11:_costCachedi5ggR177ar140hgy5:boonscR188R189oy19:Hale%20and%20Heartycy26:troshx.sos.core.BoonAssignR194i1R195fR196fR197i2y4:booncy28:troshx.sos.bnb.HaleAndHeartyR26R210R201ai2i4hR122zR202fR203zR204zR205zgR207i1R208i2y16:_remainingCachedi999ggR177ar146hgy8:direPastfy7:talentsahy6:skillscy26:troshx.sos.core.SkillTabley9:skillHashoy9:Athleticsi3y5:Drilli4y10:Navigationi1y11:Observationi1y7:Stealthi1y7:Tacticsi2gy15:requiresTrainedoy8:Craftingty11:Engineeringty7:HistorytR222ty8:SwimmingtR225ty8:Strategyty9:Etiquettetgy22:requiresSpecialisationoy10:Professionty9:KnowledgetR227ty11:Performancetggy22:wealthAssetAssignCountzy12:wealthAssetsahy11:socialClasscy27:troshx.sos.core.SocialClassy11:wealthIndexi1y10:classIndexi1R26y7:Peasanty5:moneycy21:troshx.sos.core.Moneyy2:cpzy2:spzy2:gpi5gy6:wealthzgR244cR245R246i9R247i3R248zgy24:situationalModifierTableaahahahahahahahahahahahahahahahahahahahahahhy19:staticModifierTableaahahahahahahahahahahahahahahahahahahahahacy30:troshx.sos.core.StaticModifierR26y16:Warrior's%20Grity5:indexi20y8:multiplyi1y3:addi2ghhy6:ingamety7:fatiquezy11:talentNotesay20:Shield%20Tactics%201R37R37hy20:masteryManueverNotesahy21:superiorManueverNotesay3:Hewy5:FeinthR116ny11:profsRangedi16y10:profsMeleei511y11:schoolLeveli8y13:schoolBonusescy33:troshx.sos.schools.SoldierBonusesgy6:schoolcy26:troshx.sos.schools.Soldiery9:costMoneynR26y7:Soldiery9:profLimiti10y7:costArci1y15:staticModifiersr203gy9:gritAccumzy5:pronefy10:healthLosszR73i2y10:perceptioni4y12:intelligencei3y3:witi6y9:willpoweri6y6:healthi5y9:endurancei5y7:agilityi7y8:strengthi7y3:agei-1y10:leftHandedfy6:genderzy4:racecy22:troshx.sos.races.HumanR26y5:Humany5:magicfgy5:titleR37y5:notesR37y7:factionR37y8:nicknameR37R26y17:Anglian%20Huscarlg","9.5/12 M CP:14*"),new troshx_core_CharSave("Crupellarius","cy27:troshx.sos.sheets.CharSheety9:woundHashogy6:woundsahy4:bodycy24:troshx.sos.core.BodyChary15:hitLocationHashoy9:upperHeadzy4:facei1y9:lowerHeadi2y4:necki3y8:shoulderi4y5:chesti5y4:sidei6y5:bellyi7y3:hipi8y5:groini9y5:thighi10y4:kneei11y4:shini12y4:footi13y8:upperArmi14y5:elbowi15y7:forearmi16y4:handi17y9:upperBacki18y9:lowerBacki19gy4:namey8:Humanoidy11:targetZonesacy26:troshx.sos.core.TargetZoney11:descriptiony16:Downward%20Swingy12:weightsTotali10R26y4:Heady5:partsai4i2i1zhy11:partWeightsai3i2i2i3hgcR29R30y14:Upward%20SwingR32i10R26R33R34ai5i3i2i1hR35ai3i2i3i2hgcR29R30y0:R32i10R26y4:NeckR34ai4i3i2i1hR35ai3i3i2i2hgcR29R30R37R32i10R26y5:TorsoR34ai7i6i5hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20ArmR34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20ArmR34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26y11:Upper%20LegR34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26y11:Lower%20LegR34ai13i12i11hR35ai3i4i3hgcR29R30R37R32i10R26y5:GroinR34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R33R34ai3i1zhR35ai3i4i3hgcR29R30R37R32i10R26R38R34ai5i3i1hR35ai3i4i3hgcR29R30R37R32i10R26y5:ChestR34ai7i5i4i3hR35ai3i4i2i1hgcR29R30R37R32i10R26y5:BellyR34ai9i8i6i7hR35ai1i1i5i3hgcR29R30R37R32i10R26R40R34ai15i14i4hR35ai3i4i3hgcR29R30R37R32i10R26R41R34ai17i16i15hR35ai3i4i3hgcR29R30R37R32i10R26R44R34ai10i9i7hR35ai3i4i3hgcR29R30R37R32i10R26R42R34ai11i10i8hR35ai3i4i3hgcR29R30R37R32i10R26R43R34ai13i12i11hR35ai3i4i3hghy12:hitLocationsacy27:troshx.sos.core.HitLocationR26y12:Upper%20Heady2:idR6y8:twoSidedfgcR48R26y4:FaceR50R7R51fgcR48R26y12:Lower%20HeadR50R8R51fgcR48R26R38R50R9R51fgcR48R26y8:ShoulderR50R10R51tgcR48R26R45R50R11R51fgcR48R26y4:SideR50R12R51tgcR48R26R46R50R13R51fgcR48R26y3:HipR50R14R51tgcR48R26R44R50R15R51fgcR48R26y5:ThighR50R16R51tgcR48R26y4:KneeR50R17R51tgcR48R26y4:ShinR50R18R51tgcR48R26y4:FootR50R19R51tgcR48R26R40R50R20R51tgcR48R26y5:ElbowR50R21R51tgcR48R26y7:ForearmR50R22R51tgcR48R26y4:HandR50R23R51tgcR48R26y12:Upper%20BackR50R24R51fgcR48R26y12:Lower%20BackR50R25R51fghy16:thrustStartIndexi9y14:rearStartIndexi18y19:missileHitLocationsai-1i9i11i11i12i15i13i14i16i17hy10:thrustMaski261632y9:swingMaski511gy9:inventorycy25:troshx.sos.core.Inventoryy7:versioni3y14:shieldPositionzy7:weaponsaoy8:attachedfy3:keyi40y6:weaponcy22:troshx.sos.core.Weapony6:isAmmofy7:firearmny8:crossbowny11:requiredStrzy11:stuckChancezy14:missileSpecialny12:missileFlagszy11:damageTypeMi1y7:damageMzy4:atnMzy5:rangezy12:meleeSpecialny10:meleeFlagszy5:guardzy3:dtni7y11:damageTypeTi1y11:damageTypeSzy7:damageTi1y7:damageSi1y4:atnTi7y4:atnSi7y7:variantny5:reachi3y6:rangedfy11:profsCustomny5:profsi1y9:customiseny4:uniti1y12:costCurrencyi1y4:costi1y5:flagszy6:weightzR50R37R26y7:Gladiusgy4:heldzy6:unheldzy12:unheldRemarkR37y9:holding1HfgoR76fR77i42R78cR79R80fR81nR82nR83zR84zR85nR86zR87i1R88zR89zR90zR91cy28:troshx.sos.core.MeleeSpecialy6:customny12:spatulateTipi2y5:shockzy10:multiHit_Yzy8:multiHitzy4:drawzy8:crushingzy5:chainzy5:bleedzy8:APThrustzy7:APSwingzgR92i1024R93zR94i7R95i1R96zR97i1R98i-1R99i6R100i7R101nR102i2R103fR104nR105i64R106nR107i1R108zR109i6R110zR111zR50R37R26y5:PugiogR113zR114zR115R37R116fghy7:shieldsaoR77i26R76fy6:shieldcy22:troshx.sos.core.Shieldy9:strapTypezy10:durabilityi6y6:bashTNzy7:blockTNi7y4:sizei2y2:AVi6R107i1R108i1R109i5R110zR111i2R50R37R26y25:Scutum%20%3A6(%2B1b)%2012gR113zR114zR115R37ghy20:equipedNonMeleeItemsahy9:wornArmoraoR77i11R76fy5:armorcy21:troshx.sos.core.ArmorR106ny7:specialcy28:troshx.sos.core.ArmorSpecialy13:otherBodyTypeny11:hitModifiercy27:troshx.sos.core.HitModifiery5:addAVzy10:multiplyAVi1y14:targetZoneMaskzy12:locationMaskzgy8:wornWithny13:layerCoveragezy5:layerzy18:restrictsBreathingi3gy12:specialFlagsi2y2:ppi3y3:AVBi4y3:AVPi5y3:AVCi6R107i1R108i1R109i30R110zR111i5R50R37R26y13:Bucket%20Helmy8:coverageoR6zR7i1R8zR9i1ggR113zR114zR115R37goR77i19R76fR142cR143R106nR144nR157i2R158zy10:burdinadinnR159i4R160i5R161i6R107i1R108i1R109i12R110zR111i3R50R37R26y26:Iron%20Segmented%20TassetsR163oR15zR14zR16i2ggR113zR114zR115R37goR77i23R76fR142cR143R106nR144nR157i2R158zR164nR159i4R160i5R161i6R107i1R108zR109zR110zR111i3R50R37R26y19:Lorica%20segmentataR163oR25i1R24i1R11i1R10i1R13i1R12i1ggR113zR114zR115R37goR77i25R76fR142cR143R106nR144nR157zR158zR164nR159i2R160i2R161i3R107i1R108zR109zR110zR111zR50R37R26y18:Leather%20CingulumR163oR16i2R13zggR113zR114zR115R37goR77i26R76fR142cR143R106nR144nR157i2R158zR164nR159i4R160i5R161i6R107i1R108zR109zR110zR111i3R50R37R26y14:Iron%20GreevesR163oR17i1R18i1ggR113zR114zR115R37goR77i27R76fR142cR143R106nR144nR157zR158zR164nR159i2R160i1R161i2R107i1R108zR109zR110zR111zR50R37R26y16:Cloth%20BindingsR163oR18zR22zR13i2R15i2R17zggR113zR114zR115R37goR77i28R76fR142cR143R106nR144nR157i2R158zR164nR159i4R160i5R161i6R107i1R108zR109zR110zR111i3R50R37R26y13:Iron%20ManicaR163oR20i1R22i1R10i3R21i1ggR113zR114zR115R37ghy8:dropPackfy6:packedcy22:troshx.ds.IDMatchArrayy4:listahgy7:droppedcR173R174ahgy8:signalerngy7:arcFlawR37y8:arcGloryR37y9:arcBeliefR37y7:arcEpicR37y7:arcSagaR37y8:arcSpentzy14:arcPointsAccumzy5:banescy21:troshx.ds.HashedArrayy4:hashogR174ahgy5:boonscR185R186oy19:Hale%20and%20Heartycy26:troshx.sos.core.BoonAssigny12:_minRequiredi1y9:_canceledfy15:_forcePermanentfy8:discounti2y4:booncy28:troshx.sos.bnb.HaleAndHeartyR26R188y5:costsai2i4hR110zy9:clampRankfy13:multipleTimeszy8:channelszy13:superChannelszgy4:ranki1y11:_costCachedi2y16:_remainingCachedi999ggR174ar126hgy8:direPastfy7:talentsahy6:skillscy26:troshx.sos.core.SkillTabley9:skillHashoy9:Athleticsi5y8:Climbingi1y5:Drilli2y8:Swimmingi1y7:Tacticsi1gy15:requiresTrainedoy8:Craftingty11:Engineeringty7:Historyty10:NavigationtR212tR213ty8:Strategyty9:Etiquettetgy22:requiresSpecialisationoy10:Professionty9:KnowledgetR215ty11:Performancetggy22:wealthAssetAssignCountzy12:wealthAssetsahy11:socialClasscy27:troshx.sos.core.SocialClassy11:wealthIndexi1y10:classIndexi1R26y7:Peasanty5:moneycy21:troshx.sos.core.Moneyy2:cpzy2:spzy2:gpi5gy6:wealthzgR232cR233R234zR235i7R236zgy24:situationalModifierTableaahahahahahahahahahahahahahahahahahahahahahhy19:staticModifierTableaahahahahahahahahahahahahahahahahahahahahacy30:troshx.sos.core.StaticModifierR26y16:Warrior's%20Grity5:indexi20y8:multiplyi1y3:addi2ghhy6:ingamety7:fatiquezy11:talentNotesaR37R37R37hy20:masteryManueverNotesahy21:superiorManueverNotesaR37R37hR104ny11:profsRangedi17y10:profsMeleei507y11:schoolLeveli8y13:schoolBonusescy33:troshx.sos.schools.SoldierBonusesgy6:schoolcy26:troshx.sos.schools.Soldiery9:costMoneynR26y7:Soldiery9:profLimiti10y7:costArci1y15:staticModifiersr183gy9:gritAccumzy5:pronefy10:healthLosszR73i2y10:perceptioni6y12:intelligencei2y3:witi5y9:willpoweri2y6:healthi4y9:endurancei7y7:agilityi6y8:strengthi7y3:agei-1y10:leftHandedfy6:genderzy4:racecy22:troshx.sos.races.HumanR26y5:Humany5:magicfgy5:titleR37y5:notesR37y7:factionR37y8:nicknameR37R26y12:Crupellariusg","19/14 S CP:12-")];
};
troshx_sos_pregens_FightCharacters.prototype = {
	__class__: troshx_sos_pregens_FightCharacters
};
var troshx_sos_races_Races = function() { };
$hxClasses["troshx.sos.races.Races"] = troshx_sos_races_Races;
troshx_sos_races_Races.__name__ = ["troshx","sos","races","Races"];
troshx_sos_races_Races.getTiers = function() {
	if(troshx_sos_races_Races.TIERS != null) {
		return troshx_sos_races_Races.TIERS;
	} else {
		return troshx_sos_races_Races.TIERS = troshx_sos_races_Races.getNewTiers();
	}
};
troshx_sos_races_Races.getNewTiers = function() {
	return [[new troshx_sos_races_Human(),new troshx_sos_races_Goblin()],[new troshx_sos_races_Dwarf(),new troshx_sos_races_Zell()],[new troshx_sos_races_Burdinadin(),new troshx_sos_races_Ohanedin()],[new troshx_sos_races_Orredin()],[new troshx_sos_races_StarVampire(),new troshx_sos_races_SaturiChosen(),new troshx_sos_races_GenosianPaladin(),new troshx_sos_races_DessianSilverGuard()]];
};
var troshx_sos_races_Human = function() {
	troshx_sos_core_Race.call(this,"Human");
};
$hxClasses["troshx.sos.races.Human"] = troshx_sos_races_Human;
troshx_sos_races_Human.__name__ = ["troshx","sos","races","Human"];
troshx_sos_races_Human.__super__ = troshx_sos_core_Race;
troshx_sos_races_Human.prototype = $extend(troshx_sos_core_Race.prototype,{
	__class__: troshx_sos_races_Human
});
var troshx_sos_races_Goblin = function() {
	troshx_sos_core_Race.call(this,"Goblin");
	var _l_ = troshx_sos_core_StaticModifier.create(0,"Goblin",-1);
	this.staticModifiers = _l_;
	_l_ = _l_.next = troshx_sos_core_StaticModifier.create(1,"Goblin",1);
	_l_ = _l_.next = troshx_sos_core_StaticModifier.create(7,"Goblin",1);
	_l_ = _l_.next = troshx_sos_core_StaticModifier.create(9,"Small",-2);
	_l_ = _l_.next = troshx_sos_core_StaticModifier.create(14,"Small",-2);
};
$hxClasses["troshx.sos.races.Goblin"] = troshx_sos_races_Goblin;
troshx_sos_races_Goblin.__name__ = ["troshx","sos","races","Goblin"];
troshx_sos_races_Goblin.__super__ = troshx_sos_core_Race;
troshx_sos_races_Goblin.prototype = $extend(troshx_sos_core_Race.prototype,{
	__class__: troshx_sos_races_Goblin
});
var troshx_sos_races_Dwarf = function() {
	troshx_sos_core_Race.call(this,"Dwarf");
	var _l_ = troshx_sos_core_StaticModifier.create(2,"Dwarf",2);
	this.staticModifiers = _l_;
	_l_ = _l_.next = troshx_sos_core_StaticModifier.create(3,"Dwarf",1);
	_l_ = _l_.next = troshx_sos_core_StaticModifier.create(14,"Short and Stout",-1);
	_l_ = _l_.next = troshx_sos_core_StaticModifier.create(9,"Short and Stout",-2);
	_l_ = _l_.next = troshx_sos_core_StaticModifier.create(12,"Sturdy Build",1);
};
$hxClasses["troshx.sos.races.Dwarf"] = troshx_sos_races_Dwarf;
troshx_sos_races_Dwarf.__name__ = ["troshx","sos","races","Dwarf"];
troshx_sos_races_Dwarf.__super__ = troshx_sos_core_Race;
troshx_sos_races_Dwarf.prototype = $extend(troshx_sos_core_Race.prototype,{
	__class__: troshx_sos_races_Dwarf
});
var troshx_sos_races_Zell = function() {
	troshx_sos_core_Race.call(this,"Zell");
	var _l_ = troshx_sos_core_StaticModifier.create(1,"Zell",1);
	this.staticModifiers = _l_;
	_l_ = _l_.next = troshx_sos_core_StaticModifier.create(7,"Zell",2);
};
$hxClasses["troshx.sos.races.Zell"] = troshx_sos_races_Zell;
troshx_sos_races_Zell.__name__ = ["troshx","sos","races","Zell"];
troshx_sos_races_Zell.__super__ = troshx_sos_core_Race;
troshx_sos_races_Zell.prototype = $extend(troshx_sos_core_Race.prototype,{
	__class__: troshx_sos_races_Zell
});
var troshx_sos_races_Burdinadin = function() {
	troshx_sos_core_Race.call(this,"Burdinadin");
	var _l_ = troshx_sos_core_StaticModifier.create(6,"Burdinadin",1);
	this.staticModifiers = _l_;
	_l_ = _l_.next = troshx_sos_core_StaticModifier.create(1,"Burdinadin",1);
};
$hxClasses["troshx.sos.races.Burdinadin"] = troshx_sos_races_Burdinadin;
troshx_sos_races_Burdinadin.__name__ = ["troshx","sos","races","Burdinadin"];
troshx_sos_races_Burdinadin.__super__ = troshx_sos_core_Race;
troshx_sos_races_Burdinadin.prototype = $extend(troshx_sos_core_Race.prototype,{
	__class__: troshx_sos_races_Burdinadin
});
var troshx_sos_races_Ohanedin = function() {
	troshx_sos_core_Race.call(this,"Ohanedin");
	var _l_ = troshx_sos_core_StaticModifier.create(0,"Ohanedin",1);
	this.staticModifiers = _l_;
	_l_ = _l_.next = troshx_sos_core_StaticModifier.create(1,"Ohanedin",1);
	_l_ = _l_.next = troshx_sos_core_StaticModifier.create(7,"Ohanedin",1);
};
$hxClasses["troshx.sos.races.Ohanedin"] = troshx_sos_races_Ohanedin;
troshx_sos_races_Ohanedin.__name__ = ["troshx","sos","races","Ohanedin"];
troshx_sos_races_Ohanedin.__super__ = troshx_sos_core_Race;
troshx_sos_races_Ohanedin.prototype = $extend(troshx_sos_core_Race.prototype,{
	__class__: troshx_sos_races_Ohanedin
});
var troshx_sos_races_Orredin = function() {
	troshx_sos_core_Race.call(this,"Orredin");
	this.magic = true;
};
$hxClasses["troshx.sos.races.Orredin"] = troshx_sos_races_Orredin;
troshx_sos_races_Orredin.__name__ = ["troshx","sos","races","Orredin"];
troshx_sos_races_Orredin.__super__ = troshx_sos_core_Race;
troshx_sos_races_Orredin.prototype = $extend(troshx_sos_core_Race.prototype,{
	__class__: troshx_sos_races_Orredin
});
var troshx_sos_races_StarVampire = function() {
	troshx_sos_core_Race.call(this,"Star Vampire");
	this.magic = true;
};
$hxClasses["troshx.sos.races.StarVampire"] = troshx_sos_races_StarVampire;
troshx_sos_races_StarVampire.__name__ = ["troshx","sos","races","StarVampire"];
troshx_sos_races_StarVampire.__super__ = troshx_sos_core_Race;
troshx_sos_races_StarVampire.prototype = $extend(troshx_sos_core_Race.prototype,{
	__class__: troshx_sos_races_StarVampire
});
var troshx_sos_races_SaturiChosen = function() {
	troshx_sos_core_Race.call(this,"Saturi Chosen");
};
$hxClasses["troshx.sos.races.SaturiChosen"] = troshx_sos_races_SaturiChosen;
troshx_sos_races_SaturiChosen.__name__ = ["troshx","sos","races","SaturiChosen"];
troshx_sos_races_SaturiChosen.__super__ = troshx_sos_core_Race;
troshx_sos_races_SaturiChosen.prototype = $extend(troshx_sos_core_Race.prototype,{
	__class__: troshx_sos_races_SaturiChosen
});
var troshx_sos_races_GenosianPaladin = function() {
	troshx_sos_core_Race.call(this,"Genosian Paladin");
};
$hxClasses["troshx.sos.races.GenosianPaladin"] = troshx_sos_races_GenosianPaladin;
troshx_sos_races_GenosianPaladin.__name__ = ["troshx","sos","races","GenosianPaladin"];
troshx_sos_races_GenosianPaladin.__super__ = troshx_sos_core_Race;
troshx_sos_races_GenosianPaladin.prototype = $extend(troshx_sos_core_Race.prototype,{
	__class__: troshx_sos_races_GenosianPaladin
});
var troshx_sos_races_DessianSilverGuard = function() {
	troshx_sos_core_Race.call(this,"Dessian Silver Guard");
};
$hxClasses["troshx.sos.races.DessianSilverGuard"] = troshx_sos_races_DessianSilverGuard;
troshx_sos_races_DessianSilverGuard.__name__ = ["troshx","sos","races","DessianSilverGuard"];
troshx_sos_races_DessianSilverGuard.__super__ = troshx_sos_core_Race;
troshx_sos_races_DessianSilverGuard.prototype = $extend(troshx_sos_core_Race.prototype,{
	__class__: troshx_sos_races_DessianSilverGuard
});
var troshx_sos_schools_EsotericSchool = function() {
	troshx_sos_core_School.call(this,"Esoteric School",4,8);
};
$hxClasses["troshx.sos.schools.EsotericSchool"] = troshx_sos_schools_EsotericSchool;
troshx_sos_schools_EsotericSchool.__name__ = ["troshx","sos","schools","EsotericSchool"];
troshx_sos_schools_EsotericSchool.__super__ = troshx_sos_core_School;
troshx_sos_schools_EsotericSchool.prototype = $extend(troshx_sos_core_School.prototype,{
	customRequire: function($char) {
		var test = troshx_sos_schools_EsotericSchool.TEST != null ? troshx_sos_schools_EsotericSchool.TEST : troshx_sos_schools_EsotericSchool.TEST = new troshx_sos_bnb_CompleteMonster();
		var testAssign = Reflect.field($char.banes.hash,test.name);
		if(testAssign != null) {
			return testAssign.rank == 0;
		} else {
			return true;
		}
	}
	,getSchoolBonuses: function(charSheet) {
		return new troshx_sos_schools_EsotericSchoolBonuses();
	}
	,__class__: troshx_sos_schools_EsotericSchool
});
var troshx_sos_schools_EsotericSchoolBonuses = function() {
	this.__hasUIFields__ = true;
	this.flags = 3;
	troshx_sos_core_SchoolBonuses.call(this);
};
$hxClasses["troshx.sos.schools.EsotericSchoolBonuses"] = troshx_sos_schools_EsotericSchoolBonuses;
troshx_sos_schools_EsotericSchoolBonuses.__name__ = ["troshx","sos","schools","EsotericSchoolBonuses"];
troshx_sos_schools_EsotericSchoolBonuses.__super__ = troshx_sos_core_SchoolBonuses;
troshx_sos_schools_EsotericSchoolBonuses.prototype = $extend(troshx_sos_core_SchoolBonuses.prototype,{
	getTags: function() {
		var arr = [];
		var flags = this.flags;
		if((flags & 1) != 0) {
			arr.push("Simplicity");
		}
		if((flags & 2) != 0) {
			arr.push("Flowing Water");
		}
		if((flags & 4) != 0) {
			arr.push("Raging Flame");
		}
		if((flags & 8) != 0) {
			arr.push("Biting Wind");
		}
		if((flags & 16) != 0) {
			arr.push("Stoic Earth");
		}
		return arr;
	}
	,getUIFields: function() {
		return [{ prop : "flags", type : "SingleSelection", label : "Choose Element", labels : ["Flowing Water","Raging Flame","Biting Wind","Stoic Earth"], values : [3,5,9,17]}];
	}
	,__class__: troshx_sos_schools_EsotericSchoolBonuses
});
var troshx_sos_schools_Noble = function() {
	troshx_sos_core_School.call(this,"Noble",3,5);
	this.costMoney = troshx_sos_core_Money.create(15,0,0);
};
$hxClasses["troshx.sos.schools.Noble"] = troshx_sos_schools_Noble;
troshx_sos_schools_Noble.__name__ = ["troshx","sos","schools","Noble"];
troshx_sos_schools_Noble.__super__ = troshx_sos_core_School;
troshx_sos_schools_Noble.prototype = $extend(troshx_sos_core_School.prototype,{
	getSchoolBonuses: function(charSheet) {
		return new troshx_sos_schools_NobleBonuses();
	}
	,__class__: troshx_sos_schools_Noble
});
var troshx_sos_schools_NobleBonuses = function() {
	troshx_sos_core_SchoolBonuses.call(this);
};
$hxClasses["troshx.sos.schools.NobleBonuses"] = troshx_sos_schools_NobleBonuses;
troshx_sos_schools_NobleBonuses.__name__ = ["troshx","sos","schools","NobleBonuses"];
troshx_sos_schools_NobleBonuses.__super__ = troshx_sos_core_SchoolBonuses;
troshx_sos_schools_NobleBonuses.prototype = $extend(troshx_sos_core_SchoolBonuses.prototype,{
	getTags: function() {
		return ["Superior Instruction","Confidence"];
	}
	,getUIFields: function() {
		return [];
	}
	,__class__: troshx_sos_schools_NobleBonuses
});
var troshx_sos_schools_Officer = function() {
	troshx_sos_core_School.call(this,"Officer",4,3);
	this.costMoney = troshx_sos_core_Money.create(5,0,0);
};
$hxClasses["troshx.sos.schools.Officer"] = troshx_sos_schools_Officer;
troshx_sos_schools_Officer.__name__ = ["troshx","sos","schools","Officer"];
troshx_sos_schools_Officer.__super__ = troshx_sos_core_School;
troshx_sos_schools_Officer.prototype = $extend(troshx_sos_core_School.prototype,{
	getSchoolBonuses: function(charSheet) {
		return new troshx_sos_schools_OfficerBonuses();
	}
	,__class__: troshx_sos_schools_Officer
});
var troshx_sos_schools_OfficerBonuses = function() {
	this.__hasUIFields__ = true;
	this.choice2 = "Protect the Banner!";
	troshx_sos_core_SchoolBonuses.call(this);
};
$hxClasses["troshx.sos.schools.OfficerBonuses"] = troshx_sos_schools_OfficerBonuses;
troshx_sos_schools_OfficerBonuses.__name__ = ["troshx","sos","schools","OfficerBonuses"];
troshx_sos_schools_OfficerBonuses.__super__ = troshx_sos_core_SchoolBonuses;
troshx_sos_schools_OfficerBonuses.prototype = $extend(troshx_sos_core_SchoolBonuses.prototype,{
	getTags: function() {
		return ["By Example!",this.choice2];
	}
	,getUIFields: function() {
		return [{ prop : "choice2", type : "SingleSelectionStr", label : "Choose Benefit #2", labels : ["Protect the Banner!","Ride to Ruin!"]}];
	}
	,__class__: troshx_sos_schools_OfficerBonuses
});
var troshx_sos_schools_Schools = function() { };
$hxClasses["troshx.sos.schools.Schools"] = troshx_sos_schools_Schools;
troshx_sos_schools_Schools.__name__ = ["troshx","sos","schools","Schools"];
troshx_sos_schools_Schools.getList = function() {
	if(troshx_sos_schools_Schools.LIST != null) {
		return troshx_sos_schools_Schools.LIST;
	} else {
		return troshx_sos_schools_Schools.LIST = troshx_sos_schools_Schools.getNewList();
	}
};
troshx_sos_schools_Schools.getNewList = function() {
	return [new troshx_sos_schools_Scrapper(),new troshx_sos_schools_Soldier(),new troshx_sos_schools_Officer(),new troshx_sos_schools_Noble(),new troshx_sos_schools_TraditionalFencer(),new troshx_sos_schools_UnorthodoxFencer(),new troshx_sos_schools_EsotericSchool()];
};
var troshx_sos_schools_Scrapper = function() {
	troshx_sos_core_School.call(this,"Scrapper",4,0);
};
$hxClasses["troshx.sos.schools.Scrapper"] = troshx_sos_schools_Scrapper;
troshx_sos_schools_Scrapper.__name__ = ["troshx","sos","schools","Scrapper"];
troshx_sos_schools_Scrapper.__super__ = troshx_sos_core_School;
troshx_sos_schools_Scrapper.prototype = $extend(troshx_sos_core_School.prototype,{
	getSchoolBonuses: function(charSheet) {
		return new troshx_sos_schools_ScrapperBonuses();
	}
	,__class__: troshx_sos_schools_Scrapper
});
var troshx_sos_schools_ScrapperBonuses = function() {
	troshx_sos_core_SchoolBonuses.call(this);
};
$hxClasses["troshx.sos.schools.ScrapperBonuses"] = troshx_sos_schools_ScrapperBonuses;
troshx_sos_schools_ScrapperBonuses.__name__ = ["troshx","sos","schools","ScrapperBonuses"];
troshx_sos_schools_ScrapperBonuses.__super__ = troshx_sos_core_SchoolBonuses;
troshx_sos_schools_ScrapperBonuses.prototype = $extend(troshx_sos_core_SchoolBonuses.prototype,{
	getTags: function() {
		return ["Dirty Trick","Grapple"];
	}
	,getUIFields: function() {
		return [];
	}
	,__class__: troshx_sos_schools_ScrapperBonuses
});
var troshx_sos_schools_Soldier = function() {
	troshx_sos_core_School.call(this,"Soldier",10,1);
	this.staticModifiers = troshx_sos_core_StaticModifier.create(20,"Warrior's Grit",2);
};
$hxClasses["troshx.sos.schools.Soldier"] = troshx_sos_schools_Soldier;
troshx_sos_schools_Soldier.__name__ = ["troshx","sos","schools","Soldier"];
troshx_sos_schools_Soldier.__super__ = troshx_sos_core_School;
troshx_sos_schools_Soldier.prototype = $extend(troshx_sos_core_School.prototype,{
	getSchoolBonuses: function(charSheet) {
		return new troshx_sos_schools_SoldierBonuses();
	}
	,__class__: troshx_sos_schools_Soldier
});
var troshx_sos_schools_SoldierBonuses = function() {
	troshx_sos_core_SchoolBonuses.call(this);
};
$hxClasses["troshx.sos.schools.SoldierBonuses"] = troshx_sos_schools_SoldierBonuses;
troshx_sos_schools_SoldierBonuses.__name__ = ["troshx","sos","schools","SoldierBonuses"];
troshx_sos_schools_SoldierBonuses.__super__ = troshx_sos_core_SchoolBonuses;
troshx_sos_schools_SoldierBonuses.prototype = $extend(troshx_sos_core_SchoolBonuses.prototype,{
	getTags: function() {
		return ["Discipline","Warrior's Grit"];
	}
	,getUIFields: function() {
		return [];
	}
	,__class__: troshx_sos_schools_SoldierBonuses
});
var troshx_sos_schools_TraditionalFencer = function() {
	troshx_sos_core_School.call(this,"Traditional Fencer",4,5);
	this.costMoney = troshx_sos_core_Money.create(10,0,0);
};
$hxClasses["troshx.sos.schools.TraditionalFencer"] = troshx_sos_schools_TraditionalFencer;
troshx_sos_schools_TraditionalFencer.__name__ = ["troshx","sos","schools","TraditionalFencer"];
troshx_sos_schools_TraditionalFencer.__super__ = troshx_sos_core_School;
troshx_sos_schools_TraditionalFencer.prototype = $extend(troshx_sos_core_School.prototype,{
	getSchoolBonuses: function(charSheet) {
		return new troshx_sos_schools_TraditionalFencerBonuses();
	}
	,__class__: troshx_sos_schools_TraditionalFencer
});
var troshx_sos_schools_TraditionalFencerBonuses = function() {
	troshx_sos_core_SchoolBonuses.call(this);
};
$hxClasses["troshx.sos.schools.TraditionalFencerBonuses"] = troshx_sos_schools_TraditionalFencerBonuses;
troshx_sos_schools_TraditionalFencerBonuses.__name__ = ["troshx","sos","schools","TraditionalFencerBonuses"];
troshx_sos_schools_TraditionalFencerBonuses.__super__ = troshx_sos_core_SchoolBonuses;
troshx_sos_schools_TraditionalFencerBonuses.prototype = $extend(troshx_sos_core_SchoolBonuses.prototype,{
	getTags: function() {
		return ["Extreme Repetition","Centered"];
	}
	,getUIFields: function() {
		return [];
	}
	,__class__: troshx_sos_schools_TraditionalFencerBonuses
});
var troshx_sos_schools_UnorthodoxFencer = function() {
	troshx_sos_core_School.call(this,"Unorthodox Fencer",6,5);
	this.costMoney = troshx_sos_core_Money.create(5,0,0);
};
$hxClasses["troshx.sos.schools.UnorthodoxFencer"] = troshx_sos_schools_UnorthodoxFencer;
troshx_sos_schools_UnorthodoxFencer.__name__ = ["troshx","sos","schools","UnorthodoxFencer"];
troshx_sos_schools_UnorthodoxFencer.__super__ = troshx_sos_core_School;
troshx_sos_schools_UnorthodoxFencer.prototype = $extend(troshx_sos_core_School.prototype,{
	getSchoolBonuses: function(charSheet) {
		return new troshx_sos_schools_UnorthodoxFencerBonuses();
	}
	,__class__: troshx_sos_schools_UnorthodoxFencer
});
var troshx_sos_schools_UnorthodoxFencerBonuses = function() {
	troshx_sos_core_SchoolBonuses.call(this);
};
$hxClasses["troshx.sos.schools.UnorthodoxFencerBonuses"] = troshx_sos_schools_UnorthodoxFencerBonuses;
troshx_sos_schools_UnorthodoxFencerBonuses.__name__ = ["troshx","sos","schools","UnorthodoxFencerBonuses"];
troshx_sos_schools_UnorthodoxFencerBonuses.__super__ = troshx_sos_core_SchoolBonuses;
troshx_sos_schools_UnorthodoxFencerBonuses.prototype = $extend(troshx_sos_core_SchoolBonuses.prototype,{
	getTags: function() {
		return ["The Meisterhau","Treachery"];
	}
	,getUIFields: function() {
		return [];
	}
	,__class__: troshx_sos_schools_UnorthodoxFencerBonuses
});
var troshx_sos_sheets_CharSheet = function() {
	this.woundHash = { };
	this.wounds = [];
	this.body = troshx_sos_core_BodyChar.getInstance();
	this.inventory = new troshx_sos_core_Inventory();
	this.arcFlaw = "";
	this.arcGlory = "";
	this.arcBelief = "";
	this.arcEpic = "";
	this.arcSaga = "";
	this.arcSpent = 0;
	this.arcPointsAccum = 0;
	this.banes = new troshx_ds_HashedArray();
	this.boons = new troshx_ds_HashedArray();
	this.direPast = false;
	this.talents = [];
	this.skills = troshx_sos_core_SkillTable.getNewEmptySkillTable(troshx_sos_core_SkillTable.getDefaultSkillTable());
	this.wealthAssetAssignCount = 0;
	this.wealthAssets = [];
	this.socialClass = new troshx_sos_core_SocialClass("",new troshx_sos_core_Money(),0);
	this.money = new troshx_sos_core_Money();
	this.situationalModifierTable = troshx_sos_core_Modifier.getSituationalModifierSlots();
	this.staticModifierTable = troshx_sos_core_Modifier.getStaticModifierSlots();
	this.ingame = false;
	this.fatique = 0;
	this.talentNotes = [];
	this.masteryManueverNotes = [];
	this.superiorManueverNotes = [];
	this.profsCustom = null;
	this.profsRanged = 0;
	this.profsMelee = 0;
	this.schoolLevel = 0;
	this.schoolBonuses = null;
	this.school = null;
	this.gritAccum = 0;
	this.prone = false;
	this.healthLoss = 0;
	this.version = 2;
	this.perception = 1;
	this.intelligence = 1;
	this.wit = 1;
	this.willpower = 1;
	this.health = 1;
	this.endurance = 1;
	this.agility = 1;
	this.strength = 1;
	this.age = -1;
	this.leftHanded = false;
	this.gender = 0;
	this.race = null;
	this.title = "";
	this.notes = "";
	this.faction = "";
	this.nickname = "";
	this.name = "";
};
$hxClasses["troshx.sos.sheets.CharSheet"] = troshx_sos_sheets_CharSheet;
troshx_sos_sheets_CharSheet.__name__ = ["troshx","sos","sheets","CharSheet"];
troshx_sos_sheets_CharSheet.getTotalLiquidity = function(wealthAssets,customLen) {
	if(customLen == null) {
		customLen = 0;
	}
	var i = customLen != 0 ? customLen : wealthAssets.length;
	var c = 0;
	while(--i > -1) {
		var w = wealthAssets[i];
		c += w.liquidate ? w.worth * 6 : 0;
	}
	return c;
};
troshx_sos_sheets_CharSheet.dynSetField = function(obj,prop,val) {
	obj[prop] = val;
};
troshx_sos_sheets_CharSheet.dynDelField = function(woundHash,uid) {
	Reflect.deleteField(woundHash,uid);
};
troshx_sos_sheets_CharSheet.prototype = {
	get_uid: function() {
		return (this.title != "" ? this.title + " " : "") + this.name + (this.nickname != "" ? " \"" + this.nickname + "\"" : "") + (this.faction != "" ? " of " + this.faction : "");
	}
	,set_race: function(r) {
		var oldR = this.race;
		if(oldR != r) {
			if(oldR != null) {
				var modifier = oldR.staticModifiers;
				if(modifier != null) {
					var t = this.staticModifierTable[modifier.index];
					var s = t.splice(t.indexOf(modifier),1);
					var m = modifier.next;
					while(m != null) {
						t = this.staticModifierTable[m.index];
						s = t.splice(t.indexOf(m),1);
						m = m.next;
					}
				}
				var modifier1 = oldR.situationalModifiers;
				if(modifier1 != null) {
					var t1 = this.situationalModifierTable[modifier1.index];
					var s1 = t1.splice(t1.indexOf(modifier1),1);
					var m1 = modifier1.next;
					while(m1 != null) {
						t1 = this.situationalModifierTable[m1.index];
						s1 = t1.splice(t1.indexOf(m1),1);
						m1 = m1.next;
					}
				}
			}
			if(r != null) {
				var modifier2 = r.staticModifiers;
				if(modifier2 != null) {
					var t2 = this.staticModifierTable[modifier2.index];
					t2.push(modifier2);
					var m2 = modifier2.next;
					while(m2 != null) {
						t2 = this.staticModifierTable[m2.index];
						t2.push(m2);
						m2 = m2.next;
					}
				}
				var modifier3 = r.situationalModifiers;
				if(modifier3 != null) {
					var t3 = this.situationalModifierTable[modifier3.index];
					t3.push(modifier3);
					var m3 = modifier3.next;
					while(m3 != null) {
						t3 = this.situationalModifierTable[m3.index];
						t3.push(m3);
						m3 = m3.next;
					}
				}
			}
			this.race = r;
		}
		return r;
	}
	,get_labelGender: function() {
		if(this.gender == 0) {
			return "Male";
		} else {
			return "Female";
		}
	}
	,postSerialization: function() {
		this.postSerialize_2();
		this.body = troshx_sos_core_BodyChar.getInstance();
		this.inventory.postSerialization();
	}
	,postSerialize_2: function() {
		if(this.version == null || this.version < 2) {
			this.version = 2;
		} else {
			return false;
		}
		if(!this.ingame) {
			this.ingame = true;
		}
		if(this.healthLoss == null) {
			this.healthLoss = 0;
		}
		if(this.prone == null) {
			this.prone = false;
		}
		return true;
	}
	,get_STR: function() {
		return this.clampIntZero(this.getModifiedValue(0,this.strength));
	}
	,get_AGI: function() {
		return this.clampIntZero(this.getModifiedValue(1,this.agility));
	}
	,get_END: function() {
		return this.clampIntZero(this.getModifiedValue(2,this.endurance));
	}
	,get_HLT: function() {
		return Math.floor(this.getModifiedValue(3,this.health)) - this.healthLoss;
	}
	,get_WIP: function() {
		return this.clampIntZero(this.getModifiedValue(4,this.willpower));
	}
	,get_WIT: function() {
		return this.clampIntZero(this.getModifiedValue(5,this.wit));
	}
	,get_INT: function() {
		return this.clampIntZero(this.getModifiedValue(6,this.intelligence));
	}
	,get_PER: function() {
		return this.clampIntZero(this.getModifiedValue(7,this.perception));
	}
	,set_school: function(r) {
		var oldR = this.school;
		if(oldR != r) {
			if(oldR != null) {
				var modifier = oldR.staticModifiers;
				if(modifier != null) {
					var t = this.staticModifierTable[modifier.index];
					var s = t.splice(t.indexOf(modifier),1);
					var m = modifier.next;
					while(m != null) {
						t = this.staticModifierTable[m.index];
						s = t.splice(t.indexOf(m),1);
						m = m.next;
					}
				}
				var modifier1 = oldR.situationalModifiers;
				if(modifier1 != null) {
					var t1 = this.situationalModifierTable[modifier1.index];
					var s1 = t1.splice(t1.indexOf(modifier1),1);
					var m1 = modifier1.next;
					while(m1 != null) {
						t1 = this.situationalModifierTable[m1.index];
						s1 = t1.splice(t1.indexOf(m1),1);
						m1 = m1.next;
					}
				}
			}
			if(r != null) {
				var modifier2 = r.staticModifiers;
				if(modifier2 != null) {
					var t2 = this.staticModifierTable[modifier2.index];
					t2.push(modifier2);
					var m2 = modifier2.next;
					while(m2 != null) {
						t2 = this.staticModifierTable[m2.index];
						t2.push(m2);
						m2 = m2.next;
					}
				}
				var modifier3 = r.situationalModifiers;
				if(modifier3 != null) {
					var t3 = this.situationalModifierTable[modifier3.index];
					t3.push(modifier3);
					var m3 = modifier3.next;
					while(m3 != null) {
						t3 = this.situationalModifierTable[m3.index];
						t3.push(m3);
						m3 = m3.next;
					}
				}
			}
			this.school = r;
		}
		return r;
	}
	,set_schoolBonuses: function(r) {
		var oldR = this.schoolBonuses;
		if(oldR != r) {
			if(oldR != null) {
				var modifier = oldR.situationalModifiers;
				if(modifier != null) {
					var t = this.situationalModifierTable[modifier.index];
					var s = t.splice(t.indexOf(modifier),1);
					var m = modifier.next;
					while(m != null) {
						t = this.situationalModifierTable[m.index];
						s = t.splice(t.indexOf(m),1);
						m = m.next;
					}
				}
			}
			if(r != null) {
				var modifier1 = r.situationalModifiers;
				if(modifier1 != null) {
					var t1 = this.situationalModifierTable[modifier1.index];
					t1.push(modifier1);
					var m1 = modifier1.next;
					while(m1 != null) {
						t1 = this.situationalModifierTable[m1.index];
						t1.push(m1);
						m1 = m1.next;
					}
				}
			}
			this.schoolBonuses = r;
		}
		return r;
	}
	,getTotalProfeciencies: function() {
		var count = 0;
		var _g1 = 0;
		var _g = troshx_sos_core_Profeciency.getCoreMelee().length;
		while(_g1 < _g) {
			var i = _g1++;
			count += (this.profsMelee & 1 << i) != 0 ? 1 : 0;
		}
		var _g11 = 0;
		var _g2 = (troshx_sos_core_Profeciency.CORE_RANGED != null ? troshx_sos_core_Profeciency.CORE_RANGED : troshx_sos_core_Profeciency.CORE_RANGED = troshx_sos_core_Profeciency.getNewCoreRanged()).length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			count += (this.profsRanged & 1 << i1) != 0 ? 1 : 0;
		}
		return count;
	}
	,get_assetWorth: function() {
		var i = this.wealthAssets.length;
		var c = 0;
		while(--i > -1) c += this.wealthAssets[i].worth;
		return c;
	}
	,getAssetsWithWorth: function(worth) {
		var arr = [];
		var _g1 = 0;
		var _g = this.wealthAssets.length;
		while(_g1 < _g) {
			var i = _g1++;
			var w = this.wealthAssets[i];
			if(w.worth == worth) {
				arr.push(w);
			}
		}
		return arr;
	}
	,getEmptyWealthAssetAssign: function(worth) {
		var w = { name : "", liquidate : false, uid : this.wealthAssetAssignCount, worth : worth};
		this.wealthAssetAssignCount++;
		return w;
	}
	,get_assetLiquidateTotal: function() {
		return troshx_sos_sheets_CharSheet.getTotalLiquidity(this.wealthAssets);
	}
	,get_boonsArray: function() {
		return this.boons.list;
	}
	,addBoon: function(assign) {
		this.boons.add(assign);
	}
	,removeBoon: function(assign) {
		this.boons["delete"](assign);
	}
	,get_banesArray: function() {
		return this.banes.list;
	}
	,addBane: function(assign) {
		this.banes.add(assign);
	}
	,removeBane: function(assign) {
		this.banes["delete"](assign);
	}
	,mayRemoveBane: function(assign) {
		if(this.banes.contains(assign)) {
			this.banes["delete"](assign);
		}
	}
	,boonRankUpdated: function(assign,newRank,oldRank) {
		if(oldRank > 0) {
			if(assign.boon.staticModifiers != null && assign.boon.staticModifiers.length >= oldRank) {
				var modifier = assign.boon.staticModifiers[oldRank - 1];
				if(modifier != null) {
					var t = this.staticModifierTable[modifier.index];
					var s = t.splice(t.indexOf(modifier),1);
					var m = modifier.next;
					while(m != null) {
						t = this.staticModifierTable[m.index];
						s = t.splice(t.indexOf(m),1);
						m = m.next;
					}
				}
			}
			if(assign.boon.situationalModifiers != null && assign.boon.situationalModifiers.length >= oldRank) {
				var modifier1 = assign.boon.situationalModifiers[oldRank - 1];
				if(modifier1 != null) {
					var t1 = this.situationalModifierTable[modifier1.index];
					var s1 = t1.splice(t1.indexOf(modifier1),1);
					var m1 = modifier1.next;
					while(m1 != null) {
						t1 = this.situationalModifierTable[m1.index];
						s1 = t1.splice(t1.indexOf(m1),1);
						m1 = m1.next;
					}
				}
			}
			if(assign.situationalModifiers != null && assign.situationalModifiers.length >= oldRank) {
				var modifier2 = assign.situationalModifiers[oldRank - 1];
				if(modifier2 != null) {
					var t2 = this.situationalModifierTable[modifier2.index];
					var s2 = t2.splice(t2.indexOf(modifier2),1);
					var m2 = modifier2.next;
					while(m2 != null) {
						t2 = this.situationalModifierTable[m2.index];
						s2 = t2.splice(t2.indexOf(m2),1);
						m2 = m2.next;
					}
				}
			}
		}
		if(newRank > 0) {
			if(assign.boon.staticModifiers != null && assign.boon.staticModifiers.length >= newRank) {
				var modifier3 = assign.boon.staticModifiers[newRank - 1];
				if(modifier3 != null) {
					var t3 = this.staticModifierTable[modifier3.index];
					t3.push(modifier3);
					var m3 = modifier3.next;
					while(m3 != null) {
						t3 = this.staticModifierTable[m3.index];
						t3.push(m3);
						m3 = m3.next;
					}
				}
			}
			if(assign.boon.situationalModifiers != null && assign.boon.situationalModifiers.length >= newRank) {
				var modifier4 = assign.boon.situationalModifiers[newRank - 1];
				if(modifier4 != null) {
					var t4 = this.situationalModifierTable[modifier4.index];
					t4.push(modifier4);
					var m4 = modifier4.next;
					while(m4 != null) {
						t4 = this.situationalModifierTable[m4.index];
						t4.push(m4);
						m4 = m4.next;
					}
				}
			}
			if(assign.situationalModifiers != null && assign.situationalModifiers.length >= newRank) {
				var modifier5 = assign.situationalModifiers[newRank - 1];
				if(modifier5 != null) {
					var t5 = this.situationalModifierTable[modifier5.index];
					t5.push(modifier5);
					var m5 = modifier5.next;
					while(m5 != null) {
						t5 = this.situationalModifierTable[m5.index];
						t5.push(m5);
						m5 = m5.next;
					}
				}
			}
		}
	}
	,baneRankUpdated: function(assign,newRank,oldRank) {
		if(oldRank > 0) {
			if(assign.bane.staticModifiers != null && assign.bane.staticModifiers.length >= oldRank) {
				var modifier = assign.bane.staticModifiers[oldRank - 1];
				if(modifier != null) {
					var t = this.staticModifierTable[modifier.index];
					var s = t.splice(t.indexOf(modifier),1);
					var m = modifier.next;
					while(m != null) {
						t = this.staticModifierTable[m.index];
						s = t.splice(t.indexOf(m),1);
						m = m.next;
					}
				}
			}
			if(assign.bane.situationalModifiers != null && assign.bane.situationalModifiers.length >= oldRank) {
				var modifier1 = assign.bane.situationalModifiers[oldRank - 1];
				if(modifier1 != null) {
					var t1 = this.situationalModifierTable[modifier1.index];
					var s1 = t1.splice(t1.indexOf(modifier1),1);
					var m1 = modifier1.next;
					while(m1 != null) {
						t1 = this.situationalModifierTable[m1.index];
						s1 = t1.splice(t1.indexOf(m1),1);
						m1 = m1.next;
					}
				}
			}
			if(assign.situationalModifiers != null && assign.situationalModifiers.length >= oldRank) {
				var modifier2 = assign.situationalModifiers[oldRank - 1];
				if(modifier2 != null) {
					var t2 = this.situationalModifierTable[modifier2.index];
					var s2 = t2.splice(t2.indexOf(modifier2),1);
					var m2 = modifier2.next;
					while(m2 != null) {
						t2 = this.situationalModifierTable[m2.index];
						s2 = t2.splice(t2.indexOf(m2),1);
						m2 = m2.next;
					}
				}
			}
		}
		if(newRank > 0) {
			if(assign.bane.staticModifiers != null && assign.bane.staticModifiers.length >= newRank) {
				var modifier3 = assign.bane.staticModifiers[newRank - 1];
				if(modifier3 != null) {
					var t3 = this.staticModifierTable[modifier3.index];
					t3.push(modifier3);
					var m3 = modifier3.next;
					while(m3 != null) {
						t3 = this.staticModifierTable[m3.index];
						t3.push(m3);
						m3 = m3.next;
					}
				}
			}
			if(assign.bane.situationalModifiers != null && assign.bane.situationalModifiers.length >= newRank) {
				var modifier4 = assign.bane.situationalModifiers[newRank - 1];
				if(modifier4 != null) {
					var t4 = this.situationalModifierTable[modifier4.index];
					t4.push(modifier4);
					var m4 = modifier4.next;
					while(m4 != null) {
						t4 = this.situationalModifierTable[m4.index];
						t4.push(m4);
						m4 = m4.next;
					}
				}
			}
			if(assign.situationalModifiers != null && assign.situationalModifiers.length >= newRank) {
				var modifier5 = assign.situationalModifiers[newRank - 1];
				if(modifier5 != null) {
					var t5 = this.situationalModifierTable[modifier5.index];
					t5.push(modifier5);
					var m5 = modifier5.next;
					while(m5 != null) {
						t5 = this.situationalModifierTable[m5.index];
						t5.push(m5);
						m5 = m5.next;
					}
				}
			}
		}
	}
	,boonRankCanceledChange: function(assign,newCanceled,oldCanceled) {
		this.boonRankUpdated(assign,newCanceled ? 0 : assign.rank,oldCanceled ? 0 : assign.rank);
	}
	,baneRankCanceledChange: function(assign,newCanceled,oldCanceled) {
		this.baneRankUpdated(assign,newCanceled ? 0 : assign.rank,oldCanceled ? 0 : assign.rank);
	}
	,boonAssignReplaced: function(newAssign,oldAssign) {
		if(oldAssign.boon.staticModifiers != null && oldAssign.boon.staticModifiers.length >= oldAssign.rank) {
			var modifier = oldAssign.boon.staticModifiers[oldAssign.rank - 1];
			if(modifier != null) {
				var t = this.staticModifierTable[modifier.index];
				var s = t.splice(t.indexOf(modifier),1);
				var m = modifier.next;
				while(m != null) {
					t = this.staticModifierTable[m.index];
					s = t.splice(t.indexOf(m),1);
					m = m.next;
				}
			}
		}
		if(oldAssign.boon.situationalModifiers != null && oldAssign.boon.situationalModifiers.length >= oldAssign.rank) {
			var modifier1 = oldAssign.boon.situationalModifiers[oldAssign.rank - 1];
			if(modifier1 != null) {
				var t1 = this.situationalModifierTable[modifier1.index];
				var s1 = t1.splice(t1.indexOf(modifier1),1);
				var m1 = modifier1.next;
				while(m1 != null) {
					t1 = this.situationalModifierTable[m1.index];
					s1 = t1.splice(t1.indexOf(m1),1);
					m1 = m1.next;
				}
			}
		}
		if(oldAssign.situationalModifiers != null && oldAssign.situationalModifiers.length >= oldAssign.rank) {
			var modifier2 = oldAssign.situationalModifiers[oldAssign.rank - 1];
			if(modifier2 != null) {
				var t2 = this.situationalModifierTable[modifier2.index];
				var s2 = t2.splice(t2.indexOf(modifier2),1);
				var m2 = modifier2.next;
				while(m2 != null) {
					t2 = this.situationalModifierTable[m2.index];
					s2 = t2.splice(t2.indexOf(m2),1);
					m2 = m2.next;
				}
			}
		}
		if(newAssign.boon.staticModifiers != null && newAssign.boon.staticModifiers.length >= newAssign.rank) {
			var modifier3 = newAssign.boon.staticModifiers[newAssign.rank - 1];
			if(modifier3 != null) {
				var t3 = this.staticModifierTable[modifier3.index];
				t3.push(modifier3);
				var m3 = modifier3.next;
				while(m3 != null) {
					t3 = this.staticModifierTable[m3.index];
					t3.push(m3);
					m3 = m3.next;
				}
			}
		}
		if(newAssign.boon.situationalModifiers != null && newAssign.boon.situationalModifiers.length >= newAssign.rank) {
			var modifier4 = newAssign.boon.situationalModifiers[newAssign.rank - 1];
			if(modifier4 != null) {
				var t4 = this.situationalModifierTable[modifier4.index];
				t4.push(modifier4);
				var m4 = modifier4.next;
				while(m4 != null) {
					t4 = this.situationalModifierTable[m4.index];
					t4.push(m4);
					m4 = m4.next;
				}
			}
		}
		if(newAssign.situationalModifiers != null && newAssign.situationalModifiers.length >= newAssign.rank) {
			var modifier5 = newAssign.situationalModifiers[newAssign.rank - 1];
			if(modifier5 != null) {
				var t5 = this.situationalModifierTable[modifier5.index];
				t5.push(modifier5);
				var m5 = modifier5.next;
				while(m5 != null) {
					t5 = this.situationalModifierTable[m5.index];
					t5.push(m5);
					m5 = m5.next;
				}
			}
		}
	}
	,removeStaticModifier: function(modifier) {
		if(modifier != null) {
			var t = this.staticModifierTable[modifier.index];
			var s = t.splice(t.indexOf(modifier),1);
			var m = modifier.next;
			while(m != null) {
				t = this.staticModifierTable[m.index];
				s = t.splice(t.indexOf(m),1);
				m = m.next;
			}
		}
	}
	,removeSituationalModifier: function(modifier) {
		if(modifier != null) {
			var t = this.situationalModifierTable[modifier.index];
			var s = t.splice(t.indexOf(modifier),1);
			var m = modifier.next;
			while(m != null) {
				t = this.situationalModifierTable[m.index];
				s = t.splice(t.indexOf(m),1);
				m = m.next;
			}
		}
	}
	,addStaticModifier: function(modifier) {
		if(modifier != null) {
			var t = this.staticModifierTable[modifier.index];
			t.push(modifier);
			var m = modifier.next;
			while(m != null) {
				t = this.staticModifierTable[m.index];
				t.push(m);
				m = m.next;
			}
		}
	}
	,addSituationalModifier: function(modifier) {
		if(modifier != null) {
			var t = this.situationalModifierTable[modifier.index];
			t.push(modifier);
			var m = modifier.next;
			while(m != null) {
				t = this.situationalModifierTable[m.index];
				t.push(m);
				m = m.next;
			}
		}
	}
	,getModifiedValue: function(modifierIndex,base) {
		var staticList = this.staticModifierTable[modifierIndex];
		var val = base;
		var _g1 = 0;
		var _g = staticList.length;
		while(_g1 < _g) {
			var i = _g1++;
			var s = staticList[i];
			val *= s.multiply;
		}
		var _g11 = 0;
		var _g2 = staticList.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var s1 = staticList[i1];
			val += s1.add;
		}
		var situationalList = this.situationalModifierTable[modifierIndex];
		var _g12 = 0;
		var _g3 = situationalList.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var s2 = situationalList[i2];
			val = s2.getModifiedValueMultiply(this,base,val);
		}
		var _g13 = 0;
		var _g4 = situationalList.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var s3 = situationalList[i3];
			val = s3.getModifiedValueAdd(this,base,val);
		}
		return val;
	}
	,get_totalWeight: function() {
		return this.inventory.calculateTotalWeight();
	}
	,applyWound: function(w) {
		var uid = w.getUID(this.body);
		if(!Object.prototype.hasOwnProperty.call(this.woundHash,uid)) {
			troshx_sos_sheets_CharSheet.dynSetField(this.woundHash,uid,w);
			this.wounds.push(w);
		} else {
			var fw = this.woundHash[uid];
			fw.updateAgainst(w);
		}
	}
	,hasWound: function(w) {
		var uid = w.getUID(this.body);
		return Object.prototype.hasOwnProperty.call(this.woundHash,uid);
	}
	,getWound: function(w) {
		return this.woundHash[w.getUID(this.body)];
	}
	,removeWound: function(w) {
		var uid = w.getUID(this.body);
		if(Object.prototype.hasOwnProperty.call(this.woundHash,uid)) {
			troshx_sos_sheets_CharSheet.dynDelField(this.woundHash,uid);
		} else {
			console.log("Warning: No wound found to be removed for uid:" + w.getUID(this.body));
		}
		var index = this.wounds.indexOf(w);
		if(index >= 0) {
			this.wounds.splice(index,1);
		} else {
			console.log("Warning: No wound found to be removed for array index:" + index);
		}
	}
	,wealthAssetsWorth: function() {
		var i = this.wealthAssets.length;
		var c = 0;
		while(--i > -1) c += this.wealthAssets[i].worth;
		return c;
	}
	,get_pain: function() {
		var r = this.get_totalPain() - (this.clampIntZero(this.getModifiedValue(20,this.willpower / 2 | 0)) + this.gritAccum | 0);
		if(r < 0) {
			return 0;
		} else {
			return r;
		}
	}
	,get_totalPain: function() {
		var c = 0;
		var gotInfinite = false;
		var _g1 = 0;
		var _g = this.wounds.length;
		while(_g1 < _g) {
			var i = _g1++;
			var w = this.wounds[i];
			c += (w.flags & 2) != 0 ? Math.floor(w.pain * .5) : w.pain;
			if(w.pain < 0) {
				gotInfinite = true;
			}
		}
		if(gotInfinite) {
			return 999999999;
		} else {
			return c;
		}
	}
	,get_totalBloodLost: function() {
		var c = 0;
		var _g1 = 0;
		var _g = this.wounds.length;
		while(_g1 < _g) {
			var i = _g1++;
			var w = this.wounds[i];
			c += (w.flags & 3) == 0 ? w.BL : 0;
		}
		return c;
	}
	,get_adr: function() {
		return (this.get_AGI() + this.get_WIT()) / 2 | 0;
	}
	,get_mob: function() {
		return (this.get_STR() + this.get_AGI() + this.get_END()) / 2 | 0;
	}
	,get_car: function() {
		return this.get_STR() + this.get_END();
	}
	,get_cha: function() {
		return (this.get_WIP() + this.get_WIT() + this.get_PER()) / 2 | 0;
	}
	,get_tou: function() {
		return 4;
	}
	,get_ADR: function() {
		return this.clampIntZero(this.getModifiedValue(8,(this.get_AGI() + this.get_WIT()) / 2 | 0));
	}
	,get_MOB: function() {
		var row = this.get_encumbranceLvlRow();
		return row.mobMult * this.clampIntZero(this.getModifiedValue(9,(this.get_STR() + this.get_AGI() + this.get_END()) / 2 | 0) + row.mob + troshx_sos_sheets_FatiqueTable.getTable()[this.get_fatiqueLevel()].mob);
	}
	,get_CAR: function() {
		return this.clampIntZero(this.getModifiedValue(10,this.clampIntZero(this.getModifiedValue(16,this.get_STR() + this.get_END()))));
	}
	,get_CHA: function() {
		return this.clampIntZero(this.getModifiedValue(11,(this.get_WIP() + this.get_WIT() + this.get_PER()) / 2 | 0));
	}
	,get_startingGrit: function() {
		return this.clampIntZero(this.getModifiedValue(20,this.willpower / 2 | 0));
	}
	,get_GRIT: function() {
		return this.clampIntZero(this.getModifiedValue(20,this.willpower / 2 | 0)) + this.gritAccum | 0;
	}
	,get_baseGrit: function() {
		return this.willpower / 2 | 0;
	}
	,clampIntZero: function(val) {
		var r = val | 0;
		if(r < 0) {
			return 0;
		} else {
			return r;
		}
	}
	,hasStaticModifier: function(mod) {
		return this.staticModifierTable[mod.index].indexOf(mod) >= 0;
	}
	,hasSituationalCharModifier: function(mod) {
		return this.situationalModifierTable[mod.index].indexOf(mod) >= 0;
	}
	,get_TOU: function() {
		return this.clampIntZero(this.getModifiedValue(12,4));
	}
	,get_SDB: function() {
		return this.get_STR() / 2 | 0;
	}
	,get_labelRace: function() {
		if(this.race != null) {
			return this.race.name;
		} else {
			return "Unspecified";
		}
	}
	,get_labelSchool: function() {
		if(this.school != null) {
			return this.school.name;
		} else {
			return "";
		}
	}
	,get_labelSocialClass: function() {
		if(this.socialClass != null) {
			return this.socialClass.name;
		} else {
			return "";
		}
	}
	,get_baseCP: function() {
		return (this.schoolLevel >= 1 ? this.schoolLevel : 0) + this.clampIntZero(this.getModifiedValue(8,(this.get_AGI() + this.get_WIT()) / 2 | 0));
	}
	,get_CP: function() {
		var row = this.get_encumbranceLvlRow();
		return row.cpMult * this.clampIntZero(this.getModifiedValue(13,(this.schoolLevel >= 1 ? this.schoolLevel : 0) + this.clampIntZero(this.getModifiedValue(8,(this.get_AGI() + this.get_WIT()) / 2 | 0))) * (this.prone ? 0.5 : 1) + row.cp + troshx_sos_sheets_FatiqueTable.getTable()[this.get_fatiqueLevel()].cp);
	}
	,get_meleeCP: function() {
		var row = this.get_encumbranceLvlRow();
		return row.cpMult * this.clampIntZero(this.getModifiedValue(13,(this.schoolLevel >= 1 ? this.schoolLevel : 0) + this.clampIntZero(this.getModifiedValue(8,(this.get_AGI() + this.get_WIT()) / 2 | 0))) * (this.prone ? 0.5 : 1) + row.cp + troshx_sos_sheets_FatiqueTable.getTable()[this.get_fatiqueLevel()].cp) - this.get_pain();
	}
	,get_schoolCP: function() {
		if(this.schoolLevel >= 1) {
			return this.schoolLevel;
		} else {
			return 0;
		}
	}
	,get_arcPointsAvailable: function() {
		var r = this.arcPointsAccum - this.arcSpent;
		if(r >= 0) {
			return r;
		} else {
			return 0;
		}
	}
	,get_skillPenalty: function() {
		return this.get_encumbranceLvlRow().skill + troshx_sos_sheets_FatiqueTable.getTable()[this.get_fatiqueLevel()].skill;
	}
	,get_recoveryRate: function() {
		return this.clampIntZero(this.get_encumbranceLvlRow().recovery);
	}
	,get_encumbranceLvlRow: function() {
		var tabler = troshx_sos_sheets_EncumbranceTable.getTable();
		return tabler[Math.floor(this.inventory.calculateTotalWeight() / this.clampIntZero(this.getModifiedValue(10,this.clampIntZero(this.getModifiedValue(16,this.get_STR() + this.get_END()))))) >= tabler.length ? tabler.length - 1 : Math.floor(this.inventory.calculateTotalWeight() / this.clampIntZero(this.getModifiedValue(10,this.clampIntZero(this.getModifiedValue(16,this.get_STR() + this.get_END()))))) < 0 ? 0 : Math.floor(this.inventory.calculateTotalWeight() / this.clampIntZero(this.getModifiedValue(10,this.clampIntZero(this.getModifiedValue(16,this.get_STR() + this.get_END())))))];
	}
	,get_encumbranceLvl: function() {
		return Math.floor(this.inventory.calculateTotalWeight() / this.clampIntZero(this.getModifiedValue(10,this.clampIntZero(this.getModifiedValue(16,this.get_STR() + this.get_END())))));
	}
	,get_encumberedBeyond: function() {
		return Math.floor(this.inventory.calculateTotalWeight() / this.clampIntZero(this.getModifiedValue(10,this.clampIntZero(this.getModifiedValue(16,this.get_STR() + this.get_END()))))) >= 5;
	}
	,get_exhaustionRate: function() {
		return this.get_encumbranceLvlRow().exhaustion;
	}
	,get_fatiqueLevel: function() {
		var hlt = this.get_HLT();
		if(hlt < 0) {
			hlt = 0;
		} else {
			hlt = hlt;
		}
		return troshx_sos_sheets_FatiqueTable.getFatiqueLevel(this.fatique,hlt);
	}
	,get_fatiqueSkillPenalty: function() {
		return troshx_sos_sheets_FatiqueTable.getTable()[this.get_fatiqueLevel()].skill;
	}
	,get_fatiqueMobPenalty: function() {
		return troshx_sos_sheets_FatiqueTable.getTable()[this.get_fatiqueLevel()].mob;
	}
	,get_fatiqueCPPenalty: function() {
		return troshx_sos_sheets_FatiqueTable.getTable()[this.get_fatiqueLevel()].cp;
	}
	,__class__: troshx_sos_sheets_CharSheet
};
var troshx_sos_sheets_EncumbranceTable = function() { };
$hxClasses["troshx.sos.sheets.EncumbranceTable"] = troshx_sos_sheets_EncumbranceTable;
troshx_sos_sheets_EncumbranceTable.__name__ = ["troshx","sos","sheets","EncumbranceTable"];
troshx_sos_sheets_EncumbranceTable.getTable = function() {
	if(troshx_sos_sheets_EncumbranceTable.TABLE != null) {
		return troshx_sos_sheets_EncumbranceTable.TABLE;
	} else {
		return troshx_sos_sheets_EncumbranceTable.TABLE = troshx_sos_sheets_EncumbranceTable.getNewTable();
	}
};
troshx_sos_sheets_EncumbranceTable.getNewTable = function() {
	return [{ name : "Unencumbered", cp : 0, mob : 0, skill : 0, exhaustion : 1, recovery : 1, cpMult : 1, mobMult : 1},{ name : "Light", cp : -1, mob : -2, skill : 1, exhaustion : 1.5, recovery : 1, cpMult : 1, mobMult : 1},{ name : "Medium", cp : -2, mob : -4, skill : 2, exhaustion : 2, recovery : 0.5, cpMult : 1, mobMult : 1},{ name : "Heavy", cp : -3, mob : -6, skill : 3, exhaustion : 3, recovery : 0.25, cpMult : 1, mobMult : 1},{ name : "Overloaded", cp : -4, mob : -8, skill : 4, exhaustion : 3.5, recovery : 0, cpMult : 1, mobMult : 1},{ name : "Beyond Overloaded!", cp : -4, mob : -8, skill : 4, exhaustion : 3.5, recovery : 0, cpMult : 0, mobMult : 0}];
};
var troshx_sos_sheets_FatiqueTable = function() { };
$hxClasses["troshx.sos.sheets.FatiqueTable"] = troshx_sos_sheets_FatiqueTable;
troshx_sos_sheets_FatiqueTable.__name__ = ["troshx","sos","sheets","FatiqueTable"];
troshx_sos_sheets_FatiqueTable.getTable = function() {
	if(troshx_sos_sheets_FatiqueTable.TABLE != null) {
		return troshx_sos_sheets_FatiqueTable.TABLE;
	} else {
		return troshx_sos_sheets_FatiqueTable.TABLE = troshx_sos_sheets_FatiqueTable.getNewTable();
	}
};
troshx_sos_sheets_FatiqueTable.getFatiqueLevel = function(fatique,hlt) {
	var f = Math.ceil((fatique - 5 - hlt) / 5);
	if(f >= 0) {
		if(f < 5) {
			return f;
		} else {
			return 4;
		}
	} else {
		return 0;
	}
};
troshx_sos_sheets_FatiqueTable.getNewTable = function() {
	return [{ name : "Fresh", cp : 0, mob : 0, skill : 0},{ name : "Winded", cp : -1, mob : -1, skill : -1},{ name : "Tired", cp : -2, mob : -2, skill : -2},{ name : "Very Tired", cp : -4, mob : -4, skill : -4},{ name : "Exhausted", cp : -6, mob : -6, skill : -6}];
};
var troshx_sos_vue_GlobalCanvas2D = function() { };
$hxClasses["troshx.sos.vue.GlobalCanvas2D"] = troshx_sos_vue_GlobalCanvas2D;
troshx_sos_vue_GlobalCanvas2D.__name__ = ["troshx","sos","vue","GlobalCanvas2D"];
troshx_sos_vue_GlobalCanvas2D.getContext = function() {
	return troshx_sos_vue_GlobalCanvas2D.CONTEXT;
};
troshx_sos_vue_GlobalCanvas2D.__setupContext = function(canvas,context,fullScreen) {
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(troshx_sos_vue_GlobalCanvas2D.CANVAS != null) {
		console.log("GlobalCanvas2D:: Global canvas already set! Cannot set again");
		return;
	}
	troshx_sos_vue_GlobalCanvas2D.CANVAS = canvas;
	troshx_sos_vue_GlobalCanvas2D.CONTEXT = context;
	if(fullScreen) {
		window.addEventListener("resize",troshx_sos_vue_GlobalCanvas2D.canvasResizeHandler);
		troshx_sos_vue_GlobalCanvas2D.canvasResizeHandler();
	}
};
troshx_sos_vue_GlobalCanvas2D.canvasResizeHandler = function(e) {
	var wd = window;
	var c = troshx_sos_vue_GlobalCanvas2D.CANVAS;
	c.width = wd.innerWidth;
	c.height = wd.innerHeight;
};
var troshx_sos_vue_combat_CombatViewModel = function(boutModel) {
	this.thrustAvailabilityMask = 0;
	this.swingAvailabilityMask = 0;
	this.defaultThrustAvailMask = 0;
	this.defaultSwingAvailMask = 0;
	this.focusOpponentIndex = 0;
	this.currentPlayerIndex = -1;
	this.actingState = -1;
	this.DOLL_SWING_IsRights = 0;
	this.DOLL_SWING_Indices = [];
	this.DOLL_SWING_Slugs = [];
	this.DOLL_PART_IsRights = 0;
	this.DOLL_PART_HitIndices = [];
	this.DOLL_PART_Indices = [];
	this.DOLL_PART_Slugs = [];
	this.draggedCP = 0;
	this.focusedIndex = -1;
	this.showFocusedTag = false;
	this.observeOpponent = false;
	this.boutModel = boutModel != null ? boutModel : new troshx_sos_combat_BoutModel();
};
$hxClasses["troshx.sos.vue.combat.CombatViewModel"] = troshx_sos_vue_combat_CombatViewModel;
troshx_sos_vue_combat_CombatViewModel.__name__ = ["troshx","sos","vue","combat","CombatViewModel"];
troshx_sos_vue_combat_CombatViewModel.prototype = {
	setFocusedIndex: function(val) {
		this.focusedIndex = val;
		this.showFocusedTag = val >= 0;
	}
	,getFocusedLabel: function() {
		var i = this.focusedIndex;
		if(i < 0) {
			return "";
		}
		if(this._swingMap.h.hasOwnProperty(i)) {
			return this.getDollSwingDescAt(this._swingMap.h[i]);
		} else if(this._partMap.h.hasOwnProperty(i)) {
			return this.getDollPartThrustDescAt(this._partMap.h[i]);
		} else {
			return "todo/missing";
		}
	}
	,getBodyPartLabel: function(i) {
		if(i == null) {
			i = -1;
		}
		if(i < 0) {
			i = this.focusedIndex;
		}
		if(i < 0) {
			return "";
		}
		if(this._partMap.h.hasOwnProperty(i)) {
			var loc = this._body.hitLocations[this.DOLL_PART_HitIndices[this._partMap.h[i]]];
			return loc.name;
		} else {
			return null;
		}
	}
	,setDraggedCP: function(val) {
		this.draggedCP = val;
	}
	,getRemainingDisplayCP: function() {
		var dcp = this.draggedCP;
		var pl = this.currentPlayerIndex >= 0 ? this.boutModel.bout.combatants[this.currentPlayerIndex] : null;
		var cp = pl.fight.cp - dcp;
		if(cp >= 0) {
			return cp;
		} else {
			return 0;
		}
	}
	,getDollPartThrustDescAt: function(index) {
		index = this.DOLL_PART_Indices[index];
		if(index < 0) {
			return null;
		}
		return this._body.getDescLabelTargetZone(index);
	}
	,getDollPartHitLocationAt: function(index) {
		return this._body.hitLocations[this.DOLL_PART_HitIndices[index]];
	}
	,getDollPartThrustZoneAt: function(index) {
		index = this.DOLL_PART_Indices[index];
		if(index < 0) {
			return null;
		}
		return this._body.targetZones[index];
	}
	,isDollPartThrustable: function(index) {
		return this.DOLL_PART_Indices[index] >= 0;
	}
	,getDollPartArmorValues: function(result) {
		if(result == null) {
			result = [];
		}
		return result;
	}
	,getDollPartHighestWoundLevels: function(result) {
		if(result == null) {
			result = [];
		}
		return result;
	}
	,getDollHighestWounds: function(result) {
		if(result == null) {
			result = [];
		}
		return result;
	}
	,getDollSwingDescAt: function(index) {
		return this._body.getDescLabelTargetZone(this.DOLL_SWING_Indices[index]);
	}
	,getDollSwingZoneAt: function(index) {
		return this._body.targetZones[this.DOLL_SWING_Indices[index]];
	}
	,getDefaultPlayerSideIndex: function() {
		return 0;
	}
	,getDefaultEnemySideIndex: function() {
		return 1;
	}
	,setActingState: function(val) {
		this.actingState = val;
	}
	,getCurrentPlayer: function() {
		if(this.currentPlayerIndex >= 0) {
			return this.boutModel.bout.combatants[this.currentPlayerIndex];
		} else {
			return null;
		}
	}
	,getCurrentOpponents: function() {
		var playerSideIndex = 0;
		if(this.boutModel.bout == null) {
			return null;
		}
		return this.boutModel.bout.combatants.filter(function(obj) {
			return obj.sideIndex != playerSideIndex;
		});
	}
	,getCurrentAllies: function() {
		var playerSideIndex = 0;
		if(this.boutModel.bout == null) {
			return null;
		}
		return this.boutModel.bout.combatants.filter(function(obj) {
			return obj.sideIndex != playerSideIndex;
		});
	}
	,handleDisabledMask: function(val,slugs) {
		var map = this._interactionMaps[0];
		var _g1 = 0;
		var _g = slugs.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _this = this._dollImageMapData.idIndices;
			var key = slugs[i];
			var key1 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			map.h[key1].disabled = (val & 1 << i) == 0;
		}
	}
	,setDisabledAll: function(slugs,disabled) {
		if(disabled == null) {
			disabled = true;
		}
		var map = this._interactionMaps[0];
		var _g1 = 0;
		var _g = slugs.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _this = this._dollImageMapData.idIndices;
			var key = slugs[i];
			var key1 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			map.h[key1].disabled = disabled;
		}
	}
	,onThrustAvailabilityChange: function() {
		this.handleDisabledMask(this.thrustAvailabilityMask,this.DOLL_PART_Slugs);
	}
	,onSwingAvailabilityChange: function() {
		this.handleDisabledMask(this.swingAvailabilityMask,this.DOLL_SWING_Slugs);
	}
	,partIndexAvailable: function(index) {
		return (this.thrustAvailabilityMask & index << 1) != 0;
	}
	,swingArcAvailableBetween: function(slugs) {
		var tmp = this.swingAvailabilityMask;
		var _this = this._dollImageMapData.idIndices;
		var key = slugs[0];
		var tmp1 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		var _this1 = this._dollImageMapData.idIndices;
		var key1 = slugs[1];
		return (tmp & (tmp1 | (__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]))) != 0;
	}
	,getInteractionListByState: function(state) {
		return this._interactionStates[state];
	}
	,setupDollInteraction: function(fullInteractList,imageMapData) {
		this._interactionMaps = [];
		this._interactionStates = [];
		this._interactionStates[0] = fullInteractList;
		this._interactionMaps[0] = troshx_sos_vue_combat_UInteract.getIndexMapOfArray(fullInteractList);
		this._interactionStates[1] = [];
		this._dollImageMapData = imageMapData;
		this._interactionStates[2] = [];
		var body = troshx_sos_core_BodyChar.getInstance();
		this._body = body;
		var needToLowercase;
		this._swingMap = new haxe_ds_IntMap();
		this._partMap = new haxe_ds_IntMap();
		var _g1 = 0;
		var _g = imageMapData.layoutItemList.length;
		while(_g1 < _g) {
			var i = _g1++;
			var tag = imageMapData.classList[i];
			if(tag == "part") {
				this._partMap.h[i] = this.DOLL_PART_Slugs.length;
				this.DOLL_PART_Slugs.push(imageMapData.titleList[i]);
			} else if(tag == "swing") {
				this._swingMap.h[i] = this.DOLL_SWING_Slugs.length;
				this.DOLL_SWING_Slugs.push(imageMapData.titleList[i]);
			}
		}
		var targetZones = body.targetZones;
		var toUnderscoreCapital_r = new RegExp(" ([A-Z])","g".split("u").join(""));
		var toSlugifyCapital = new EReg("_([a-z])","g");
		var mapTempSwings = new haxe_ds_StringMap();
		var mapTempThrusts = new haxe_ds_StringMap();
		var key;
		var _g11 = 0;
		var _g2 = body.thrustStartIndex;
		while(_g11 < _g2) {
			var i1 = _g11++;
			key = targetZones[i1].name.replace(toUnderscoreCapital_r,"_$1").toUpperCase();
			var key1 = "SWING_" + key;
			if(__map_reserved[key1] != null) {
				mapTempSwings.setReserved(key1,i1);
			} else {
				mapTempSwings.h[key1] = i1;
			}
		}
		var _g12 = body.thrustStartIndex;
		var _g3 = targetZones.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			key = targetZones[i2].name.replace(toUnderscoreCapital_r,"_$1").toUpperCase();
			if(__map_reserved[key] != null) {
				mapTempThrusts.setReserved(key,i2);
			} else {
				mapTempThrusts.h[key] = i2;
			}
			if(key == "LOWER_ARM") {
				if(__map_reserved["FOREARM"] != null) {
					mapTempThrusts.setReserved("FOREARM",i2);
				} else {
					mapTempThrusts.h["FOREARM"] = i2;
				}
			} else if(key == "UPPER_LEG") {
				if(__map_reserved["THIGH"] != null) {
					mapTempThrusts.setReserved("THIGH",i2);
				} else {
					mapTempThrusts.h["THIGH"] = i2;
				}
			} else if(key == "HEAD") {
				if(__map_reserved["FACE"] != null) {
					mapTempThrusts.setReserved("FACE",i2);
				} else {
					mapTempThrusts.h["FACE"] = i2;
				}
			} else if(key == "LOWER_LEG") {
				if(__map_reserved["SHIN"] != null) {
					mapTempThrusts.setReserved("SHIN",i2);
				} else {
					mapTempThrusts.h["SHIN"] = i2;
				}
			}
		}
		needToLowercase = this.DOLL_PART_Slugs[0].charAt(0).toLowerCase() != this.DOLL_PART_Slugs[0].charAt(0);
		var keySplit;
		var maskAccum = 0;
		var _g13 = 0;
		var _g4 = this.DOLL_PART_Slugs.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			keySplit = this.DOLL_PART_Slugs[i3].split("-");
			key = keySplit[0];
			this.DOLL_PART_IsRights |= keySplit.length >= 2 && keySplit[keySplit.length - 1] == "r" ? 1 << i3 : 0;
			if(__map_reserved[key] != null ? mapTempThrusts.existsReserved(key) : mapTempThrusts.h.hasOwnProperty(key)) {
				this.DOLL_PART_Indices[i3] = __map_reserved[key] != null ? mapTempThrusts.getReserved(key) : mapTempThrusts.h[key];
				maskAccum |= 1 << i3;
			} else {
				this.DOLL_PART_Indices[i3] = -1;
			}
			key = toSlugifyCapital.map(key.toLowerCase(),function(e) {
				return e.matched(1).toUpperCase();
			});
			key = key.charAt(0).toLowerCase() + HxOverrides.substr(key,1,null);
			if(Object.prototype.hasOwnProperty.call(body.hitLocationHash,key)) {
				this.DOLL_PART_HitIndices[i3] = body.hitLocationHash[key];
			} else {
				throw new js__$Boot_HaxeError("FAILED TO FIND hit location index by key:" + key);
			}
		}
		this.thrustAvailabilityMask = maskAccum;
		maskAccum = 0;
		var _g14 = 0;
		var _g5 = this.DOLL_SWING_Slugs.length;
		while(_g14 < _g5) {
			var i4 = _g14++;
			keySplit = this.DOLL_SWING_Slugs[i4].split("-");
			this.DOLL_SWING_IsRights |= keySplit.length >= 2 && keySplit[keySplit.length - 1] == "r" ? i4 << 1 : 0;
			key = keySplit[0];
			if(key == "SWING_UPWARD_HEAD") {
				this.DOLL_SWING_Indices[i4] = 1;
			} else if(key == "SWING_DOWNWARD_HEAD") {
				this.DOLL_SWING_Indices[i4] = 0;
			} else if(__map_reserved[key] != null ? mapTempSwings.existsReserved(key) : mapTempSwings.h.hasOwnProperty(key)) {
				this.DOLL_SWING_Indices[i4] = __map_reserved[key] != null ? mapTempSwings.getReserved(key) : mapTempSwings.h[key];
			} else {
				this.DOLL_SWING_Indices[i4] = -1;
				throw new js__$Boot_HaxeError("FAILED TO FIND target zone index by key:" + key);
			}
			maskAccum |= 1 << i4;
		}
		this.swingAvailabilityMask = maskAccum;
		this.defaultSwingAvailMask = this.swingAvailabilityMask;
		this.defaultThrustAvailMask = this.thrustAvailabilityMask;
		this.onThrustAvailabilityChange();
		this.onSwingAvailabilityChange();
	}
	,__class__: troshx_sos_vue_combat_CombatViewModel
};
var troshx_sos_vue_combat_HammerJSCombat = function(element,imageMapData,callback) {
	this.requiredActs = 0;
	this.DEFAULT_ACT_HOVER = new troshx_sos_vue_combat_UInteract(-1,4096);
	this.activeTouches = new haxe_ds_IntMap();
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["panup"] != null) {
		_g.setReserved("panup",256);
	} else {
		_g.h["panup"] = 256;
	}
	if(__map_reserved["pandown"] != null) {
		_g.setReserved("pandown",1024);
	} else {
		_g.h["pandown"] = 1024;
	}
	if(__map_reserved["tap"] != null) {
		_g.setReserved("tap",4);
	} else {
		_g.h["tap"] = 4;
	}
	if(__map_reserved["press"] != null) {
		_g.setReserved("press",8);
	} else {
		_g.h["press"] = 8;
	}
	if(__map_reserved["swipeleft"] != null) {
		_g.setReserved("swipeleft",128);
	} else {
		_g.h["swipeleft"] = 128;
	}
	if(__map_reserved["swiperight"] != null) {
		_g.setReserved("swiperight",32);
	} else {
		_g.h["swiperight"] = 32;
	}
	if(__map_reserved["swipeup"] != null) {
		_g.setReserved("swipeup",16);
	} else {
		_g.h["swipeup"] = 16;
	}
	this.hammerEventMap = _g;
	this.callback = callback != null ? callback : $bind(this,this.defaultCallback);
	this.imageMapData = imageMapData;
	this.hammer = new Hammer.Manager(element);
	this.hammer.add(new Hammer.Press());
	this.hammer.add(new Hammer.Swipe());
	this.hammer.add(new Hammer.Pan());
	this.hammer.add(new Hammer.Tap({ taps : 1}));
	this.defaultAct = this.DEFAULT_ACT_HOVER;
	this.interactionList = troshx_sos_vue_combat_UIInteraction.setupDollViewInteracts(imageMapData.layoutItemList,imageMapData.titleList,imageMapData.classList);
	this.hammer.on("hammer.input move panup pandown tap press swipeleft swiperight swipeup",$bind(this,this.handleUIGesture));
};
$hxClasses["troshx.sos.vue.combat.HammerJSCombat"] = troshx_sos_vue_combat_HammerJSCombat;
troshx_sos_vue_combat_HammerJSCombat.__name__ = ["troshx","sos","vue","combat","HammerJSCombat"];
troshx_sos_vue_combat_HammerJSCombat.prototype = {
	setNewInteractionList: function(arr) {
		this.interactionList = arr;
	}
	,defaultCallback: function(index,event) {
		if(this.viewModel == null) {
			console.log("Receiving event from:" + index + " ::" + event + " >" + this.currentGesture.type + " :" + this.currentGesture.eventType);
			return;
		}
		if(this.viewModel.actingState == 1) {
			if(event == 2) {
				console.log("Drag move detect");
			} else if(event == 32768) {
				this.viewModel.setActingState(0);
				this.defaultAct = this.DEFAULT_ACT_HOVER;
				this.requiredActs = 0;
				console.log("Drag move release");
			} else if(event == 16384) {
				this.viewModel.setActingState(0);
				this.defaultAct = this.DEFAULT_ACT_HOVER;
				this.requiredActs = 0;
				this.viewModel.setDraggedCP(0);
				console.log("Drag move canceled");
			} else {
				return;
			}
			return;
		}
		var tag = this.imageMapData.classList[index];
		if(tag == "swing" || tag == "part") {
			if(event == 4096 || index != this.viewModel.focusedIndex) {
				this.viewModel.setFocusedIndex(index);
			} else if(event == 1 && index == this.viewModel.focusedIndex) {
				this.viewModel.setDraggedCP(0);
				this.viewModel.showFocusedTag = true;
				this.viewModel.setActingState(1);
				this.requiredActs = 49154;
				this.defaultAct = null;
			}
			return;
		}
		var name = this.imageMapData.titleList[index];
		if(name == "incomingManuevers") {
			if((event & 3840) != 0) {
				this.viewModel.showFocusedTag = false;
			} else if((event & 49152) != 0) {
				this.viewModel.observeOpponent = false;
			} else if((event & 9) != 0) {
				this.viewModel.observeOpponent = true;
			}
		} else if(name != "vitals") {
			console.log("unhadnled:" + name + " ::" + event + " : " + this.currentGesture.type);
		}
	}
	,handleUIGesture: function(e) {
		this.currentGesture = e;
		var pt = e.changedPointers[0];
		var id;
		var touch = null;
		var pointer = null;
		var u;
		var v;
		var canvasWidth = this.imageMapData.scaleX * this.imageMapData.refWidth;
		var canvasHeight = this.imageMapData.scaleY * this.imageMapData.refHeight;
		if(js_Boot.__instanceof(pt,Touch)) {
			touch = pt;
			id = touch.identifier;
			u = touch.pageX / canvasWidth;
			v = touch.pageY / canvasHeight;
		} else {
			pointer = pt;
			id = pointer.pointerId;
			u = pointer.pageX / canvasWidth;
			v = pointer.pageY / canvasHeight;
		}
		var act;
		var mask = this.requiredActs;
		if(e.isFirst && e.type == "hammer.input") {
			act = troshx_sos_vue_combat_UIInteraction.findHit(u,v,this.imageMapData,this.interactionList);
			if(act != null) {
				mask |= act.mask;
				if((mask & 1) != 0) {
					this.callback(act.index,1);
				}
				if(act.mask >= 2) {
					this.activeTouches.h[id] = act;
				}
			} else if(this.defaultAct != null) {
				this.activeTouches.h[id] = this.defaultAct;
			}
		} else {
			if(!this.activeTouches.h.hasOwnProperty(id)) {
				console.log("OUT");
				return;
			}
			act = this.activeTouches.h[id];
			if(act == null) {
				act = this._inputActCache;
				mask |= act.mask;
				this.activeTouches.remove(id);
				this._inputActCache = null;
				if(act == null) {
					return;
				}
			} else {
				mask |= act.mask;
			}
			if(e.type == "hammer.input") {
				if(e.eventType == Hammer.INPUT_MOVE) {
					if((e.deltaX != 0 || e.deltaY != 0) && (act.mask & 12290) != 0) {
						if((mask & 2) != 0) {
							this.callback(act.index,2);
						}
						if((act.mask & 12288) != 0) {
							var act2 = troshx_sos_vue_combat_UIInteraction.findHit(u,v,this.imageMapData,this.interactionList);
							if(act2 != null) {
								if((act2.mask & 8192) != 0 && act2.index == act.index) {
									this.callback(act.index,8192);
								} else if((act2.mask & 4096) != 0 && act2.index != act.index) {
									this.activeTouches.h[id] = act2;
									this.callback(act2.index,4096);
								}
							}
						}
					}
				} else if(e.eventType == Hammer.INPUT_END || e.eventType == Hammer.INPUT_CANCEL) {
					this._inputActCache = act;
					if(e.eventType == Hammer.INPUT_END) {
						if((mask & 65536) != 0 && troshx_sos_vue_combat_UIInteraction.checkHit(u,v,this.imageMapData,act) >= 0) {
							this.callback(act.index,65536);
						}
						if((mask & 32768) != 0) {
							this.callback(act.index,32768);
						}
					} else if((mask & 16384) != 0) {
						this.callback(act.index,16384);
					}
					this.activeTouches.h[id] = null;
					console.log("Removed-l id:" + id);
				} else {
					throw new js__$Boot_HaxeError("Could not resolve event type:" + e.eventType);
				}
				return;
			}
			var _this = this.hammerEventMap;
			var key = e.type;
			var interactType = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if((act.mask & interactType) != 0) {
				if((interactType & 65540) == 0 || troshx_sos_vue_combat_UIInteraction.checkHit(u,v,this.imageMapData,act) >= 0) {
					if(!act.disabled) {
						this.callback(act.index,interactType);
					}
				}
			}
		}
	}
	,__class__: troshx_sos_vue_combat_HammerJSCombat
};
var troshx_sos_vue_combat_LayoutConstraints = function() { };
$hxClasses["troshx.sos.vue.combat.LayoutConstraints"] = troshx_sos_vue_combat_LayoutConstraints;
troshx_sos_vue_combat_LayoutConstraints.__name__ = ["troshx","sos","vue","combat","LayoutConstraints"];
troshx_sos_vue_combat_LayoutConstraints.applyDollView = function(layoutItems,names,tags,refWidth,refHeight) {
	var _g1 = 0;
	var _g = layoutItems.length;
	while(_g1 < _g) {
		var i = _g1++;
		var item = layoutItems[i];
		var name = names[i];
		var tag = tags[i];
		if(tag == "part" || tag == "swing" || name == "enemyHandLeft" || name == "enemyHandRight" || name == "enemyStatus") {
			item.pin(troshx_util_layout_PointScaleConstraint.createRelative(0.5,0.5)).aspect(troshx_util_layout_AspectConstraint.createRelative(1,1).enablePreflight());
		}
		var footMiddleOffset = 0.06;
		switch(name) {
		case "advManuever1":case "advManuever2":case "advManuever3":case "advManuever4":
			item.pin(troshx_util_layout_PointScaleConstraint.createRelative(0.5,0.5).scaleMinRelative(0.5,0).scaleMaxRelative(2.0,0)).pivot(troshx_util_layout_PointScaleConstraint.createRelative(1,0.5).scaleMinRelative(0.5,0.5).scaleMaxRelative(1.5,1.5)).aspect(troshx_util_layout_AspectConstraint.createRelative(1,0.98));
			break;
		case "btnBlock":case "btnParry":case "btnVoid":
			item.pin(troshx_util_layout_PointScaleConstraint.createRelative(0.5,0.5).scaleMaxRelative(1.75,0)).pivot(troshx_util_layout_PointScaleConstraint.createRelative(name != "btnParry" ? 1 : 0,1).scaleMinRelative(0.5,0.5)).aspect(troshx_util_layout_AspectConstraint.createRelative(1,1));
			break;
		case "cpMeter":
			item.pin(troshx_util_layout_PointScaleConstraint.createRelative(0,0).scaleMinRelative(0.5,0.5).scaleMaxRelative(3,3)).pivot(troshx_util_layout_PointScaleConstraint.createRelative(0,0).scaleMaxRelative(2.25,0));
			break;
		case "cpText":
			item.pin(troshx_util_layout_PointScaleConstraint.createRelative(0,0).scaleMinRelative(0.5,0.5).scaleMaxRelative(2.25,3)).pivot(troshx_util_layout_PointScaleConstraint.createRelative(0,1).scaleMinRelative(0.5,0.5).scaleMaxRelative(1,1.1));
			break;
		case "handLeftText":case "handRightText":
			item.pin(troshx_util_layout_PointScaleConstraint.createRelative(0.5 + footMiddleOffset * (name == "handLeftText" ? -1 : 1),1).scaleMaxRelative(1,1)).pivot(troshx_util_layout_PointScaleConstraint.createRelative(name == "handLeftText" ? 1 : 0,1).scaleMaxRelative(0,1.2));
			if(name == "handLeftText") {
				item.border(3,0,1);
				item.border(1,0,1.1,0.5 + footMiddleOffset * -1);
			} else {
				item.border(1,0,1);
				item.border(3,0,1.1,0.5 + footMiddleOffset);
			}
			break;
		case "handLeftAlt":case "handRightAlt":
			item.pin(troshx_util_layout_PointScaleConstraint.createRelative(0.5 + footMiddleOffset * (name == "handLeftAlt" ? -1 : 1),1).scaleMaxRelative(1,1)).pivot(troshx_util_layout_PointScaleConstraint.createRelative(name == "handLeftAlt" ? 1 : 0,1).scaleMaxRelative(1.0,1.1)).aspect(troshx_util_layout_AspectConstraint.createRelative(1.0,0));
			break;
		case "initRange":
			item.pin(troshx_util_layout_PointScaleConstraint.createRelative(0.5,0.5).scaleMinRelative(1,0)).pivot(troshx_util_layout_PointScaleConstraint.createRelative(0.5,1)).aspect(troshx_util_layout_AspectConstraint.createRelative(1,1).enablePreflight());
			break;
		case "opponentSwiper":
			item.pivot(troshx_util_layout_PointScaleConstraint.createRelative(0,0).scaleMinRelative(0,0.5));
			break;
		case "roundCount":
			item.pivot(troshx_util_layout_PointScaleConstraint.createRelative(0,0).scaleMinRelative(0,0.5));
			break;
		case "vitals":
			item.pin(troshx_util_layout_PointScaleConstraint.createRelative(0,0).scaleMinRelative(0,0.5)).pivot(troshx_util_layout_PointScaleConstraint.createRelative(0,0).scaleMinRelative(0.85,0.5).scaleMaxRelative(3,3));
			break;
		}
	}
};
var troshx_sos_vue_combat_UIInteraction = function() { };
$hxClasses["troshx.sos.vue.combat.UIInteraction"] = troshx_sos_vue_combat_UIInteraction;
troshx_sos_vue_combat_UIInteraction.__name__ = ["troshx","sos","vue","combat","UIInteraction"];
troshx_sos_vue_combat_UIInteraction.requiresConfirmHit = function(mask) {
	return (mask & 65540) != 0;
};
troshx_sos_vue_combat_UIInteraction.requiresTracking = function(mask) {
	return mask >= 2;
};
troshx_sos_vue_combat_UIInteraction.requiresContinousHandling = function(mask) {
	return (mask & 12034) != 0;
};
troshx_sos_vue_combat_UIInteraction.isValidPoly = function(poly) {
	return poly.length >= 3;
};
troshx_sos_vue_combat_UIInteraction.weldPoly = function(poly,dupPoints) {
	var map_h = { };
	var _g1 = 0;
	var _g = dupPoints.length;
	while(_g1 < _g) {
		var i = _g1++;
		map_h[dupPoints[i]] = true;
	}
	var newPoly = [];
	var _g11 = 0;
	var _g2 = poly.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		if(!map_h.hasOwnProperty(i1)) {
			newPoly.push(poly[i1]);
		}
	}
	return newPoly;
};
troshx_sos_vue_combat_UIInteraction.setupDollViewInteracts = function(layoutItems,names,tags) {
	var arr = [];
	var _g1 = 0;
	var _g = layoutItems.length;
	while(_g1 < _g) {
		var i = _g1++;
		var item = layoutItems[i];
		var name = names[i];
		var tag = tags[i];
		if(item.shape == 2) {
			var dupPoints = hxGeomAlgo_PolyTools.findDuplicatePoints(item.uvs,true,true);
			if(dupPoints.length != 0) {
				item.uvs = troshx_sos_vue_combat_UIInteraction.weldPoly(item.uvs,dupPoints);
			}
			hxGeomAlgo_PolyTools.makeCW(item.uvs);
			if(!hxGeomAlgo_PolyTools.isConvex(item.uvs)) {
				item.hitDecomposition = hxGeomAlgo_Bayazit.decomposePoly(item.uvs);
				var lastLen = item.hitDecomposition.length;
				item.hitDecomposition = item.hitDecomposition.filter(troshx_sos_vue_combat_UIInteraction.isValidPoly);
				if(item.hitDecomposition.length == 0 || item.hitDecomposition.length != lastLen) {
					console.log("WARNING!! invalid decomposition occured: " + name + " : " + item.hitDecomposition.length + " / " + lastLen);
					item.hitDecomposition = null;
				}
			}
		}
		if(tag == "part" || tag == "swing") {
			item.hitPadding = 5;
		}
		if(tag == "part" || tag == "swing" || name == "enemyHandLeft" || name == "enemyHandRight") {
			arr.push(new troshx_sos_vue_combat_UInteract(i,53249));
			continue;
		}
		switch(name) {
		case "advManuever1":case "advManuever2":case "advManuever3":case "advManuever4":
			arr.push(new troshx_sos_vue_combat_UInteract(i,1));
			break;
		case "btnBlock":case "btnParry":case "btnVoid":
			item.hitPadding = 5;
			arr.push(new troshx_sos_vue_combat_UInteract(i,49153));
			break;
		case "cpMeter":
			break;
		case "cpText":
			break;
		case "handLeftText":case "handRightText":
			break;
		case "handLeftAlt":case "handRightAlt":
			arr.push(new troshx_sos_vue_combat_UInteract(i,172));
			break;
		case "incomingManuevers":
			arr.push(new troshx_sos_vue_combat_UInteract(i,50433));
			break;
		case "initRange":
			arr.push(new troshx_sos_vue_combat_UInteract(i,1));
			break;
		case "opponentSwiper":
			arr.push(new troshx_sos_vue_combat_UInteract(i,160));
			break;
		case "roundCount":
			break;
		case "vitals":
			arr.push(new troshx_sos_vue_combat_UInteract(i,1281));
			break;
		}
	}
	return arr;
};
troshx_sos_vue_combat_UIInteraction.findHit = function(u,v,mapData,interacts) {
	var closestHit = null;
	var closestHitDist = 999999999999;
	var _g1 = 0;
	var _g = interacts.length;
	while(_g1 < _g) {
		var i = _g1++;
		var act = interacts[i];
		if(act.disabled) {
			continue;
		}
		var hitResult = troshx_sos_vue_combat_UIInteraction.checkHit(u,v,mapData,act);
		if(hitResult >= 0) {
			if(hitResult == 0) {
				return act;
			} else if(hitResult < closestHitDist) {
				closestHit = act;
				closestHitDist = hitResult;
			}
		}
	}
	return closestHit;
};
troshx_sos_vue_combat_UIInteraction.checkHit = function(u,v,mapData,act) {
	var layout = mapData.layoutItemList[act.index];
	var pos = mapData.positionList[act.index];
	var scale = mapData.scaleList[act.index];
	var sw = mapData.scaleX * mapData.refWidth;
	var sh = mapData.scaleY * mapData.refHeight;
	var cx;
	var cy;
	var dx;
	var dy;
	var d;
	var d2;
	var x = u * sw;
	var y = v * sh;
	var minX = pos.x * sw;
	var minY = pos.y * sh;
	var r;
	var maxX = minX + scale.x * sw;
	var maxY = minY + scale.y * sh;
	var paddX = layout.hitPadding * mapData.scaleX * (scale.x / layout.uDim);
	var paddY = layout.hitPadding * mapData.scaleY * (scale.y / layout.vDim);
	if(x >= minX && x <= maxX && y >= minY && y <= maxY) {
		if(layout.shape == 0) {
			return 0;
		}
	} else if(layout.shape == 0) {
		if(layout.hitPadding <= 0) {
			return -1;
		}
		if(x > maxX) {
			dx = x - maxX;
		} else if(x < minX) {
			dx = x - minX;
		} else {
			dx = 0;
		}
		if(y > maxY) {
			dy = y - maxY;
		} else if(y < minY) {
			dy = y - minY;
		} else {
			dy = 0;
		}
		d2 = dx * dx + dy * dy;
		if(paddX < paddY) {
			r = paddY;
		} else {
			r = paddX;
		}
		dx *= r / paddX;
		dy *= r / paddY;
		d = dx * dx + dy * dy;
		if(d <= r * r) {
			return d2;
		}
		return -1;
	}
	if(layout.shape == 1) {
		dx = (maxX - minX) * 0.5;
		dy = (maxY - minY) * 0.5;
		cx = minX + dx;
		cy = minY + dy;
		if(dx < dy) {
			r = dy;
		} else {
			r = dx;
		}
		var sx = 1;
		var sy = 1;
		if(layout.hitPadding > 0) {
			sx = r / dx;
			sy = r / dy;
		}
		dx = x - cx;
		dy = y - cy;
		dx *= sx;
		dy *= sy;
		d = dx * dx + dy * dy;
		if(d <= r * r) {
			return 0;
		}
		d2 = d;
		dx += (dx < 0 ? 1 : -1) * paddX * sx;
		dy += (dy < 0 ? 1 : -1) * paddY * sy;
		d = dx * dx + dy * dy;
		if(d <= r * r) {
			d = Math.sqrt(d2) - r;
			return d * d;
		}
	} else {
		var pt = troshx_sos_vue_combat_UIInteraction.SAMPLE_PT;
		pt.x = x;
		pt.y = y;
		if(layout.hitDecomposition == null) {
			r = troshx_sos_vue_combat_UIInteraction.checkHitPolygon(pt,layout.uvs,paddX,paddY,pos,scale,sw,sh);
			return r;
		} else {
			r = 99999999999;
			var gotPaddHit = false;
			var _g1 = 0;
			var _g = layout.hitDecomposition.length;
			while(_g1 < _g) {
				var p = _g1++;
				dx = troshx_sos_vue_combat_UIInteraction.checkHitPolygon(pt,layout.hitDecomposition[p],paddX,paddY,pos,scale,sw,sh);
				if(dx == 0) {
					return 0;
				}
				if(dx > 0 && dx < r) {
					gotPaddHit = true;
					r = dx;
				}
			}
			if(gotPaddHit) {
				return r;
			} else {
				return -1;
			}
		}
	}
	return -1;
};
troshx_sos_vue_combat_UIInteraction.checkHitPolygon = function(pt,poly,paddX,paddY,pos,scale,sw,sh) {
	var len = poly.length;
	var p;
	var p2;
	var side;
	var shortestDist = 99999999999;
	var gotPaddHit = false;
	var x = pos.x * sw;
	var y = pos.y * sh;
	var width = scale.x * sw;
	var height = scale.y * sh;
	var a = troshx_sos_vue_combat_UIInteraction.SAMPLE_PT_A;
	var b = troshx_sos_vue_combat_UIInteraction.SAMPLE_PT_B;
	var noPadding = paddX == 0 && paddY == 0;
	var r = paddX < paddY ? paddY : paddX;
	var sx = noPadding ? 1 : r / paddX;
	var sy = noPadding ? 1 : r / paddY;
	r *= r;
	var i = 0;
	while(i < len) {
		p = poly[i];
		if(i < len - 1) {
			p2 = poly[i + 1];
		} else {
			p2 = poly[0];
		}
		a.x = x + p.x * width;
		b.x = x + p2.x * width;
		a.y = y + p.y * height;
		b.y = y + p2.y * height;
		side = (a.x - pt.x) * (b.y - pt.y) - (b.x - pt.x) * (a.y - pt.y) > 0;
		if(!side) {
			if(noPadding) {
				return -1;
			}
			if(troshx_sos_vue_combat_UIInteraction.distanceToSegmentSquaredPaddScaled(pt,a,b,sx,sy) <= r) {
				var d = hxGeomAlgo_PolyTools.distanceToSegmentSquared(pt,a,b);
				return d;
			}
			return -1;
		}
		++i;
	}
	if(!gotPaddHit) {
		return 0;
	} else {
		return shortestDist;
	}
};
troshx_sos_vue_combat_UIInteraction.distanceSquaredPaddScaled = function(v,w,sx,sy) {
	var x = (v.x - w.x) * sx;
	var x1 = (v.y - w.y) * sy;
	return x * x + x1 * x1;
};
troshx_sos_vue_combat_UIInteraction.distanceToSegmentSquaredPaddScaled = function(p,v,w,sx,sy) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	var l2 = x * x + x1 * x1;
	if(l2 == 0) {
		var x2 = (p.x - v.x) * sx;
		var x3 = (p.y - v.y) * sy;
		return x2 * x2 + x3 * x3;
	}
	var t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;
	if(t < 0) {
		var x4 = (p.x - v.x) * sx;
		var x5 = (p.y - v.y) * sy;
		return x4 * x4 + x5 * x5;
	}
	if(t > 1) {
		var x6 = (p.x - w.x) * sx;
		var x7 = (p.y - w.y) * sy;
		return x6 * x6 + x7 * x7;
	}
	var this1 = troshx_sos_vue_combat_UIInteraction.SAMPLE_PT2;
	this1.x = v.x + t * (w.x - v.x);
	this1.y = v.y + t * (w.y - v.y);
	var w1 = troshx_sos_vue_combat_UIInteraction.SAMPLE_PT2;
	var x8 = (p.x - w1.x) * sx;
	var x9 = (p.y - w1.y) * sy;
	return x8 * x8 + x9 * x9;
};
var troshx_sos_vue_combat_UInteract = function(index,mask) {
	this.index = index;
	this.mask = mask;
	this.disabled = false;
};
$hxClasses["troshx.sos.vue.combat.UInteract"] = troshx_sos_vue_combat_UInteract;
troshx_sos_vue_combat_UInteract.__name__ = ["troshx","sos","vue","combat","UInteract"];
troshx_sos_vue_combat_UInteract.getIndexMapOfArray = function(arr) {
	var map = new haxe_ds_IntMap();
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		map.h[arr[i].index] = arr[i];
	}
	return map;
};
troshx_sos_vue_combat_UInteract.prototype = {
	__class__: troshx_sos_vue_combat_UInteract
};
var troshx_sos_vue_combat_components_DollView = function() {
	haxevx_vuex_core_VComponent.call(this);
};
$hxClasses["troshx.sos.vue.combat.components.DollView"] = troshx_sos_vue_combat_components_DollView;
troshx_sos_vue_combat_components_DollView.__name__ = ["troshx","sos","vue","combat","components","DollView"];
troshx_sos_vue_combat_components_DollView.getRenderTrackedImageData = function() {
	return { renderCount : 0};
};
troshx_sos_vue_combat_components_DollView.getBlankImageMapData = function() {
	return { layoutItemList : null, positionList : [], scaleList : [], titleList : [], classList : [], refWidth : 0, refHeight : 0, scaleX : 1, scaleY : 1};
};
troshx_sos_vue_combat_components_DollView.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_combat_components_DollView.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	get_pregenHeader: function() {
		if(this.showPregens == 1) {
			return "Select your character";
		} else {
			return "Select your opponent";
		}
	}
	,closePregens: function() {
		this.showPregens = 0;
	}
	,confirmPregens: function(val) {
		var boutModel = this.boutModel;
		if(boutModel.bout == null) {
			boutModel.bout = new troshx_components_Bout();
		}
		var viewModel = this.viewModel;
		var showPregens = this.showPregens;
		if(showPregens == 1) {
			var valData = val;
			var node = new troshx_components_FightNode(valData.label,this.deserializeSheet(valData.savedData),0);
			var theIndex = boutModel.bout.combatants.length;
			boutModel.bout.combatants.push(node);
			viewModel.currentPlayerIndex = theIndex;
			var _this = node.charSheet;
			var row = _this.get_encumbranceLvlRow();
			var tmp = row.cpMult * _this.clampIntZero(_this.getModifiedValue(13,(_this.schoolLevel >= 1 ? _this.schoolLevel : 0) + _this.clampIntZero(_this.getModifiedValue(8,(_this.get_AGI() + _this.get_WIT()) / 2 | 0))) * (_this.prone ? 0.5 : 1) + row.cp + troshx_sos_sheets_FatiqueTable.getTable()[_this.get_fatiqueLevel()].cp);
			node.fight.cp = tmp;
		} else if(showPregens == 4) {
			var valData1 = val;
			var node1 = new troshx_components_FightNode(valData1.label,this.deserializeSheet(valData1.savedData),1);
			boutModel.bout.combatants.push(node1);
		}
		this.showPregens = 0;
	}
	,deserializeSheet: function(dataStr) {
		var unserializer = new haxe_Unserializer(dataStr);
		var data = unserializer.unserialize();
		return data;
	}
	,showSelfPregens: function() {
		this.showPregens = 1;
	}
	,showOpponentPregens: function() {
		this.showPregens = 4;
	}
	,get_boutModel: function() {
		return this.viewModel.boutModel;
	}
	,get_remainingDisplayCP: function() {
		return this.viewModel.getRemainingDisplayCP();
	}
	,get_fatique: function() {
		var _this = this.viewModel;
		var pl = _this.currentPlayerIndex >= 0 ? _this.boutModel.bout.combatants[_this.currentPlayerIndex] : null;
		return pl.charSheet.fatique;
	}
	,get_CP: function() {
		var _this = this.viewModel;
		var pl = _this.currentPlayerIndex >= 0 ? _this.boutModel.bout.combatants[_this.currentPlayerIndex] : null;
		var _this1 = pl.charSheet;
		var row = _this1.get_encumbranceLvlRow();
		return row.cpMult * _this1.clampIntZero(_this1.getModifiedValue(13,(_this1.schoolLevel >= 1 ? _this1.schoolLevel : 0) + _this1.clampIntZero(_this1.getModifiedValue(8,(_this1.get_AGI() + _this1.get_WIT()) / 2 | 0))) * (_this1.prone ? 0.5 : 1) + row.cp + troshx_sos_sheets_FatiqueTable.getTable()[_this1.get_fatiqueLevel()].cp);
	}
	,get_remCP: function() {
		return this.viewModel.getRemainingDisplayCP();
	}
	,get_BL: function() {
		var _this = this.viewModel;
		var pl = _this.currentPlayerIndex >= 0 ? _this.boutModel.bout.combatants[_this.currentPlayerIndex] : null;
		return pl.charSheet.get_totalBloodLost();
	}
	,get_pain: function() {
		var _this = this.viewModel;
		var pl = _this.currentPlayerIndex >= 0 ? _this.boutModel.bout.combatants[_this.currentPlayerIndex] : null;
		return pl.charSheet.get_totalBloodLost();
	}
	,Data: function() {
		return { mapData : troshx_sos_vue_combat_components_DollView.getRenderTrackedImageData(), viewModel : new troshx_sos_vue_combat_CombatViewModel(), fightChars : new troshx_sos_pregens_FightCharacters(), showPregens : 0};
	}
	,getPartPropsOf: function(name) {
		var p = this.layoutViewPropsOf(name);
		var d = this.mapData;
		var _this = d.idIndices;
		var i = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		p.fillColor = "rgba(0,200,255,0.3)";
		p.strokeColor = "rgba(0,200,255,0.3)";
		p.strokeWidth = 4 * (this.mapData.scaleX < this.mapData.scaleY ? this.mapData.scaleX : this.mapData.scaleY);
		p.showShape = i == this.viewModel.focusedIndex;
		return p;
	}
	,getSwingPropsOf: function(name) {
		var p = this.layoutViewPropsOf(name);
		var d = this.mapData;
		var _this = d.idIndices;
		var i = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		p.fillColor = "rgba(0,255,255,0.3)";
		p.strokeColor = "rgba(0,255,255,0.3)";
		p.strokeWidth = 8 * (this.mapData.scaleX < this.mapData.scaleY ? this.mapData.scaleX : this.mapData.scaleY);
		p.showShape = i == this.viewModel.focusedIndex;
		return p;
	}
	,layoutViewPropsOf: function(name) {
		var d = this.mapData;
		var _this = d.idIndices;
		var i = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		return { title : d.titleList[i], x : d.positionList[i].x * d.refWidth * d.scaleX, y : d.positionList[i].y * d.refHeight * d.scaleY, width : d.scaleList[i].x * d.refWidth * d.scaleX, height : d.scaleList[i].y * d.refHeight * d.scaleY, item : d.layoutItemList[i]};
	}
	,get_focusedTextLbl: function() {
		var lbl = this.viewModel.getFocusedLabel();
		if(lbl == null) {
			lbl = this.viewModel.getBodyPartLabel(this.viewModel.focusedIndex);
		}
		return lbl;
	}
	,get_player: function() {
		var _this = this.viewModel;
		if(_this.currentPlayerIndex >= 0) {
			return _this.boutModel.bout.combatants[_this.currentPlayerIndex];
		} else {
			return null;
		}
	}
	,get_opponents: function() {
		var _this = this.viewModel;
		var playerSideIndex = 0;
		if(_this.boutModel.bout == null) {
			return null;
		} else {
			return _this.boutModel.bout.combatants.filter(function(obj) {
				return obj.sideIndex != playerSideIndex;
			});
		}
	}
	,get_dollScale: function() {
		var x = this.mapData.scaleX;
		var y = this.mapData.scaleY;
		var R = this.mapData.renderCount;
		if(y < x) {
			return y;
		} else {
			return x;
		}
	}
	,get_gotPregens: function() {
		if(this.fightChars != null) {
			return this.showPregens != 0;
		} else {
			return false;
		}
	}
	,get_thrustPointStyle: function() {
		var scale = this.dollScale;
		var d = scale * 9;
		return { width : d + "px", height : d + "px"};
	}
	,get_clampedOpponentIndex: function() {
		var opponents = this.opponents;
		var focusIndex = this.viewModel.focusOpponentIndex;
		if(opponents == null || opponents.length == 0) {
			return 0;
		}
		if(focusIndex < opponents.length) {
			return focusIndex;
		} else {
			return opponents.length - 1;
		}
	}
	,get_currentOpponent: function() {
		return this.opponents[this.clampedOpponentIndex];
	}
	,get_gotOpponents: function() {
		if(this.opponents != null) {
			return this.opponents.length >= 1;
		} else {
			return false;
		}
	}
	,Components: function() {
		return { zone : new troshx_sos_vue_combat_components_LayoutItemView(), pregens : new troshx_sos_vue_pregen_PregenSelectView()};
	}
	,Mounted: function() {
		var _gthis = this;
		var img = this.$refs.image;
		if(img.width > 0) {
			this.handleImageMap(img);
		} else {
			img.onload = function() {
				_gthis.handleImageMap(img);
			};
		}
	}
	,startGame: function() {
	}
	,setupUIInteraction: function() {
		this.hammerUI = new troshx_sos_vue_combat_HammerJSCombat(this.$refs.container,this.mapData);
		this.hammerUI.viewModel = this.viewModel;
		this.viewModel.setupDollInteraction(this.hammerUI.interactionList,this.mapData);
		this.viewModel.setActingState(2);
	}
	,get_actingState: function() {
		return this.viewModel.actingState;
	}
	,onActingStateChanged: function(newValue,oldValue) {
		var arr = this.viewModel.getInteractionListByState(newValue);
		this.hammerUI.interactionList = arr != null ? arr : this.viewModel.getInteractionListByState(2);
	}
	,onOpponentsStateChange: function(newValue,oldValue) {
		if(newValue) {
			this.viewModel.setActingState(0);
		} else {
			this.viewModel.setActingState(2);
		}
	}
	,handleImageMap: function(img) {
		var map = this.$refs.map;
		var c = map.firstChild;
		var d = this.mapData;
		d.refWidth = img.width;
		d.refHeight = img.height;
		d.layoutItemList = [];
		d.positionList = [];
		d.scaleList = [];
		d.titleList = [];
		d.classList = [];
		var idIndices = new haxe_ds_StringMap();
		var count = 0;
		var arr = [];
		while(c != null) {
			if(c.nodeName.toLowerCase() == "area") {
				var elem = c;
				d.positionList.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new());
				d.scaleList.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new());
				d.classList.push(elem.getAttribute("alt"));
				var title = elem.getAttribute("title");
				d.titleList.push(title);
				var value = count++;
				if(__map_reserved[title] != null) {
					idIndices.setReserved(title,value);
				} else {
					idIndices.h[title] = value;
				}
				arr.push(troshx_util_layout_LayoutItem.fromHTMLImageMapArea(img.width,img.height,elem.getAttribute("shape"),elem.getAttribute("coords")));
			}
			c = c.nextSibling;
		}
		d.layoutItemList = arr;
		d.idIndices = idIndices;
		troshx_sos_vue_combat_LayoutConstraints.applyDollView(arr,d.titleList,d.classList,d.refWidth,d.refHeight);
		window.addEventListener("resize",$bind(this,this.onResize));
		this.onResize();
		this.setupUIInteraction();
	}
	,onResize: function() {
		var container = this.$refs.container;
		var screenWidth = parseFloat(container.clientWidth);
		var screenHeight = parseFloat(container.clientHeight);
		var d = this.mapData;
		d.scaleX = screenWidth / d.refWidth;
		d.scaleY = screenHeight / d.refHeight;
		this.refreshLayout();
	}
	,refreshLayout: function() {
		var d = this.mapData;
		var _g1 = 0;
		var _g = d.layoutItemList.length;
		while(_g1 < _g) {
			var i = _g1++;
			d.layoutItemList[i].solve(d.positionList[i],d.scaleList[i],d.scaleX,d.scaleY);
		}
		d.renderCount++;
	}
	,Template: function() {
		return "<div class=\"dollview\" style=\"position:absolute;top:0;left:0;width:100%;height:100%\"  ref=\"container\">\r\n\t<div v-if=\"mapData.renderCount!=0\" style=\"width:100%;height:100%;top:0;left;0;position:absolute;\">\r\n\t\t<div class=\"bg\" v-show=\"gotOpponents\" style=\"position:absolute;top:0;left:0;width:100%;height:100%;background-repeat:no-repeat; background-image:url(images/dollscreen_clear.png); background-position:50% 50%; background-size:contain\"></div>\r\n\t\t\r\n\t\t<zone v-bind=\"layoutViewPropsOf('vitals')\" style=\"padding:5px\" class=\"textarea-region\">\r\n\t\t\t<div v-if=\"player\">\r\n\t\t\t\t<div>F: <span>{{fatique}}</span></div>\r\n\t\t\t\t<div>Pain: <span>{{pain}}</span></div>\r\n\t\t\t\t<div>BL: <span>{{BL}}</span></div>\r\n\t\t\t</div>\r\n\t\t\t<div v-else>\r\n\t\t\t\t<button @click=\"showSelfPregens\" style=\"width:100%; height:100%; position:absolute;top:0;left:0;width:100%;height:100%\">Select your character</button>\r\n\t\t\t</div>\r\n\t\t</zone>\r\n\t\t\r\n\t\t<zone v-bind=\"layoutViewPropsOf('incomingManuevers')\" style=\"padding:5px\" class=\"textarea-region\">\r\n\t\t\t<div v-show=\"viewModel.observeOpponent\">observing..</div>\r\n\t\t\t<div class=\"hover-tag\" v-show=\"viewModel.showFocusedTag\">{{focusedTextLbl}}</div>\r\n\t\t</zone>\r\n\t\t\t\r\n\t\t<div v-if=\"player\">\r\n\t\t\t<zone v-bind=\"layoutViewPropsOf('cpMeter')\">\r\n\t\t\t\t<div v-for=\"i in player.fight.cp\">{{i}}</div>\r\n\t\t\t</zone>\r\n\t\t\t\t\r\n\t\t\t<zone v-bind=\"layoutViewPropsOf('cpText')\">\r\n\t\t\t\t<div> {{CP}}cp</div>\r\n\t\t\t\t<div v-show=\"viewModel.draggedCP\">-{{viewModel.draggedCP}}</div>\r\n\t\t\t\t<div v-show=\"viewModel.draggedCP\"> {{remCP}}</div>\r\n\t\t\t</zone>\r\n\t\t</div>\r\n\t\t\t\t\r\n\t\t<div v-if=\"gotOpponents\">\r\n\t\t\t<div class=\"parts\">\t\r\n\t\t\t\t<zone v-bind=\"getPartPropsOf(li)\" v-for=\"(li, i) in viewModel.DOLL_PART_Slugs\" :key=\"li\">\r\n\t\t\t\t\t<div class=\"thrust-point\" v-if=\"viewModel.isDollPartThrustable(i)\" :style=\"thrustPointStyle\"></div>\r\n\t\t\t\t</zone>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<div class=\"swings\">\r\n\t\t\t\t<zone v-bind=\"getSwingPropsOf(li)\" v-for=\"(li, i) in viewModel.DOLL_SWING_Slugs\" :key=\"li\"></zone>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<zone v-bind=\"layoutViewPropsOf('opponentSwiper')\" class=\"textarea-region\">\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li v-for=\"(li, i) in opponents\" :key=\"i\">{{li.label}}</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</zone>\r\n\t\t</div>\t\r\n\t\t<div v-else>\r\n\t\t\t<div class=\"select-opponent\">\r\n\t\t\t\t<button @click=\"showOpponentPregens\">Select opponent</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\t\r\n\t\t\r\n\t\t<div v-if=\"gotPregens\">\r\n\t\t\t<pregens :header=\"pregenHeader\" :characters=\"fightChars.pool\" @close=\"closePregens\" @singleCharSelected=\"confirmPregens\" @multiCharSelected=\"confirmPregens\"></pregens>\r\n\t\t</div>\r\n\t\t\t\r\n\t</div>\r\n\t<div class=\"image-map-holder\" style=\"position:relative; display:none\">\r\n\t\t<img src=\"images/dollscreen.png\" style=\"transform-origin:0 0; pointer-events:none; opacity:0.12\" usemap=\"#map\" ref=\"image\" />\r\n\t\t<map name=\"map\" ref=\"map\">\r\n\t\t\t<area shape=\"poly\" coords=\"316, 519, 314, 580, 305, 622, 317, 659, 374, 585\" alt=\"swing\" title=\"SWING_LOWER_LEG-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"124, 567, 170, 525, 172, 576, 179, 619, 160, 663\" alt=\"swing\" title=\"SWING_LOWER_LEG-r\" />\r\n\t\t\t<area shape=\"rect\" coords=\"224, 478, 261, 585\" title=\"enemyStatus\" />\r\n\t\t\t<area shape=\"poly\" coords=\"238, 76, 254, 78, 262, 85, 267, 115, 262, 115, 255, 96, 244, 95, 234, 97, 223, 115, 217, 115, 223, 85, 238, 76\" alt=\"part\" title=\"UPPER_HEAD\" />\r\n\t\t\t<area shape=\"poly\" coords=\"309, 400, 310, 483, 313, 506, 378, 574, 366, 421\" alt=\"swing\" title=\"SWING_UPPER_LEG-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"124, 432, 172, 409, 175, 499, 115, 557\" alt=\"swing\" title=\"SWING_UPPER_LEG-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"302, 332, 351, 364, 364, 413, 306, 390\" alt=\"swing\" title=\"SWING_GROIN-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"142, 358, 181, 334, 171, 392, 124, 418\" alt=\"swing\" title=\"SWING_GROIN-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"302, 254, 331, 307, 361, 333, 349, 349, 307, 318, 300, 315\" alt=\"swing\" title=\"SWING_TORSO-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"137, 319, 172, 278, 183, 259, 185, 322, 141, 351\" alt=\"swing\" title=\"SWING_TORSO-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"356, 263, 399, 235, 411, 300, 387, 311\" alt=\"swing\" title=\"SWING_LOWER_ARM-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"319, 168, 352, 254, 399, 224, 366, 168\" alt=\"swing\" title=\"SWING_UPPER_ARM-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"271, 77, 272, 127, 306, 83\" alt=\"swing\" title=\"SWING_DOWNWARD_HEAD-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"166, 82, 213, 132, 210, 77\" alt=\"swing\" title=\"SWING_DOWNWARD_HEAD-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"313, 83, 269, 144, 285, 158, 366, 162\" alt=\"swing\" title=\"SWING_NECK-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"219, 78, 242, 46, 264, 79, 267, 91, 220, 93\" alt=\"swing\" title=\"SWING_UPWARD_HEAD\" />\r\n\t\t\t<area shape=\"poly\" coords=\"89, 226, 133, 258, 101, 309, 67, 310\" alt=\"swing\" title=\"SWING_LOWER_ARM-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"87, 213, 139, 250, 159, 186, 170, 164, 115, 162\" alt=\"swing\" title=\"SWING_UPPER_ARM-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"153, 85, 219, 144, 200, 159, 120, 157\" alt=\"swing\" title=\"SWING_NECK-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"224, 124, 228, 144, 247, 149, 258, 142, 269, 123, 263, 123, 250, 134, 237, 134, 228, 124\" alt=\"part\" title=\"LOWER_HEAD\" />\r\n\t\t\t<area shape=\"poly\" coords=\"322, 192, 339, 250, 315, 256, 308, 243, 306, 223, 322, 192\" alt=\"part\" title=\"UPPER_ARM-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"98, 321, 106, 322, 111, 333, 97, 367, 94, 338, 79, 330, 98, 321\" alt=\"part\" title=\"HAND-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"393, 328, 399, 346, 395, 359, 384, 357, 370, 329, 386, 320\" alt=\"part\" title=\"HAND-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"356, 283, 381, 313, 368, 324, 347, 311, 327, 279, 349, 270\" alt=\"part\" title=\"FOREARM-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"334, 253, 345, 263, 325, 273, 318, 260\" alt=\"part\" title=\"ELBOW-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"138, 267, 155, 281, 116, 327, 105, 317\" alt=\"part\" title=\"FOREARM-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"284, 620, 294, 619, 299, 650, 312, 666, 309, 671, 284, 672, 279, 637\" alt=\"part\" title=\"FOOT-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"188, 619, 202, 619, 207, 633, 205, 668, 199, 673, 169, 669, 183, 647, 188, 630\" alt=\"part\" title=\"FOOT-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"250, 383, 267, 368, 297, 367, 302, 390, 298, 457, 298, 480, 286, 481, 271, 486, 261, 421\" alt=\"part\" title=\"THIGH-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"301, 517, 306, 520, 308, 534, 306, 580, 297, 622, 284, 621, 275, 563, 274, 519, 291, 524, 301, 517\" alt=\"part\" title=\"SHIN-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"180, 516, 195, 523, 210, 518, 211, 558, 202, 614, 186, 614, 182, 600, 177, 571, 180, 516\" alt=\"part\" title=\"SHIN-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"274, 496, 289, 492, 301, 494, 302, 508, 292, 520, 273, 511\" alt=\"part\" title=\"KNEE-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"193, 488, 213, 497, 211, 509, 199, 516, 183, 508, 185, 492, 193, 488\" alt=\"part\" title=\"KNEE-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"189, 367, 220, 367, 237, 381, 213, 491, 205, 484, 191, 484, 186, 480, 183, 385, 189, 367\" alt=\"part\" title=\"THIGH-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"243, 343, 258, 367, 248, 379, 239, 380, 228, 366, 243, 343\" alt=\"part\" title=\"GROIN\" />\r\n\t\t\t<area shape=\"poly\" coords=\"287, 326, 293, 332, 295, 363, 262, 363, 253, 350, 253, 342, 269, 331, 287, 326\" alt=\"part\" title=\"HIP-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"197, 324, 220, 331, 235, 341, 223, 363, 188, 363, 197, 324\" alt=\"part\" title=\"HIP-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"195, 259, 218, 266, 208, 295, 213, 325, 197, 319, 195, 259\" alt=\"part\" title=\"SIDE-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"288, 259, 292, 259, 293, 266, 289, 315, 286, 320, 271, 324, 278, 294, 269, 266, 288, 259\" alt=\"part\" title=\"SIDE-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"237, 256, 257, 261, 271, 287, 268, 317, 261, 328, 246, 337, 224, 329, 212, 302, 217, 273, 237, 256\" alt=\"part\" title=\"BELLY\" />\r\n\t\t\t<area shape=\"poly\" coords=\"240, 99, 254, 102, 258, 108, 259, 123, 250, 133, 238, 132, 231, 129, 225, 118, 231, 104, 240, 99\" alt=\"part\" title=\"FACE\" />\r\n\t\t\t<area shape=\"poly\" coords=\"259, 144, 262, 157, 270, 165, 245, 179, 209, 163, 225, 158, 230, 146, 244, 154, 258, 150\" alt=\"part\" title=\"NECK\" />\r\n\t\t\t<area shape=\"poly\" coords=\"286, 169, 307, 171, 317, 186, 305, 217\" alt=\"part\" title=\"SHOULDER-l\" />\r\n\t\t\t<area shape=\"poly\" coords=\"200, 174, 180, 217, 166, 186, 176, 171, 191, 168\" alt=\"part\" title=\"SHOULDER-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"164, 196, 180, 224, 169, 257, 151, 245, 164, 196\" alt=\"part\" title=\"UPPER_ARM-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"151, 253, 166, 263, 158, 276, 140, 261, 149, 249\" alt=\"part\" title=\"ELBOW-r\" />\r\n\t\t\t<area shape=\"poly\" coords=\"276, 170, 299, 223, 294, 252, 264, 260, 242, 250, 221, 260, 190, 250, 188, 220, 210, 171, 246, 186, 276, 170\" alt=\"part\" title=\"CHEST\" />\r\n\t\t\t<area shape=\"rect\" coords=\"1, 177, 13, 723\" title=\"cpMeter\" />\r\n\t\t\t<area shape=\"rect\" coords=\"331, 3, 487, 106\" title=\"incomingManuevers\" />\r\n\t\t\t<area shape=\"rect\" coords=\"71, 3, 320, 34\" title=\"opponentSwiper\" />\r\n\t\t\t<area shape=\"rect\" coords=\"8, 3, 65, 31\" title=\"roundCount\" />\r\n\t\t\t<area shape=\"rect\" coords=\"7, 37, 74, 163\" title=\"vitals\" />\r\n\t\t\t<area shape=\"rect\" coords=\"401, 334, 435, 391\" title=\"enemyHandLeft\" />\r\n\t\t\t<area shape=\"rect\" coords=\"59, 336, 92, 393\" title=\"enemyHandRight\" />\r\n\t\t\t<area shape=\"rect\" coords=\"21, 175, 72, 229\" title=\"cpText\" />\r\n\t\t\t<area shape=\"rect\" coords=\"421, 143, 487, 203\" title=\"advManuever1\" />\r\n\t\t\t<area shape=\"rect\" coords=\"423, 239, 486, 298\" title=\"advManuever2\" />\r\n\t\t\t<area shape=\"rect\" coords=\"424, 425, 489, 481\" title=\"advManuever3\" />\r\n\t\t\t<area shape=\"rect\" coords=\"423, 517, 487, 576\" title=\"advManuever4\" />\r\n\t\t\t<area shape=\"rect\" coords=\"50, 509, 102, 560\" title=\"btnBlock\" />\r\n\t\t\t<area shape=\"rect\" coords=\"391, 610, 443, 661\" title=\"btnParry\" />\r\n\t\t\t<area shape=\"rect\" coords=\"49, 612, 101, 663\" title=\"btnVoid\" />\r\n\t\t\t<area shape=\"rect\" coords=\"39, 688, 118, 721\" title=\"handLeftText\" />\r\n\t\t\t<area shape=\"rect\" coords=\"351, 688, 470, 721\" title=\"handRightText\" />\r\n\t\t\t<area shape=\"rect\" coords=\"271, 684, 347, 721\" title=\"handRightAlt\" />\r\n\t\t\t<area shape=\"rect\" coords=\"123, 684, 199, 721\" title=\"handLeftAlt\" />\r\n\t\t\t<area shape=\"poly\" coords=\"239, 605, 219, 619, 210, 727, 266, 727, 258, 617\" title=\"initRange\" />\r\n\t\t</map>\r\n\t</div>\r\n</div>";
	}
	,_Init: function() {
		var cls = troshx_sos_vue_combat_components_DollView;
		var clsP = cls.prototype;
		this.data = clsP.Data;
		this.components = this.Components();
		this.mounted = clsP.Mounted;
		this.template = this.Template();
		this.computed = { pregenHeader : clsP.get_pregenHeader, boutModel : clsP.get_boutModel, remainingDisplayCP : clsP.get_remainingDisplayCP, fatique : clsP.get_fatique, CP : clsP.get_CP, remCP : clsP.get_remCP, BL : clsP.get_BL, pain : clsP.get_pain, focusedTextLbl : clsP.get_focusedTextLbl, player : clsP.get_player, opponents : clsP.get_opponents, dollScale : clsP.get_dollScale, gotPregens : clsP.get_gotPregens, thrustPointStyle : clsP.get_thrustPointStyle, clampedOpponentIndex : clsP.get_clampedOpponentIndex, currentOpponent : clsP.get_currentOpponent, gotOpponents : clsP.get_gotOpponents, actingState : clsP.get_actingState};
		this.methods = { get_pregenHeader : clsP.get_pregenHeader, closePregens : clsP.closePregens, confirmPregens : clsP.confirmPregens, deserializeSheet : clsP.deserializeSheet, showSelfPregens : clsP.showSelfPregens, showOpponentPregens : clsP.showOpponentPregens, get_boutModel : clsP.get_boutModel, get_remainingDisplayCP : clsP.get_remainingDisplayCP, get_fatique : clsP.get_fatique, get_CP : clsP.get_CP, get_remCP : clsP.get_remCP, get_BL : clsP.get_BL, get_pain : clsP.get_pain, getPartPropsOf : clsP.getPartPropsOf, getSwingPropsOf : clsP.getSwingPropsOf, layoutViewPropsOf : clsP.layoutViewPropsOf, get_focusedTextLbl : clsP.get_focusedTextLbl, get_player : clsP.get_player, get_opponents : clsP.get_opponents, get_dollScale : clsP.get_dollScale, get_gotPregens : clsP.get_gotPregens, get_thrustPointStyle : clsP.get_thrustPointStyle, get_clampedOpponentIndex : clsP.get_clampedOpponentIndex, get_currentOpponent : clsP.get_currentOpponent, get_gotOpponents : clsP.get_gotOpponents, startGame : clsP.startGame, setupUIInteraction : clsP.setupUIInteraction, get_actingState : clsP.get_actingState, onActingStateChanged : clsP.onActingStateChanged, onOpponentsStateChange : clsP.onOpponentsStateChange, handleImageMap : clsP.handleImageMap, onResize : clsP.onResize, refreshLayout : clsP.refreshLayout};
		this.watch = { actingState : clsP.onActingStateChanged, gotOpponents : clsP.onOpponentsStateChange};
	}
	,__class__: troshx_sos_vue_combat_components_DollView
});
var troshx_sos_vue_combat_components_LayoutItemView = function() {
	haxevx_vuex_core_VComponent.call(this);
};
$hxClasses["troshx.sos.vue.combat.components.LayoutItemView"] = troshx_sos_vue_combat_components_LayoutItemView;
troshx_sos_vue_combat_components_LayoutItemView.__name__ = ["troshx","sos","vue","combat","components","LayoutItemView"];
troshx_sos_vue_combat_components_LayoutItemView.drawEllipse = function(context,centerX,centerY,width,height) {
	context.beginPath();
	context.moveTo(centerX,centerY - height * .5);
	context.bezierCurveTo(centerX + width * .5,centerY - height * .5,centerX + width * .5,centerY + height * .5,centerX,centerY + height / 2);
	context.bezierCurveTo(centerX - width * .5,centerY + height * .5,centerX - width * .5,centerY - height * .5,centerX,centerY - height / 2);
	context.closePath();
	context.fill();
	context.stroke();
};
troshx_sos_vue_combat_components_LayoutItemView.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_combat_components_LayoutItemView.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	get_computedStyle: function() {
		var obj = { left : this.x + "px", top : this.y + "px", width : this.width + "px", height : this.height + "px", boxSizing : "border-box"};
		if(troshx_sos_vue_GlobalCanvas2D.CONTEXT != null) {
			return obj;
		}
		if(!this.gotSVG) {
			if(this.showShape || this.debug) {
				obj.outline = this.strokeColor + " solid " + this.strokeWidth + "px";
				obj.backgroundColor = this.fillColor;
				if(this.item.shape == 1) {
					obj.borderRadius = "50%";
					obj.backgroundColor = this.fillColor;
					if(!this.debug) {
						obj.outline = "none";
					}
				}
			}
		}
		return obj;
	}
	,get_gotSVG: function() {
		if(troshx_sos_vue_GlobalCanvas2D.CONTEXT != null) {
			return false;
		}
		return this.item.shape == 2;
	}
	,get_pStyle: function() {
		return { strokeWidth : this.strokeWidth + "px", stroke : this.strokeColor, fill : this.fillColor};
	}
	,get_polyPoints: function() {
		return this.getPolyString(this.item.uvs);
	}
	,getPolyString: function(poly) {
		var xScale = this.width;
		var yScale = this.height;
		var pts = [];
		var _g1 = 0;
		var _g = poly.length;
		while(_g1 < _g) {
			var i = _g1++;
			pts.push(poly[i].x * xScale);
			pts.push(poly[i].y * yScale);
		}
		return pts.join(" ");
	}
	,Updated: function() {
		if(this.showShape && troshx_sos_vue_GlobalCanvas2D.CONTEXT != null) {
			this.renderToCanvas();
		}
	}
	,renderToCanvas: function() {
		var canvas = troshx_sos_vue_GlobalCanvas2D.CANVAS;
		var ctx = troshx_sos_vue_GlobalCanvas2D.CONTEXT;
		ctx.clearRect(0,0,canvas.width,canvas.height);
		var shape = this.item.shape;
		ctx.fillStyle = this.fillColor;
		ctx.strokeStyle = this.strokeColor;
		ctx.lineWidth = this.strokeWidth;
		var x = this.x;
		var y = this.y;
		var xScale = this.width;
		var yScale = this.height;
		switch(shape) {
		case 0:
			ctx.fillRect(x,y,xScale,yScale);
			ctx.strokeRect(x,y,xScale,yScale);
			break;
		case 1:
			var centerX = x * this.width * 0.5;
			var centerY = y * this.height * 0.5;
			var width = this.width;
			var height = this.height;
			ctx.beginPath();
			ctx.moveTo(centerX,centerY - height * .5);
			ctx.bezierCurveTo(centerX + width * .5,centerY - height * .5,centerX + width * .5,centerY + height * .5,centerX,centerY + height / 2);
			ctx.bezierCurveTo(centerX - width * .5,centerY + height * .5,centerX - width * .5,centerY - height * .5,centerX,centerY - height / 2);
			ctx.closePath();
			ctx.fill();
			ctx.stroke();
			break;
		case 2:
			var poly = this.item.uvs;
			ctx.beginPath();
			ctx.moveTo(x + poly[0].x * xScale,y + poly[0].y * yScale);
			var _g1 = 1;
			var _g = poly.length;
			while(_g1 < _g) {
				var i = _g1++;
				ctx.lineTo(x + poly[i].x * xScale,y + poly[i].y * yScale);
			}
			ctx.closePath();
			ctx.fill();
			ctx.stroke();
			break;
		}
	}
	,get_polyDecompPoints: function() {
		if(this.item.hitDecomposition != null) {
			return this.item.hitDecomposition.map($bind(this,this.getPolyString));
		} else {
			return null;
		}
	}
	,get_titleClasses: function() {
		var splits = this.title.split("-");
		var _g1 = 1;
		var _g = splits.length;
		while(_g1 < _g) {
			var i = _g1++;
			splits[i] = "-" + splits[i];
		}
		return splits;
	}
	,Template: function() {
		return "<div class=\"layout-item\" :class=\"[{debug}, titleClasses]\" :data-vis=\"showShape\" :data-title=\"title\" style=\"position:absolute;z-index:1;\" :style=\"computedStyle\">\r\n\t\t\t<svg v-if=\"gotSVG\" v-show=\"debug || showShape\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.2\" baseProfile=\"tiny\" :width=\"width\" :height=\"height\" style=\"position:absolute\">\r\n\t\t\t\t<g style=\"transform-origin:0 0;\">\r\n\t\t\t\t\t<polygon :style=\"pStyle\" :points=\"polyPoints\"></polygon>\r\n\t\t\t\t</g>\r\n\t\t\t\t<g v-if=\"debug\" style=\"transform-origin:0 0;position:absolute\" v-for=\"(p, i) in polyDecompPoints\">\r\n\t\t\t\t\t<polygon style=\"stroke-width:0.5, stroke:#ff0000; fill:transparent\" :points=\"p\" :key=\"i\"></polygon>\r\n\t\t\t\t</g>\r\n\t\t\t</svg>\r\n\t\t\t<slot />\r\n\t\t</div>";
	}
	,_Init: function() {
		var cls = troshx_sos_vue_combat_components_LayoutItemView;
		var clsP = cls.prototype;
		this.updated = clsP.Updated;
		this.template = this.Template();
		this.computed = { computedStyle : clsP.get_computedStyle, gotSVG : clsP.get_gotSVG, pStyle : clsP.get_pStyle, polyPoints : clsP.get_polyPoints, polyDecompPoints : clsP.get_polyDecompPoints, titleClasses : clsP.get_titleClasses};
		this.methods = { get_computedStyle : clsP.get_computedStyle, get_gotSVG : clsP.get_gotSVG, get_pStyle : clsP.get_pStyle, get_polyPoints : clsP.get_polyPoints, getPolyString : clsP.getPolyString, renderToCanvas : clsP.renderToCanvas, get_polyDecompPoints : clsP.get_polyDecompPoints, get_titleClasses : clsP.get_titleClasses};
		this.props = { item : { type : Object}, debug : { "default" : false, type : Boolean}, fillColor : { "default" : "rgba(0,255,0,0.4)", type : String}, strokeColor : { "default" : "#00F", type : String}, showShape : { "default" : false, type : Boolean}, strokeWidth : { "default" : 1, type : Number}, title : { type : String}, y : { type : Number}, height : { type : Number}, width : { type : Number}, x : { type : Number}};
	}
	,__class__: troshx_sos_vue_combat_components_LayoutItemView
});
var troshx_sos_vue_pregen_PregenSelectView = function() {
	haxevx_vuex_core_VComponent.call(this);
};
$hxClasses["troshx.sos.vue.pregen.PregenSelectView"] = troshx_sos_vue_pregen_PregenSelectView;
troshx_sos_vue_pregen_PregenSelectView.__name__ = ["troshx","sos","vue","pregen","PregenSelectView"];
troshx_sos_vue_pregen_PregenSelectView.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_pregen_PregenSelectView.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	Data: function() {
		return { selectedChars : [], selectedChar : -1};
	}
	,onConfirm: function() {
		if(this.multiSelect) {
			this.multiCharSelected();
		} else {
			this.singleCharSelected();
		}
	}
	,get_scrollOptions: function() {
		return { scrollPanel : { scrollingX : false}, bar : { size : "33px", opacity : 1, color : "#ffffff"}, rail : { background : "#01a99a", size : "32px", keepShow : false, opacity : 1}};
	}
	,singleCharSelected: function() {
		var i = this.selectedChar;
		var $char = this.characters[i];
		if(this.splice) {
			this.characters.splice(i,1);
		}
		this.$emit("singleCharSelected",$char);
	}
	,multiCharSelected: function() {
		if(this.selectedChars.length == 0) {
			return;
		}
		var chars = [];
		var _g1 = 0;
		var _g = this.selectedChars.length;
		while(_g1 < _g) {
			var i = _g1++;
			chars.push(this.characters[this.selectedChars[i]]);
		}
		if(this.splice) {
			var _g11 = 0;
			var _g2 = chars.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.characters.splice(this.characters.indexOf(chars[i1]),1);
			}
		}
		this.$emit("multiCharSelected",chars);
	}
	,onClose: function() {
		this.$emit("close");
	}
	,Template: function() {
		return "<div style=\"position:fixed;top:0;left:0;width:100%;height:100%;overflow:auto\" class=\"pregen-select-view\">\r\n\t <vue-scroll :ops=\"scrollOptions\">\r\n\t<h1 v-if=\"header\">{{header}}</h1>\r\n\t<ul v-if=\"characters\">\r\n\t\t<li v-for=\"(li, i) in characters\" :key=\"i\">\r\n\t\t\t<div class=\"checkbox-holder\">\r\n\t\t\t\t<input v-if=\"multiSelect\" type=\"checkbox\" v-model.number=\"selectedChars\" :value=\"i\" :id=\"'popup_cb_'+i\"></input>\r\n\t\t\t\t<input v-else type=\"radio\" :checked=\"selectedChar==i\" :value=\"i\" @click=\"selectedChar=i\" :id=\"'popup_cb_'+i\"></input>\r\n\t\t\t\t<label :for=\"'popup_cb_'+i\">{{li.label}}</label>\r\n\t\t\t\t<div class=\"desc\">{{li.description}}</div>\r\n\t\t\t</div>\r\n\t\t</li>\r\n\t</ul>\r\n\t<div class=\"btn-zone\">\r\n\t\t<a class=\"btn ok\" v-show=\"(multiSelect && selectedChars.length) || (!multiSelect && selectedChar>=0)\" v-on:click=\"onConfirm\"><span>[✓]</span> Okay</a>\r\n\t\t<a class=\"btn close\" v-on:click=\"onClose\"><span>[x]</span> Cancel</a>\r\n\t</div>\r\n\t</vue-scroll>\r\n</div>";
	}
	,_Init: function() {
		var cls = troshx_sos_vue_pregen_PregenSelectView;
		var clsP = cls.prototype;
		this.data = clsP.Data;
		this.template = this.Template();
		this.computed = { scrollOptions : clsP.get_scrollOptions};
		this.methods = { onConfirm : clsP.onConfirm, get_scrollOptions : clsP.get_scrollOptions, singleCharSelected : clsP.singleCharSelected, multiCharSelected : clsP.multiCharSelected, onClose : clsP.onClose};
		this.props = { splice : { "default" : false, type : Boolean}, multiSelect : { "default" : false, type : Boolean}, header : { type : String}, characters : { type : Array}};
	}
	,__class__: troshx_sos_vue_pregen_PregenSelectView
});
var troshx_sos_vue_tests_TestUI = function() {
	this.boot = new haxevx_vuex_core_VxBoot();
	window.document.body.style.padding = "0";
	window.document.body.style.margin = "0";
	window.document.body.style.overflow = "hidden";
	window.document.body.style.width = "100%";
	window.document.body.style.height = "100%";
	window.document.body.style.backgroundColor = "#e4e5e7";
	Vue["use"](vuescroll);
	var cvsGL = window.document.getElementById("canvasGL");
	if(cvsGL != null) {
		cvsGL.style.pointerEvents = "none";
		cvsGL.style.position = "absolute";
		WebGL2D.enable(cvsGL);
		var ctx = cvsGL.getContext("webgl-2d");
		troshx_sos_vue_GlobalCanvas2D.__setupContext(cvsGL,ctx,true);
	}
	this.boot.startVueWithRootComponent("#app",new troshx_sos_vue_combat_components_DollView());
};
$hxClasses["troshx.sos.vue.tests.TestUI"] = troshx_sos_vue_tests_TestUI;
troshx_sos_vue_tests_TestUI.__name__ = ["troshx","sos","vue","tests","TestUI"];
troshx_sos_vue_tests_TestUI.main = function() {
	new troshx_sos_vue_tests_TestUI();
};
troshx_sos_vue_tests_TestUI.prototype = {
	__class__: troshx_sos_vue_tests_TestUI
};
var troshx_sos_vue_tests_layout_AspectConstraintTest = function() {
	haxevx_vuex_core_VComponent.call(this);
};
$hxClasses["troshx.sos.vue.tests.layout.AspectConstraintTest"] = troshx_sos_vue_tests_layout_AspectConstraintTest;
troshx_sos_vue_tests_layout_AspectConstraintTest.__name__ = ["troshx","sos","vue","tests","layout","AspectConstraintTest"];
troshx_sos_vue_tests_layout_AspectConstraintTest.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_tests_layout_AspectConstraintTest.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	Mounted: function() {
		window.addEventListener("resize",$bind(this,this.onResize));
		this.onResize();
	}
	,Created: function() {
		this.aspectConstraint = troshx_util_layout_AspectConstraint.createRelative(2,0);
		console.log(this.aspect * this.aspectConstraint.max);
		console.log(this.aspect * this.aspectConstraint.min);
	}
	,onResize: function() {
		var container = this.$refs.container;
		this.screenWidth = parseFloat(container.clientWidth);
		this.screenHeight = parseFloat(container.clientHeight);
		this.aspectConstraint.findScales(this.testScale,this.screenWidth / this.refWidth,this.screenHeight / this.refHeight);
		this.$refs.testAspect.attributes.style = this.testStyle;
		this.debugField = this.aspect + "<br/>" + this.$refs.testAspect.clientWidth / this.$refs.testAspect.clientHeight;
		console.log(this.debugField);
	}
	,Data: function() {
		return { screenWidth : 0, screenHeight : 0, aspectConstraint : null, refWidth : 150, refHeight : 200, testScale : hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(1,1), debugField : ""};
	}
	,get_aspect: function() {
		return this.refWidth / this.refHeight;
	}
	,get_testStyle: function() {
		var w = this.refWidth * this.testScale.x;
		var h = this.refHeight * this.testScale.y;
		var x = 0;
		var y = 0;
		return { "overflow" : "hidden", "background-color" : "rgba(255,0,0,.5)", "position" : "absolute", "box-sizing" : "border-box", "border" : "1px solid #00ff00", width : w + "px", height : h + "px", top : y + "px", left : x + "px"};
	}
	,Template: function() {
		return "<div>\r\n\t\t\t<div ref=\"container\" style=\"font-size:22px; background-color:orange; position:absolute; top:0; left;0; width:100%; height:100%\">\r\n\t\t\t\t<div ref=\"testAspect\" v-if=\"aspectConstraint\" :style=\"testStyle\" v-html=\"debugField\"></div>\r\n\t\t\t</div>\r\n\t\t</div>";
	}
	,_Init: function() {
		var cls = troshx_sos_vue_tests_layout_AspectConstraintTest;
		var clsP = cls.prototype;
		this.mounted = clsP.Mounted;
		this.created = clsP.Created;
		this.data = clsP.Data;
		this.template = this.Template();
		this.computed = { aspect : clsP.get_aspect, testStyle : clsP.get_testStyle};
		this.methods = { onResize : clsP.onResize, get_aspect : clsP.get_aspect, get_testStyle : clsP.get_testStyle};
	}
	,__class__: troshx_sos_vue_tests_layout_AspectConstraintTest
});
var troshx_sos_vue_tests_layout_LayoutItemTest = function() {
	haxevx_vuex_core_VComponent.call(this);
};
$hxClasses["troshx.sos.vue.tests.layout.LayoutItemTest"] = troshx_sos_vue_tests_layout_LayoutItemTest;
troshx_sos_vue_tests_layout_LayoutItemTest.__name__ = ["troshx","sos","vue","tests","layout","LayoutItemTest"];
troshx_sos_vue_tests_layout_LayoutItemTest.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_tests_layout_LayoutItemTest.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	onResize: function() {
		var container = this.$refs.container;
		this.screenWidth = parseFloat(container.clientWidth);
		this.screenHeight = parseFloat(container.clientHeight);
	}
	,Mounted: function() {
		var container = this.$refs.container;
		this.refWidth = parseFloat(container.clientWidth);
		this.refHeight = parseFloat(container.clientHeight);
		var width = 255;
		var height = 200;
		this.layoutItem = troshx_util_layout_LayoutItem.createRect(this.refWidth,this.refHeight,100,50,width,height).pin(troshx_util_layout_PointScaleConstraint.createRelative(0,0).scaleMinRelative(0.0,0.0).scaleMaxRelative(3.0,3.0)).pivot(troshx_util_layout_PointScaleConstraint.createRelative(0.0,0.0).scaleMinRelative(0.0,0.0).scaleMaxRelative(3.0,3.0)).aspect(troshx_util_layout_AspectConstraint.createRelative(1,1).enablePreflight());
		window.addEventListener("resize",$bind(this,this.onResize));
		this.onResize();
	}
	,Data: function() {
		return { screenWidth : 0, screenHeight : 0, layoutItem : null, refWidth : 550, refHeight : 400, debugField : ""};
	}
	,get_testStyle: function() {
		var testPos = troshx_sos_vue_tests_layout_LayoutItemTest.TEST_POS;
		var testScale = troshx_sos_vue_tests_layout_LayoutItemTest.TEST_SCALE;
		this.layoutItem.solve(testPos,testScale,this.screenWidth / this.refWidth,this.screenHeight / this.refHeight);
		var w = testScale.x * this.screenWidth;
		var h = testScale.y * this.screenHeight;
		var x = testPos.x * this.screenWidth;
		var y = testPos.y * this.screenHeight;
		return { "overflow" : "hidden", "background-color" : "rgba(255,0,0,.5)", "position" : "absolute", "box-sizing" : "border-box", "border" : "1px solid #00ff00", width : w + "px", height : h + "px", top : y + "px", left : x + "px"};
	}
	,Template: function() {
		return "<div>\r\n\t\t\t<div ref=\"container\" style=\"font-size:22px; background-color:orange; position:absolute; top:0; left;0; width:100%; height:100%\">\r\n\t\t\t\t<div ref=\"testItem\" v-if=\"layoutItem\" :style=\"testStyle\" v-html=\"debugField\"></div>\r\n\t\t\t</div>\r\n\t\t</div>";
	}
	,_Init: function() {
		var cls = troshx_sos_vue_tests_layout_LayoutItemTest;
		var clsP = cls.prototype;
		this.mounted = clsP.Mounted;
		this.data = clsP.Data;
		this.template = this.Template();
		this.computed = { testStyle : clsP.get_testStyle};
		this.methods = { onResize : clsP.onResize, get_testStyle : clsP.get_testStyle};
	}
	,__class__: troshx_sos_vue_tests_layout_LayoutItemTest
});
var troshx_tros_ManueverSheet = $hx_exports["troshx"]["tros"]["ManueverSheet"] = function() { };
$hxClasses["troshx.tros.ManueverSheet"] = troshx_tros_ManueverSheet;
troshx_tros_ManueverSheet.__name__ = ["troshx","tros","ManueverSheet"];
troshx_tros_ManueverSheet.setAsDefensiveList = function(arr) {
	var i = arr.length;
	while(--i > -1) arr[i].type = 1;
	return arr;
};
troshx_tros_ManueverSheet.setAsOffensiveList = function(arr) {
	var i = arr.length;
	while(--i > -1) arr[i].type = 2;
	return arr;
};
troshx_tros_ManueverSheet.isDamagingManuever = function(ms) {
	if(!(ms == "cut" || ms == "spike" || ms == "thrust")) {
		return ms == "bash";
	} else {
		return true;
	}
};
troshx_tros_ManueverSheet.damageMod_add1 = function(damage,cManuever) {
	return damage + 1;
};
troshx_tros_ManueverSheet.emptyResolveMethod = function() {
};
troshx_tros_ManueverSheet.getDefensiveManueverById = function(id) {
	var _this = troshx_tros_ManueverSheet.defensiveMeleeHash;
	return troshx_tros_ManueverSheet.defensiveMelee[__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]];
};
troshx_tros_ManueverSheet.getOffensiveManueverById = function(id) {
	var _this = troshx_tros_ManueverSheet.offensiveMeleeHash;
	return troshx_tros_ManueverSheet.offensiveMelee[__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]];
};
troshx_tros_ManueverSheet.createHashIndex = function(arr) {
	var obj = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		var key = arr[i].id;
		if(__map_reserved[key] != null) {
			obj.setReserved(key,i);
		} else {
			obj.h[key] = i;
		}
	}
	return obj;
};
troshx_tros_ManueverSheet.getMaskWithHashIndexer = function(arrOfIds,hash) {
	var val = 0;
	var i = arrOfIds.length;
	while(--i > -1) {
		var prop = arrOfIds[i];
		if(__map_reserved[prop] != null ? hash.existsReserved(prop) : hash.h.hasOwnProperty(prop)) {
			val = val | 1 << (__map_reserved[prop] != null ? hash.getReserved(prop) : hash.h[prop]);
		}
	}
	return val;
};
troshx_tros_ManueverSheet.createOffensiveMeleeMaskFor = function(arr) {
	return troshx_tros_ManueverSheet.getMaskWithHashIndexer(arr,troshx_tros_ManueverSheet.offensiveMeleeHash);
};
troshx_tros_ManueverSheet.createDefensiveMeleeMaskFor = function(arr) {
	return troshx_tros_ManueverSheet.getMaskWithHashIndexer(arr,troshx_tros_ManueverSheet.defensiveMeleeHash);
};
troshx_tros_ManueverSheet.getManueverListArray = function(attacking) {
	if(attacking) {
		return troshx_tros_ManueverSheet.offensiveMelee;
	} else {
		return troshx_tros_ManueverSheet.defensiveMelee;
	}
};
var troshx_tros_ProfeciencySheet = function() { };
$hxClasses["troshx.tros.ProfeciencySheet"] = troshx_tros_ProfeciencySheet;
troshx_tros_ProfeciencySheet.__name__ = ["troshx","tros","ProfeciencySheet"];
troshx_tros_ProfeciencySheet.getProfeciency = function(id) {
	var _this = troshx_tros_ProfeciencySheet.listHashIndexer;
	return troshx_tros_ProfeciencySheet.LIST[__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]];
};
troshx_tros_ProfeciencySheet.createHashIndex = function(arr) {
	var obj = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		var key = arr[i].id;
		if(__map_reserved[key] != null) {
			obj.setReserved(key,i);
		} else {
			obj.h[key] = i;
		}
	}
	return obj;
};
troshx_tros_ProfeciencySheet.resolveProfManueverCostChoice = function(id,arr,charSheet) {
	if(id == "counter") {
		if(charSheet.weaponOffhand != null && charSheet.weaponOffhand.shield) {
			return arr[0];
		} else {
			return arr[1];
		}
	} else if(id == "parry") {
		if(charSheet.weaponOffhand != null && charSheet.weaponOffhand.shield) {
			return arr[0];
		} else {
			return arr[1];
		}
	}
	return arr[0];
};
var troshx_tros_WeaponSheet = $hx_exports["troshx"]["tros"]["WeaponSheet"] = function() {
};
$hxClasses["troshx.tros.WeaponSheet"] = troshx_tros_WeaponSheet;
troshx_tros_WeaponSheet.__name__ = ["troshx","tros","WeaponSheet"];
troshx_tros_WeaponSheet.getWeaponByName = function(name) {
	var _this = troshx_tros_WeaponSheet.HASH;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
troshx_tros_WeaponSheet.weaponNameIsShield = function(name) {
	var weap = troshx_tros_WeaponSheet.getWeaponByName(name);
	if(weap != null) {
		return weap.shield;
	} else {
		return false;
	}
};
troshx_tros_WeaponSheet.weaponIsShield = function(weapon) {
	return weapon.shield;
};
troshx_tros_WeaponSheet.createHashLookupViaName = function(arr) {
	var obj = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		var lookinFor = arr[i];
		var key = lookinFor.name;
		if(__map_reserved[key] != null) {
			obj.setReserved(key,lookinFor);
		} else {
			obj.h[key] = lookinFor;
		}
	}
	return obj;
};
troshx_tros_WeaponSheet.find = function(name) {
	var _this = troshx_tros_WeaponSheet.HASH;
	if(__map_reserved["name"] != null) {
		return _this.getReserved("name");
	} else {
		return _this.h["name"];
	}
};
troshx_tros_WeaponSheet.prototype = {
	__class__: troshx_tros_WeaponSheet
};
var troshx_util_DiceRoller = function() { };
$hxClasses["troshx.util.DiceRoller"] = troshx_util_DiceRoller;
troshx_util_DiceRoller.__name__ = ["troshx","util","DiceRoller"];
troshx_util_DiceRoller.getRollNumSuccesses = function(amountDice,tn) {
	var result;
	troshx_util_DiceRoller.NUM_ONES = 0;
	var i = amountDice;
	var numSuccesses = 0;
	var numStacks = 0;
	while(--i > -1) {
		result = (Math.random() * 10 | 0) + 1;
		if(result == 1) {
			troshx_util_DiceRoller.NUM_ONES++;
		}
		numSuccesses += result >= tn ? 1 : 0;
		numStacks += tn > 10 && result == 10 ? 1 : 0;
	}
	if(numStacks > 0) {
		i = numStacks;
		while(--i > -1) {
			result = (Math.random() * 10 | 0) + 1;
			numSuccesses += result >= tn - 10 ? 1 : 0;
		}
	}
	troshx_util_DiceRoller.LAST_ROLL_SUCCESSES = numSuccesses;
	return numSuccesses;
};
troshx_util_DiceRoller.makeChallengeRoll = function(amountDice,tn,requiredSuccesses) {
	var numSuccesses = troshx_util_DiceRoller.getRollNumSuccesses(amountDice,tn);
	if(numSuccesses >= requiredSuccesses) {
		return numSuccesses - requiredSuccesses;
	} else if(troshx_util_DiceRoller.NUM_ONES >= (amountDice > 1 ? 2 : 1)) {
		return -2;
	} else {
		return -1;
	}
};
troshx_util_DiceRoller.makeIndividualRoll = function(amountDice,tn,tarObject) {
	if(tarObject != null) {
		tarObject = tarObject;
	} else {
		tarObject = { successes : 0, mayBotch : false};
	}
	var num = troshx_util_DiceRoller.getRollNumSuccesses(amountDice,tn);
	tarObject.successes = num;
	tarObject.mayBotch = troshx_util_DiceRoller.NUM_ONES >= (amountDice > 1 ? 2 : 1);
	return tarObject;
};
var troshx_util_LibUtil = function() { };
$hxClasses["troshx.util.LibUtil"] = troshx_util_LibUtil;
troshx_util_LibUtil.__name__ = ["troshx","util","LibUtil"];
troshx_util_LibUtil.validInt = function(val) {
	if(val != null) {
		return !isNaN(val);
	} else {
		return false;
	}
};
troshx_util_LibUtil["as"] = function(obj,type) {
	if(js_Boot.__instanceof(obj,type)) {
		return obj;
	} else {
		return null;
	}
};
troshx_util_LibUtil.asNoInline = function(obj,type) {
	if(js_Boot.__instanceof(obj,type)) {
		return obj;
	} else {
		return null;
	}
};
troshx_util_LibUtil.tryParseFloat = function(val) {
	return parseFloat(val);
};
troshx_util_LibUtil.tryParseInt = function(val) {
	return Std.parseInt(val);
};
troshx_util_LibUtil.sortAlphabetically = function(aStr,bStr) {
	aStr = aStr.toLowerCase();
	bStr = bStr.toLowerCase();
	if(aStr < bStr) {
		return -1;
	}
	if(aStr > bStr) {
		return 1;
	}
	return 0;
};
troshx_util_LibUtil.setArrayLength = function(of,len) {
	of.splice(len,of.length - len);
};
troshx_util_LibUtil.field = function(of,field) {
	return of[field];
};
troshx_util_LibUtil.setField = function(of,field,value) {
	of[field] = value;
};
troshx_util_LibUtil.override2ndObjInto = function(into,obj2) {
	var _g = 0;
	var _g1 = Reflect.fields(obj2);
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		into[p] = obj2[p];
	}
	return into;
};
troshx_util_LibUtil.setFieldChain = function(of,field,value) {
	of[field] = value;
	return value;
};
troshx_util_LibUtil.arrayToList = function(arr) {
	var list = new List();
	var _g = 0;
	while(_g < arr.length) {
		var val = arr[_g];
		++_g;
		list.add(val);
	}
	return list;
};
troshx_util_LibUtil.getArrayItemAtIndex = function(arr,index) {
	return arr[index];
};
troshx_util_LibUtil.getListItemAtIndex = function(list,index) {
	if(index < 0 || index >= list.length) {
		return null;
	}
	var iter_head = list.h;
	var _g1 = 0;
	var _g = index;
	while(_g1 < _g) {
		var i = _g1++;
		var val = iter_head.item;
		iter_head = iter_head.next;
	}
	var val1 = iter_head.item;
	iter_head = iter_head.next;
	return val1;
};
troshx_util_LibUtil.clearArray = function(arr) {
	arr.length = 0;
};
troshx_util_LibUtil.truncateArray = function(arr,fromIndex) {
	arr.length = fromIndex;
};
troshx_util_LibUtil.findForList = function(list,f) {
	var _g_head = list.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var i = val;
		if(f(i)) {
			return i;
		}
	}
	return null;
};
troshx_util_LibUtil.minI = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
troshx_util_LibUtil.maxI = function(a,b) {
	if(a >= b) {
		return a;
	} else {
		return b;
	}
};
troshx_util_LibUtil.minI_ = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
troshx_util_LibUtil.maxI_ = function(a,b) {
	if(a >= b) {
		return a;
	} else {
		return b;
	}
};
troshx_util_LibUtil.removeArrayItemAtIndex = function(arr,index) {
	arr.splice(index,1);
};
troshx_util_LibUtil.toFixed = function(value,digits) {
	return value.toFixed(digits);
};
troshx_util_LibUtil.getURLQueryStringParams = function(url) {
	var get = url.split("?").pop();
	var params = { };
	var _g = 0;
	var _g1 = new EReg("[&;]","g").split(get);
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		var pl = p.split("=");
		if(pl.length < 2) {
			continue;
		}
		var name = pl.shift();
		var field = decodeURIComponent(name.split("+").join(" "));
		var s = pl.join("=");
		params[field] = decodeURIComponent(s.split("+").join(" "));
	}
	return params;
};
var troshx_util_layout_AspectConstraint = function() {
	this.preflight = false;
	this.max = 1;
	this.min = 1;
};
$hxClasses["troshx.util.layout.AspectConstraint"] = troshx_util_layout_AspectConstraint;
troshx_util_layout_AspectConstraint.__name__ = ["troshx","util","layout","AspectConstraint"];
troshx_util_layout_AspectConstraint.createRelative = function(limit1,limit2) {
	var me = new troshx_util_layout_AspectConstraint();
	if(limit1 != null) {
		if(limit1 > 1) {
			me.max = limit1;
		} else if(limit1 < 1) {
			me.min = limit1;
		}
	}
	if(limit2 != null) {
		if(limit2 > 1) {
			if(limit2 > me.max) {
				me.max = limit2;
			}
		} else if(limit2 < 1) {
			if(limit2 < me.min) {
				me.min = limit2;
			}
		}
	}
	return me;
};
troshx_util_layout_AspectConstraint.prototype = {
	enablePreflight: function() {
		this.preflight = true;
		return this;
	}
	,findScales: function(result,scaleX,scaleY) {
		result.x = Math.min(scaleX,this.max * scaleY);
		result.y = this.min > 0 ? Math.min(scaleY,scaleX / this.min) : scaleY;
	}
	,__class__: troshx_util_layout_AspectConstraint
};
var troshx_util_layout_BorderConstraint = function() {
};
$hxClasses["troshx.util.layout.BorderConstraint"] = troshx_util_layout_BorderConstraint;
troshx_util_layout_BorderConstraint.__name__ = ["troshx","util","layout","BorderConstraint"];
troshx_util_layout_BorderConstraint.isHorizontal = function(side) {
	return (side & 1) != 0;
};
troshx_util_layout_BorderConstraint.isMaximalSide = function(side) {
	if(side != 1) {
		return side == 2;
	} else {
		return true;
	}
};
troshx_util_layout_BorderConstraint.createRelative = function(coord,minScale,maxScale) {
	if(maxScale == null) {
		maxScale = 0;
	}
	if(minScale == null) {
		minScale = 2;
	}
	var me = new troshx_util_layout_BorderConstraint();
	me.coord = coord;
	me.minScale = minScale;
	me.maxScale = maxScale;
	return me;
};
troshx_util_layout_BorderConstraint.prototype = {
	solveCoord: function(value,scale) {
		var ratio = this.findScaleRatio(scale);
		return this.coord + (value - this.coord) * ratio;
	}
	,findScaleRatio: function(scale) {
		var result = 1;
		if(this.maxScale >= 1) {
			if(scale > 1) {
				result = 1 / scale * Math.min(scale,this.maxScale);
			}
		}
		if(this.minScale <= 1) {
			if(scale < 1) {
				result = 1 / scale * Math.max(scale,this.minScale);
			}
		}
		return result;
	}
	,__class__: troshx_util_layout_BorderConstraint
};
var troshx_util_layout_LayoutItem = function() {
	this.hitPadding = 0;
	this.shape = 0;
};
$hxClasses["troshx.util.layout.LayoutItem"] = troshx_util_layout_LayoutItem;
troshx_util_layout_LayoutItem.__name__ = ["troshx","util","layout","LayoutItem"];
troshx_util_layout_LayoutItem.createRectWIthUVs = function(u,v,uDim,vDim) {
	var me = new troshx_util_layout_LayoutItem();
	me.u = u;
	me.v = v;
	me.uDim = uDim;
	me.vDim = vDim;
	return me;
};
troshx_util_layout_LayoutItem.createRect = function(scrnWidth,scrnHeight,x,y,width,height) {
	return troshx_util_layout_LayoutItem.createRectWIthUVs(x / scrnWidth,y / scrnHeight,width / scrnWidth,height / scrnHeight);
};
troshx_util_layout_LayoutItem.createCircle = function(scrnWidth,scrnHeight,x,y,radius) {
	var me = troshx_util_layout_LayoutItem.createRectWIthUVs((x - radius) / scrnWidth,(y - radius) / scrnHeight,radius * 2 / scrnWidth,radius * 2 / scrnHeight);
	me.shape = 1;
	return me;
};
troshx_util_layout_LayoutItem.createPolygon = function(scrnWidth,scrnHeight,coords) {
	var minX = 2147483647;
	var minY = 2147483647;
	var maxX = 0;
	var maxY = 0;
	var me = new troshx_util_layout_LayoutItem();
	me.shape = 2;
	var i = 0;
	var len = coords.length;
	me.uvs = [];
	var v;
	while(i < len) {
		v = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(coords[i],coords[i + 1]);
		me.uvs.push(v);
		if(v.x < minX) {
			minX = v.x;
		}
		if(v.y < minY) {
			minY = v.y;
		}
		if(v.x > maxX) {
			maxX = v.x;
		}
		if(v.y > maxY) {
			maxY = v.y;
		}
		i += 2;
	}
	me.u = minX / scrnWidth;
	me.v = minY / scrnHeight;
	me.uDim = maxX / scrnWidth;
	me.vDim = maxY / scrnHeight;
	me.uDim -= me.u;
	me.vDim -= me.v;
	var _g1 = 0;
	var _g = me.uvs.length;
	while(_g1 < _g) {
		var i1 = _g1++;
		v = me.uvs[i1];
		v.x = (v.x / scrnWidth - me.u) / me.uDim;
		v.y = (v.y / scrnHeight - me.v) / me.vDim;
	}
	return me;
};
troshx_util_layout_LayoutItem.fromHTMLImageMapArea = function(mapWidth,mapHeight,shape,coords) {
	var coords1 = coords.split(", ").map(function(str) {
		return parseFloat(str);
	});
	if(shape == "rect") {
		return troshx_util_layout_LayoutItem.createRect(mapWidth,mapHeight,coords1[0],coords1[1],coords1[2] - coords1[0],coords1[3] - coords1[1]);
	} else if(shape == "circle") {
		return troshx_util_layout_LayoutItem.createCircle(mapWidth,mapHeight,coords1[0],coords1[1],coords1[2]);
	} else {
		return troshx_util_layout_LayoutItem.createPolygon(mapWidth,mapHeight,coords1);
	}
};
troshx_util_layout_LayoutItem.prototype = {
	setUVs: function(uvs) {
		this.uvs = uvs;
	}
	,solve: function(resultPosition,resultScale,scaleX,scaleY) {
		var pivotU;
		var pivotV;
		var scratch = troshx_util_layout_LayoutItem.SCRATCH;
		if(this._pivot != null) {
			pivotU = this.u + this._pivot.pt.x * this.uDim;
			pivotV = this.v + this._pivot.pt.y * this.vDim;
		} else {
			pivotU = this.u;
			pivotV = this.v;
		}
		if(this._pin != null) {
			this._pin.findScaleRatios(scratch,scaleX,scaleY);
			if(this._aspect != null && this._aspect.preflight) {
				this._aspect.findScales(resultScale,scaleX,scaleY);
				resultScale.x /= scaleX;
				resultScale.y /= scaleY;
				scratch.x = Math.min(resultScale.x,scratch.x);
				scratch.y = Math.min(resultScale.y,scratch.y);
			}
			pivotU = this._pin.pt.x + (pivotU - this._pin.pt.x) * scratch.x;
			pivotV = this._pin.pt.y + (pivotV - this._pin.pt.y) * scratch.y;
		}
		if(this._pivot != null) {
			this._pivot.findScaleRatios(resultScale,scaleX,scaleY);
			resultPosition.x = pivotU - this._pivot.pt.x * this.uDim * resultScale.x;
			resultPosition.y = pivotV - this._pivot.pt.y * this.vDim * resultScale.y;
		} else {
			resultScale.x = 1;
			resultScale.y = 1;
			resultPosition.x = pivotU;
			resultPosition.y = pivotV;
		}
		var minU = resultPosition.x;
		var minV = resultPosition.y;
		var maxU = minU + resultScale.x * this.uDim;
		var maxV = minV + resultScale.y * this.vDim;
		if(this._borders != null) {
			var b;
			if(this._borders[0] != null) {
				b = this._borders[0];
				var value = this.v;
				var ratio = b.findScaleRatio(scaleY);
				minV = b.coord + (value - b.coord) * ratio;
			}
			if(this._borders[1] != null) {
				b = this._borders[1];
				var value1 = this.u + this.uDim;
				var ratio1 = b.findScaleRatio(scaleX);
				maxU = b.coord + (value1 - b.coord) * ratio1;
			}
			if(this._borders[2] != null) {
				b = this._borders[2];
				var value2 = this.v + this.vDim;
				var ratio2 = b.findScaleRatio(scaleY);
				maxV = b.coord + (value2 - b.coord) * ratio2;
			}
			if(this._borders[3] != null) {
				b = this._borders[3];
				var value3 = this.u;
				var ratio3 = b.findScaleRatio(scaleX);
				minU = b.coord + (value3 - b.coord) * ratio3;
			}
		}
		resultPosition.x = minU;
		resultPosition.y = minV;
		resultScale.x = maxU - minU;
		resultScale.y = maxV - minV;
		if(this._aspect != null) {
			this._aspect.findScales(scratch,scaleX,scaleY);
			scratch.x /= scaleX;
			scratch.y /= scaleY;
			scratch.x *= this.uDim;
			scratch.y *= this.vDim;
			this._aspect.findScales(resultScale,resultScale.x / scratch.x,resultScale.y / scratch.y);
			resultScale.x *= scratch.x;
			resultScale.y *= scratch.y;
			if(this._pivot != null) {
				resultPosition.x = pivotU - this._pivot.pt.x * resultScale.x;
				resultPosition.y = pivotV - this._pivot.pt.y * resultScale.y;
			}
		}
	}
	,resolvePolygon: function(resultUVs,position,scale) {
		var c = 0;
		var _g1 = 0;
		var _g = this.uvs.length;
		while(_g1 < _g) {
			var i = _g1++;
			resultUVs[c++] = position.x + this.uvs[i].x * scale.x;
			resultUVs[c++] = position.y + this.uvs[i].y * scale.y;
		}
	}
	,pivot: function(val) {
		this._pivot = val;
		return this;
	}
	,pin: function(val) {
		this._pin = val;
		return this;
	}
	,aspect: function(val) {
		this._aspect = val;
		return this;
	}
	,border: function(side,scaleMin,scaleMax,coord) {
		if(coord == null) {
			coord = -1;
		}
		if(this._borders == null) {
			this._borders = [null,null,null,null];
		}
		if(coord < 0) {
			if(side == 1 || side == 2) {
				coord = 1;
			} else {
				coord = 0;
			}
		} else if(side == 1 || side == 2) {
			if((side & 1) != 0) {
				if(coord < this.u + this.uDim) {
					coord = this.u + this.uDim;
				}
			} else if(coord < this.v + this.vDim) {
				coord = this.v + this.vDim;
			}
		} else if((side & 1) != 0) {
			if(coord > this.u) {
				coord = this.u;
			}
		} else if(coord > this.v) {
			coord = this.v;
		}
		this._borders[side] = troshx_util_layout_BorderConstraint.createRelative(coord,scaleMin,scaleMax);
		return this;
	}
	,__class__: troshx_util_layout_LayoutItem
};
var troshx_util_layout_PointScaleConstraint = function() {
	this.pt = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
};
$hxClasses["troshx.util.layout.PointScaleConstraint"] = troshx_util_layout_PointScaleConstraint;
troshx_util_layout_PointScaleConstraint.__name__ = ["troshx","util","layout","PointScaleConstraint"];
troshx_util_layout_PointScaleConstraint.createRelative = function(x,y) {
	var me = new troshx_util_layout_PointScaleConstraint();
	me.pt.x = x;
	me.pt.y = y;
	return me;
};
troshx_util_layout_PointScaleConstraint.prototype = {
	findScaleRatios: function(result,scaleX,scaleY) {
		result.x = 1;
		result.y = 1;
		if(this.scaleMax != null) {
			if(scaleX > 1 && this.scaleMax.x >= 1) {
				result.x = 1 / scaleX * Math.min(scaleX,this.scaleMax.x);
			}
			if(scaleY > 1 && this.scaleMax.y >= 1) {
				result.y = 1 / scaleY * Math.min(scaleY,this.scaleMax.y);
			}
		}
		if(this.scaleMin != null) {
			if(scaleX < 1 && this.scaleMin.x <= 1) {
				result.x = 1 / scaleX * Math.max(scaleX,this.scaleMin.x);
			}
			if(scaleY < 1 && this.scaleMin.y <= 1) {
				result.y = 1 / scaleY * Math.max(scaleY,this.scaleMin.y);
			}
		}
	}
	,findScales: function(result,scaleX,scaleY) {
		this.findScaleRatios(result,scaleY,scaleX);
		result.x *= scaleX;
		result.y *= scaleY;
	}
	,scaleMinRelative: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.scaleMin == null) {
			this.scaleMin = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
		}
		this.scaleMin.x = x;
		this.scaleMin.y = y;
		return this;
	}
	,scaleMaxRelative: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.scaleMax == null) {
			this.scaleMax = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
		}
		this.scaleMax.x = x;
		this.scaleMax.y = y;
		return this;
	}
	,__class__: troshx_util_layout_PointScaleConstraint
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
msignal_SlotList.NIL = new msignal_SlotList(null,null);
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_ds_ObjectMap.count = 0;
haxevx_vuex_core_Singletons.NAMES = new haxe_ds_StringMap();
haxevx_vuex_core_Singletons.SINGLETON_CACHE = new haxe_ds_StringMap();
haxevx_vuex_core_ModuleStack.stack = [];
hxGeomAlgo_Bayazit.reflexVertices = [];
hxGeomAlgo_Bayazit.steinerPoints = [];
hxGeomAlgo_HomogCoord.INFINITY = new hxGeomAlgo_HomogCoord();
hxGeomAlgo_PolyTools.point = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
hxGeomAlgo_PolyTools.zero = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(0,0);
hxGeomAlgo_PolyTools.EPSILON = .00000001;
js_Boot.__toStr = ({ }).toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
troshx_components_Bout.STEP_NEXT = 0;
troshx_components_Bout.STEP_NEW_CYCLE = 1;
troshx_components_Bout.STEP_NEW_ROUND = 2;
troshx_core_BodyChar.D_DESTROY_PART = 1;
troshx_core_BodyChar.D_DEATH = 2;
troshx_core_BodyChar.WOUND_TYPE_CUT = 1;
troshx_core_BodyChar.WOUND_TYPE_PIERCE = 2;
troshx_core_BodyChar.WOUND_TYPE_BLUNT_TRAUMA = 4;
troshx_core_BodyChar.WOUND_D_DESTROY = 1;
troshx_core_BodyChar.WOUND_D_DEATH = 2;
troshx_core_BoutMessage.TYPE_NONE = 0;
troshx_core_BoutMessage.TYPE_PLAYERS_TURN = 1;
troshx_core_BoutMessage.TYPE_RESOLVE_MANUEVER = 2;
troshx_core_Manuever.EVASIVE_TRUE = 1;
troshx_core_Manuever.EVASIVE_NO_INITAITIVE = 2;
troshx_core_Manuever.EVASIVE_NO_INITAITIVE_TARGET = 4;
troshx_core_Manuever.EVASIVE_UNTARGET_FROM_ENEMY = 8;
troshx_core_Manuever.EVASIVE_UNTARGET = 16;
troshx_core_Manuever.EVASIVE_NO_INITAITIVE_MUTUAL = 6;
troshx_core_Manuever.EVASIVE_UNTARGET_MUTUAL = 24;
troshx_core_Manuever.MANUEVER_HAND_NONE = 0;
troshx_core_Manuever.MANUEVER_HAND_MASTER = 1;
troshx_core_Manuever.MANUEVER_HAND_SECONDARY = 2;
troshx_core_Manuever.MANUEVER_HAND_BOTH = 3;
troshx_core_Manuever.MANUEVER_TYPE_MELEE = 0;
troshx_core_Manuever.MANUEVER_TYPE_RANGED = 1;
troshx_core_Manuever.DAMAGE_TYPE_NONE = 0;
troshx_core_Manuever.DAMAGE_TYPE_CUTTING = 1;
troshx_core_Manuever.DAMAGE_TYPE_PUNCTURING = 2;
troshx_core_Manuever.DAMAGE_TYPE_BLUDGEONING = 3;
troshx_core_Manuever.ATTACK_TYPE_STRIKE = 1;
troshx_core_Manuever.ATTACK_TYPE_THRUST = 2;
troshx_core_Manuever.DEFEND_TYPE_OFFHAND = 1;
troshx_core_Manuever.DEFEND_TYPE_MASTERHAND = 2;
troshx_core_Manuever.TYPE_NONE = 0;
troshx_core_Manuever.TYPE_DEFENSIVE = 1;
troshx_core_Manuever.TYPE_OFFENSIVE = 2;
troshx_core_Weapon.__rtti = "<class path=\"troshx.core.Weapon\" params=\"\">\n\t<ATTR_BASE_NONE public=\"1\" get=\"inline\" set=\"null\" expr=\"-1\" line=\"39\" static=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":value\"><e>-1</e></m></meta>\n\t</ATTR_BASE_NONE>\n\t<ATTR_BASE_STRENGTH public=\"1\" get=\"inline\" set=\"null\" expr=\"0\" line=\"40\" static=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":value\"><e>0</e></m></meta>\n\t</ATTR_BASE_STRENGTH>\n\t<HOOK_STRIKE get=\"inline\" set=\"null\" expr=\"1\" line=\"42\" static=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":value\"><e>1</e></m></meta>\n\t</HOOK_STRIKE>\n\t<HOOK_THRUST get=\"inline\" set=\"null\" expr=\"2\" line=\"43\" static=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":value\"><e>2</e></m></meta>\n\t</HOOK_THRUST>\n\t<createDyn public=\"1\" set=\"method\" line=\"129\" static=\"1\"><f a=\"name:profGroups:properties\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<d/>\n\t<c path=\"troshx.core.Weapon\"/>\n</f></createDyn>\n\t<atn public=\"1\"><x path=\"Int\"/></atn>\n\t<atn2 public=\"1\"><x path=\"Int\"/></atn2>\n\t<dtn public=\"1\"><x path=\"Int\"/></dtn>\n\t<dntT public=\"1\"><x path=\"Int\"/></dntT>\n\t<dtn2 public=\"1\"><x path=\"Int\"/></dtn2>\n\t<damage public=\"1\"><x path=\"Int\"/></damage>\n\t<damage2 public=\"1\"><x path=\"Int\"/></damage2>\n\t<damage3 public=\"1\"><x path=\"Int\"/></damage3>\n\t<shield public=\"1\"><x path=\"Bool\"/></shield>\n\t<profeciencies public=\"1\"><c path=\"Array\"><c path=\"String\"/></c></profeciencies>\n\t<name public=\"1\"><c path=\"String\"/></name>\n\t<drawCutModifier public=\"1\"><x path=\"Int\"/></drawCutModifier>\n\t<attrBaseIndex public=\"1\"><x path=\"Int\"/></attrBaseIndex>\n\t<twoHanded public=\"1\"><x path=\"Bool\"/></twoHanded>\n\t<rangedWeapon public=\"1\"><x path=\"Bool\"/></rangedWeapon>\n\t<cpPenalty public=\"1\"><x path=\"Float\"/></cpPenalty>\n\t<movePenalty public=\"1\"><x path=\"Float\"/></movePenalty>\n\t<shieldLimit public=\"1\"><x path=\"Int\"/></shieldLimit>\n\t<blunt public=\"1\"><x path=\"Bool\"/></blunt>\n\t<range public=\"1\"><x path=\"Int\"/></range>\n\t<hooking public=\"1\"><x path=\"Int\"/></hooking>\n\t<getDamageTo public=\"1\" set=\"method\" line=\"46\"><f a=\"body:manuever:targetZone:margin:strength\">\n\t<c path=\"troshx.core.BodyChar\"/>\n\t<c path=\"troshx.core.Manuever\"/>\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n</f></getDamageTo>\n\t<getHookingATN public=\"1\" set=\"method\" line=\"65\">\n\t\t<f a=\"?tieBiasToThrust\" v=\"false\">\n\t\t\t<x path=\"Bool\"/>\n\t\t\t<x path=\"Int\"/>\n\t\t</f>\n\t\t<meta><m n=\":value\"><e>{ tieBiasToThrust : false }</e></m></meta>\n\t</getHookingATN>\n\t<getHookingATNType public=\"1\" set=\"method\" line=\"79\">\n\t\t<f a=\"?tieBiasToThrust\" v=\"false\">\n\t\t\t<x path=\"Bool\"/>\n\t\t\t<x path=\"Int\"/>\n\t\t</f>\n\t\t<meta><m n=\":value\"><e>{ tieBiasToThrust : false }</e></m></meta>\n\t</getHookingATNType>\n\t<getInlineTest public=\"1\" get=\"inline\" set=\"null\" line=\"87\"><f a=\"\"><x path=\"Float\"/></f></getInlineTest>\n\t<weaponListInlineTest public=\"1\"><c path=\"Array\"><c path=\"troshx.core.Weapon\"/></c></weaponListInlineTest>\n\t<getInlineTest2 public=\"1\" get=\"inline\" set=\"null\" line=\"97\">\n\t\t<f a=\"?val:?val2\" v=\"0:5\">\n\t\t\t<x path=\"Int\"/>\n\t\t\t<x path=\"Int\"/>\n\t\t\t<x path=\"Int\"/>\n\t\t</f>\n\t\t<meta><m n=\":value\"><e>{ val2 : 5, val : 0 }</e></m></meta>\n\t</getInlineTest2>\n\t<new public=\"1\" set=\"method\" line=\"106\"><f a=\"name:profGroups\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
troshx_core_Weapon.ATTR_BASE_NONE = -1;
troshx_core_Weapon.ATTR_BASE_STRENGTH = 0;
troshx_core_Weapon.HOOK_STRIKE = 1;
troshx_core_Weapon.HOOK_THRUST = 2;
troshx_sos_core_BoonBane.__GOOD_EYES__BAD_EYES = 1;
troshx_sos_core_BoonBane.__GOOD_EARS_BAD_EARS = 2;
troshx_sos_core_BoonBane.__GOOD_EARS_BAD_NOSE = 4;
troshx_sos_core_BoonBane.__RICH__POOR = 8;
troshx_sos_core_BoonBane.__TRUE_GRIT_SHELTERED = 16;
troshx_sos_core_BoonBane.__ROBUST_FRAIL = 32;
troshx_sos_core_BoonBane.__ONE_EYED = 64;
troshx_sos_core_BoonBane.__CRAVEN__HONORABLE = 128;
troshx_sos_core_BoonBane.__HONORABLE__COMPLETE_MONSTER = 256;
troshx_sos_core_BoonBane.__TALL__SHORT = 512;
troshx_sos_core_BoonBane.CHARACTER_CREATION_ONLY = 1;
troshx_sos_core_BoonBane.CANNOT_BE_REMOVED = 2;
troshx_sos_core_BoonBane.TIMES_INFINITE = -1;
troshx_sos_core_BoonBane.TIMES_VARYING = -2;
troshx_sos_core_BoonBane.COSTLESS_ARRAY = [0];
troshx_sos_bnb_Allies.COST_1 = 1;
troshx_sos_bnb_Allies.COST_2 = 5;
troshx_sos_bnb_Allies.COST_3 = 10;
troshx_sos_core_BaneAssign.MAX_BANE_EARNABLE = 15;
troshx_sos_bnb_Wanted.ALIVE = 1;
troshx_sos_bnb_Wanted.DEAD = 2;
troshx_sos_bnb_Wanted.ALIVE_ALIVE = 3;
troshx_sos_bnb_BrokenLimbAssign.LEFT_ARM = 1;
troshx_sos_bnb_BrokenLimbAssign.RIGHT_ARM = 2;
troshx_sos_bnb_BrokenLimbAssign.LEFT_LEG = 4;
troshx_sos_bnb_BrokenLimbAssign.RIGHT_LEG = 8;
troshx_sos_bnb_BrokenLimbAssign.BOTH_LEGS = 12;
troshx_sos_bnb_CrippledLimbAssign.LEFT_ARM = 1;
troshx_sos_bnb_CrippledLimbAssign.RIGHT_ARM = 2;
troshx_sos_bnb_CrippledLimbAssign.LEFT_LEG = 4;
troshx_sos_bnb_CrippledLimbAssign.RIGHT_LEG = 8;
troshx_sos_bnb_CrippledLimbAssign.BOTH_LEGS = 12;
troshx_sos_bnb_CrippledLimbAssign.BOTH_ARMS = 3;
troshx_sos_bnb_Debt.CASH_MULTIPLIERS = [1,1.5,2];
troshx_sos_bnb_DirePast.BONUS_POINTS = 10;
troshx_sos_bnb_Estate.WEALTH_PER_QTY = 2;
troshx_sos_bnb_Estate.COST_PER_ESTATE = 10;
troshx_sos_bnb_EstateAssign.COUNT = 0;
troshx_sos_bnb_Favor.COST_1 = 1;
troshx_sos_bnb_Favor.COST_2 = 3;
troshx_sos_bnb_ImpressiveVoice.COST = 2;
troshx_sos_bnb_ImpressiveVoiceAssign.POWERFUL = 1;
troshx_sos_bnb_ImpressiveVoiceAssign.GRATING = 2;
troshx_sos_bnb_ImpressiveVoiceAssign.SOOTHING = 4;
troshx_sos_bnb_Language.COST_SINGLE = 1;
troshx_sos_bnb_Language.COST_2 = 2;
troshx_sos_bnb_Language.COST_3 = 3;
troshx_sos_bnb_LastingPain.COST_MINOR = 4;
troshx_sos_bnb_LastingPain.COST_MAJOR = 8;
troshx_sos_bnb_SeveredLimb.COST_3 = 18;
troshx_sos_bnb_SeveredLimb.COST_2 = 15;
troshx_sos_bnb_SeveredLimb.COST_1 = 10;
troshx_sos_bnb_SeveredLimbAssign.HAND = 131072;
troshx_sos_bnb_SeveredLimbAssign.LOWER_ARM = 196608;
troshx_sos_bnb_SeveredLimbAssign.FULL_ARM = 245776;
troshx_sos_bnb_SeveredLimbAssign.FOOT = 8192;
troshx_sos_bnb_SeveredLimbAssign.LOWER_LEG = 12288;
troshx_sos_bnb_SeveredLimbAssign.FULL_LEG = 15360;
troshx_sos_bnb_SeveredLimbAssign.LEVEL_1_AREAS = 139264;
troshx_sos_bnb_SeveredLimbAssign.LEVEL_2_AREAS = 208896;
troshx_sos_bnb_SeveredLimbAssign.LEVEL_3_AREAS = 261136;
troshx_sos_chargen_CharGenData.INT_MAX = 2147483647;
troshx_sos_chargen_CharGenData.PROF_COST_BEYOND_MAX = 2;
troshx_sos_chargen_CharGenData.CATEGORY_RACE = 0;
troshx_sos_chargen_CharGenData.CATEGORY_ATTRIBUTES = 1;
troshx_sos_chargen_CharGenData.CATEGORY_BNB = 2;
troshx_sos_chargen_CharGenData.CATEGORY_SKILLS = 3;
troshx_sos_chargen_CharGenData.CATEGORY_SOCIAL_WEALTH = 4;
troshx_sos_chargen_CharGenData.CATEGORY_PROFECIENCIES = 5;
troshx_sos_chargen_CharGenData.ATTRIBUTE_START_MAX = 8;
troshx_sos_chargen_CharGenData.MORTAL_MAX = 12;
troshx_sos_chargen_CharGenData.PCP_COLUMN_ATTRIBUTES = [22,23,24,27,31,35,40,45,50,56];
troshx_sos_chargen_CharGenData.MAX_PACKET_SKILL_LEVEL = 5;
troshx_sos_combat_BoutController.STEP_ORIENTATION = -2;
troshx_sos_combat_BoutController.STEP_TARGET_SELECTION = -1;
troshx_sos_combat_BoutController.STEP_DECLARE = 0;
troshx_sos_combat_BoutController.STEP_RESOLVE = 1;
troshx_sos_core_Item.UID_COUNT = 0;
troshx_sos_core_Item.FLAG_TWO_HANDED = 1;
troshx_sos_core_Item.FLAG_STRAPPED = 2;
troshx_sos_core_Item.EYE_CORRECTIVE = 4;
troshx_sos_core_Item.PROSTHETIC = 8;
troshx_sos_core_Item.MASK_HANDED = 3;
troshx_sos_core_Item.CP = 0;
troshx_sos_core_Item.SP = 1;
troshx_sos_core_Item.GP = 2;
troshx_sos_core_Armor.WEAK_SPOT = 1;
troshx_sos_core_Armor.HALF = 2;
troshx_sos_core_Armor.THRUST_ONLY = 4;
troshx_sos_core_Armor.HALF_SYMBOL = "*";
troshx_sos_core_Armor.WEAK_SPOT_SYMBOL = "ϕ";
troshx_sos_core_Armor.THRUST_ONLY_SYMBOL = "t";
troshx_sos_core_Armor.SUPERSCRIPT_MINUS = "⁻";
troshx_sos_core_Armor.SUPERSCRIPT_PLUS = "⁺";
troshx_sos_core_Armor.SUPERSCRIPT_NUMBERS = "⁰¹²³⁴⁵⁶⁷⁸⁹";
troshx_sos_core_ArmorCustomise.CREST_IDENTIFYING = 1;
troshx_sos_core_ArmorCustomise.CREST_INTIMIDATING = 2;
troshx_sos_core_ArmorCustomise.CREST_RUTHLESSLY_FASHIONABLE = 3;
troshx_sos_core_ArmorSpecial.MOVABLE = 1;
troshx_sos_core_ArmorSpecial.HARD = 2;
troshx_sos_core_ArmorSpecial.MAIL = 4;
troshx_sos_core_ArmorSpecial.TEXTILE = 8;
troshx_sos_core_ArmorSpecial.BULLETPROOF = 16;
troshx_sos_core_WornWith.USE_AV_SELF = 0;
troshx_sos_core_WornWith.USE_AV_OTHER = -1;
troshx_sos_core_Humanoid.SWING_DOWNWARD_HEAD = 0;
troshx_sos_core_Humanoid.SWING_UPWARD_HEAD = 1;
troshx_sos_core_Humanoid.SWING_NECK = 2;
troshx_sos_core_Humanoid.SWING_TORSO = 3;
troshx_sos_core_Humanoid.SWING_UPPER_ARM = 4;
troshx_sos_core_Humanoid.SWING_LOWER_ARM = 5;
troshx_sos_core_Humanoid.SWING_UPPER_LEG = 6;
troshx_sos_core_Humanoid.SWING_LOWER_LEG = 7;
troshx_sos_core_Humanoid.SWING_GROIN = 8;
troshx_sos_core_Humanoid.thrustStartIndex = 9;
troshx_sos_core_Humanoid.THRUST_HEAD = 9;
troshx_sos_core_Humanoid.THRUST_NECK = 10;
troshx_sos_core_Humanoid.THRUST_CHEST = 11;
troshx_sos_core_Humanoid.THRUST_BELLY = 12;
troshx_sos_core_Humanoid.THRUST_UPPER_ARM = 13;
troshx_sos_core_Humanoid.THRUST_LOWER_ARM = 14;
troshx_sos_core_Humanoid.THRUST_GROIN = 15;
troshx_sos_core_Humanoid.THRUST_UPPER_LEG = 16;
troshx_sos_core_Humanoid.THRUST_LOWER_LEG = 17;
troshx_sos_core_Humanoid.UPPER_HEAD = 0;
troshx_sos_core_Humanoid.FACE = 1;
troshx_sos_core_Humanoid.LOWER_HEAD = 2;
troshx_sos_core_Humanoid.NECK = 3;
troshx_sos_core_Humanoid.SHOULDER = 4;
troshx_sos_core_Humanoid.CHEST = 5;
troshx_sos_core_Humanoid.SIDE = 6;
troshx_sos_core_Humanoid.BELLY = 7;
troshx_sos_core_Humanoid.HIP = 8;
troshx_sos_core_Humanoid.GROIN = 9;
troshx_sos_core_Humanoid.THIGH = 10;
troshx_sos_core_Humanoid.KNEE = 11;
troshx_sos_core_Humanoid.SHIN = 12;
troshx_sos_core_Humanoid.FOOT = 13;
troshx_sos_core_Humanoid.UPPER_ARM = 14;
troshx_sos_core_Humanoid.ELBOW = 15;
troshx_sos_core_Humanoid.FOREARM = 16;
troshx_sos_core_Humanoid.HAND = 17;
troshx_sos_core_Humanoid.rearStartIndex = 18;
troshx_sos_core_Humanoid.UPPER_BACK = 18;
troshx_sos_core_Humanoid.LOWER_BACK = 19;
troshx_sos_core_Humanoid.FULL_HEAD = 7;
troshx_sos_core_Humanoid.FULL_TORSO = 480;
troshx_sos_core_Humanoid.FULL_LEG = 15360;
troshx_sos_core_Humanoid.FULL_ARM = 245776;
troshx_sos_core_Humanoid.FRONT_ONLY = 2;
troshx_sos_core_SpanningTool.HAND = 0;
troshx_sos_core_SpanningTool.LEVER = 1;
troshx_sos_core_SpanningTool.SCREW = 2;
troshx_sos_core_SpanningTool.STIRRUP = 3;
troshx_sos_core_SpanningTool.WINDLASS = 4;
troshx_sos_core_SpanningTool.WINCH = 5;
troshx_sos_core_SpanningTool.CRANK = 6;
troshx_sos_core_DamageType.CUTTING = 0;
troshx_sos_core_DamageType.PIERCING = 1;
troshx_sos_core_DamageType.BLUDGEONING = 2;
troshx_sos_core_DamageType.UNARMED = 3;
troshx_sos_core_DamageType.FALLING = 4;
troshx_sos_core_DamageType.BURN = 5;
troshx_sos_core_DamageType.ELECTRICAL = 6;
troshx_sos_core_DamageType.COLD = 7;
troshx_sos_core_FiringMechanism.CAPLOCK = 0;
troshx_sos_core_FiringMechanism.FIRELOCK = 1;
troshx_sos_core_FiringMechanism.FLINTLOCK = 2;
troshx_sos_core_FiringMechanism.MATCHLOCK = 3;
troshx_sos_core_FiringMechanism.NEEDLEFIRE = 4;
troshx_sos_core_FiringMechanism.SNAPLOCK = 5;
troshx_sos_core_FiringMechanism.WHEELOCK = 6;
troshx_sos_core_Weapon.REACH_HA = 1;
troshx_sos_core_Weapon.REACH_H = 2;
troshx_sos_core_Weapon.REACH_S = 3;
troshx_sos_core_Weapon.REACH_M = 4;
troshx_sos_core_Weapon.REACH_L = 5;
troshx_sos_core_Weapon.REACH_VL = 6;
troshx_sos_core_Weapon.REACH_EL = 7;
troshx_sos_core_Weapon.REACH_LL = 8;
troshx_sos_core_Ammunition.BALL = 0;
troshx_sos_core_Ammunition.BUCK_AND_BALL = 1;
troshx_sos_core_Ammunition.HEAVY_SHOT = 2;
troshx_sos_core_Ammunition.RIFLE_BALL = 3;
troshx_sos_core_Ammunition.SHOT = 4;
troshx_sos_core_Ammunition.SPIKE = 5;
troshx_sos_core_LoadingMechanism.MANUAL = 0;
troshx_sos_core_LoadingMechanism.BRASS_CATRIDGE = 1;
troshx_sos_core_LoadingMechanism.PAPER_CATRIDGE = 2;
troshx_sos_core_LoadingMechanism.PAPER_MACHE_CATRIDGE = 3;
troshx_sos_core_Money.SP_TO_GP = 0.05;
troshx_sos_core_Money.GP_TO_SP = 20;
troshx_sos_core_Money.CP_TO_SP = 0.083333333333333329;
troshx_sos_core_Money.SP_TO_CP = 12;
troshx_sos_core_Money.CP_TO_GP = 0.0041666666666666666;
troshx_sos_core_Money.GP_TO_CP = 240;
troshx_sos_core_Money.ZERO = new troshx_sos_core_Money();
troshx_sos_core_Money.TEMP = new troshx_sos_core_Money();
troshx_sos_core_Inventory.HELD_MASTER = 1;
troshx_sos_core_Inventory.HELD_OFF = 2;
troshx_sos_core_Inventory.HELD_BOTH = 3;
troshx_sos_core_Inventory.UNHELD_UNSPECIFIED = 0;
troshx_sos_core_Inventory.UNHELD_SHEATH_HOLSTER = 1;
troshx_sos_core_Inventory.UNHELD_STRAPPED_ARM = 2;
troshx_sos_core_Inventory.UNHELD_STRAPPED_SHOULDER = 3;
troshx_sos_core_Inventory.UNHELD_BACK = 4;
troshx_sos_core_Inventory.UNHELD_CONCEALED = 5;
troshx_sos_core_Inventory.UNHELD_FORCE_DISABLED = 6;
troshx_sos_core_Inventory.PREFER_UNHELD_PACKED = 1;
troshx_sos_core_Inventory.PREFER_UNHELD_DROPPED = 2;
troshx_sos_core_Inventory.PREFER_UNHELD_EQUIPPED = 4;
troshx_sos_core_Inventory.UID_COUNT = 0;
troshx_sos_core_Inventory.MONEY_CALC_CACHE = [0,0,0];
troshx_sos_core_Inventory.MONEY_REF = new troshx_sos_core_Money();
troshx_sos_core_MeleeSpecial.BRACE = 1;
troshx_sos_core_MeleeSpecial.CALVARY_SWORD = 2;
troshx_sos_core_MeleeSpecial.COMPANION_WEAPON = 4;
troshx_sos_core_MeleeSpecial.COUCHED_CHARGE = 8;
troshx_sos_core_MeleeSpecial.FLUID_THRUSTS = 16;
troshx_sos_core_MeleeSpecial.FORWARD_SWEPT = 32;
troshx_sos_core_MeleeSpecial.FREAKISHLY_LARGE = 64;
troshx_sos_core_MeleeSpecial.HAND_OFF = 128;
troshx_sos_core_MeleeSpecial.HEAVY_WEAPON = 256;
troshx_sos_core_MeleeSpecial.HOOK = 512;
troshx_sos_core_MeleeSpecial.LIGHT_BLADE = 1024;
troshx_sos_core_MeleeSpecial.PARRYING_TEETH = 2048;
troshx_sos_core_MeleeSpecial.SWINGING_SLOT = 4096;
troshx_sos_core_MeleeSpecial.THIN_BLADE = 8192;
troshx_sos_core_MeleeSpecial.THRUSTING_SLOT = 16384;
troshx_sos_core_MeleeSpecial.TIGHT_GRIP = 32768;
troshx_sos_core_MeleeSpecial.WEAPON_ATTACHMENT = 65536;
troshx_sos_core_MeleeSpecial.TOTAL_FLAGS = 17;
troshx_sos_core_MissileSpecial.BLUDGEON = 1;
troshx_sos_core_MissileSpecial.NARROW = 2;
troshx_sos_core_MissileSpecial.SHIELD_STICK = 4;
troshx_sos_core_MissileSpecial.AP_FIRST_HIT_ONLY = 8;
troshx_sos_core_MissileSpecial.CHEAT_ATTACHMENT = 16;
troshx_sos_core_MissileSpecial.TOTAL_FLAGS = 5;
troshx_sos_core_Modifier.ATTR_STR = 0;
troshx_sos_core_Modifier.ATTR_AGI = 1;
troshx_sos_core_Modifier.ATTR_END = 2;
troshx_sos_core_Modifier.ATTR_HLT = 3;
troshx_sos_core_Modifier.ATTR_WIL = 4;
troshx_sos_core_Modifier.ATTR_WIT = 5;
troshx_sos_core_Modifier.ATTR_INT = 6;
troshx_sos_core_Modifier.ATTR_PER = 7;
troshx_sos_core_Modifier.CMP_ADR = 8;
troshx_sos_core_Modifier.CMP_MOB = 9;
troshx_sos_core_Modifier.CMP_CAR = 10;
troshx_sos_core_Modifier.CMP_CHA = 11;
troshx_sos_core_Modifier.CMP_TOU = 12;
troshx_sos_core_Modifier.CP = 13;
troshx_sos_core_Modifier.REACH = 14;
troshx_sos_core_Modifier.MP = 15;
troshx_sos_core_Modifier.CAR_END = 16;
troshx_sos_core_Modifier.FATIQUE_END = 17;
troshx_sos_core_Modifier.STARTING_WEALTH = 18;
troshx_sos_core_Modifier.STARTING_MONEY = 19;
troshx_sos_core_Modifier.STARTING_GRIT = 20;
troshx_sos_core_Modifier.TOTAL_SLOTS = 21;
troshx_sos_core_Profeciency.TYPE_MELEE = 0;
troshx_sos_core_Profeciency.TYPE_RANGED = 1;
troshx_sos_core_Profeciency.MASK_ALL = 2147483647;
troshx_sos_core_Profeciency.M_1H_SWORD = 0;
troshx_sos_core_Profeciency.M_1H_BLUNT = 1;
troshx_sos_core_Profeciency.M_2H_BLUNT = 2;
troshx_sos_core_Profeciency.M_2H_SWORD = 3;
troshx_sos_core_Profeciency.M_SPEAR = 4;
troshx_sos_core_Profeciency.M_POLEARM = 5;
troshx_sos_core_Profeciency.M_DAGGER = 6;
troshx_sos_core_Profeciency.M_WRESTLING = 7;
troshx_sos_core_Profeciency.M_PUGILISM = 8;
troshx_sos_core_Profeciency.TOTAL_M = 9;
troshx_sos_core_Profeciency.R_BOW = 0;
troshx_sos_core_Profeciency.R_SLING = 1;
troshx_sos_core_Profeciency.R_CROSSBOW = 2;
troshx_sos_core_Profeciency.R_FIREARM = 3;
troshx_sos_core_Profeciency.R_THROWING = 4;
troshx_sos_core_Profeciency.TOTAL_R = 5;
troshx_sos_core_Profeciency.SEPERATOR = "_$_";
troshx_sos_core_School.MAX_LEVELS = 20;
troshx_sos_core_School.MASTERY_LEVEL = 20;
troshx_sos_core_Shield.SIZE_SMALL = 0;
troshx_sos_core_Shield.SIZE_MEDIUM = 1;
troshx_sos_core_Shield.SIZE_LARGE = 2;
troshx_sos_core_Shield.STRAP_ARM = 0;
troshx_sos_core_Shield.STRAP_SHOULDER = 1;
troshx_sos_core_Shield.POSITION_LOW = 0;
troshx_sos_core_Shield.POSITION_HIGH = 1;
troshx_sos_core_Skill.STR = 1;
troshx_sos_core_Skill.AGI = 2;
troshx_sos_core_Skill.END = 4;
troshx_sos_core_Skill.HLT = 8;
troshx_sos_core_Skill.WIP = 16;
troshx_sos_core_Skill.WIT = 32;
troshx_sos_core_Skill.INT = 64;
troshx_sos_core_Skill.PER = 128;
troshx_sos_core_Skill.CHA = 256;
troshx_sos_core_Skill.TRAINED = 1;
troshx_sos_core_Skill.TEACHER = 4;
troshx_sos_core_Skill.MASTERY = 10;
troshx_sos_core_Skill.CHARS_SPECIAL_OPEN = " (";
troshx_sos_core_Skill.CHARS_SPECIAL_CLOSE = ")";
troshx_sos_core_CustomMelee.PISTOL = 1;
troshx_sos_core_CustomMelee.DRAGON = 2;
troshx_sos_core_CustomMelee.CUSTOM_HILT = 1;
troshx_sos_core_CustomMelee.RIDICULOUSLY_SHARP = 2;
troshx_sos_core_CustomMelee.EXQUISITE_DECORATION = 4;
troshx_sos_core_CustomMelee.BIZARRE_GIMMICK = 8;
troshx_sos_core_Wound.STAUNCHED = 1;
troshx_sos_core_Wound.TREATED = 2;
troshx_sos_core_Wound.MASK_OPENWOUND = 3;
troshx_sos_core_Wound.UNIQUE_COUNT = 0;
troshx_sos_races_Races.PCP_FOR_TIERS = [1,2,4,6,8];
troshx_sos_schools_EsotericSchoolBonuses.SIMPLICITY = 1;
troshx_sos_schools_EsotericSchoolBonuses.FLOWING_WATER = 2;
troshx_sos_schools_EsotericSchoolBonuses.RAGING_FLAME = 4;
troshx_sos_schools_EsotericSchoolBonuses.BITING_WIND = 8;
troshx_sos_schools_EsotericSchoolBonuses.STOIC_EARTH = 16;
troshx_sos_schools_OfficerBonuses.PROTECT_THE_BANNER = "Protect the Banner!";
troshx_sos_schools_OfficerBonuses.RIDE_TO_RUIN = "Ride to Ruin!";
troshx_sos_sheets_CharSheet.GENDER_MALE = 0;
troshx_sos_sheets_CharSheet.GENDER_FEMALE = 1;
troshx_sos_sheets_CharSheet.VERSION = 2;
troshx_sos_sheets_CharSheet.LIQUIDATE_ASSET_BASE = 6;
troshx_sos_vue_combat_CombatViewModel.ACTING_DOLL_DECLARE = 0;
troshx_sos_vue_combat_CombatViewModel.ACTING_DOLL_DRAG_CP = 1;
troshx_sos_vue_combat_CombatViewModel.ACTING_NONE = 2;
troshx_sos_vue_combat_UIInteraction.DOWN = 1;
troshx_sos_vue_combat_UIInteraction.MOVE = 2;
troshx_sos_vue_combat_UIInteraction.TAP = 4;
troshx_sos_vue_combat_UIInteraction.HOLD = 8;
troshx_sos_vue_combat_UIInteraction.SWIPE_UP = 16;
troshx_sos_vue_combat_UIInteraction.SWIPE_RIGHT = 32;
troshx_sos_vue_combat_UIInteraction.SWIPE_DOWN = 64;
troshx_sos_vue_combat_UIInteraction.SWIPE_LEFT = 128;
troshx_sos_vue_combat_UIInteraction.SWIPE = 240;
troshx_sos_vue_combat_UIInteraction.PAN_UP = 256;
troshx_sos_vue_combat_UIInteraction.PAN_RIGHT = 512;
troshx_sos_vue_combat_UIInteraction.PAN_DOWN = 1024;
troshx_sos_vue_combat_UIInteraction.PAN_LEFT = 2048;
troshx_sos_vue_combat_UIInteraction.PAN = 3840;
troshx_sos_vue_combat_UIInteraction.HOVER = 4096;
troshx_sos_vue_combat_UIInteraction.MOVE_OVER = 8192;
troshx_sos_vue_combat_UIInteraction.CANCELED = 16384;
troshx_sos_vue_combat_UIInteraction.RELEASE = 32768;
troshx_sos_vue_combat_UIInteraction.RELEASE_OVER = 65536;
troshx_sos_vue_combat_UIInteraction.MASK_CANCELED_OR_RELEASE = 49152;
troshx_sos_vue_combat_UIInteraction.SAMPLE_PT = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
troshx_sos_vue_combat_UIInteraction.SAMPLE_PT2 = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
troshx_sos_vue_combat_UIInteraction.SAMPLE_PT_A = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
troshx_sos_vue_combat_UIInteraction.SAMPLE_PT_B = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
troshx_sos_vue_combat_components_DollView.PREGEN_SELECT_OPPONENT = 4;
troshx_sos_vue_combat_components_DollView.PREGEN_SELECT_SELF = 1;
troshx_sos_vue_tests_layout_LayoutItemTest.TEST_POS = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
troshx_sos_vue_tests_layout_LayoutItemTest.TEST_SCALE = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
troshx_tros_ManueverSheet.offensiveMelee = troshx_tros_ManueverSheet.setAsOffensiveList([new troshx_core_Manuever("cut","Cut")._dmgType(1)._atkTypes(1),new troshx_core_Manuever("cut2","Greater Cut",1)._dmgType(1)._atkTypes(1)._customDamage(troshx_tros_ManueverSheet.damageMod_add1),new troshx_core_Manuever("bash","Bash")._dmgType(3)._atkTypes(1),new troshx_core_Manuever("bash2","Greater Bash",1)._dmgType(3)._atkTypes(1)._customDamage(troshx_tros_ManueverSheet.damageMod_add1),new troshx_core_Manuever("beat","Beat")._lev(4)._atkTypes(1)._customRequire()._customResolve(),new troshx_core_Manuever("bindstrike","Bind and Strike")._customRequire()._customResolve(),new troshx_core_Manuever("thrust","Thrust")._customReflex()._dmgType(2)._atkTypes(2),new troshx_core_Manuever("spike","Spike")._dmgType(3)._atkTypes(2),new troshx_core_Manuever("spike2","Greater Spike",1)._dmgType(3)._atkTypes(2)._customDamage(troshx_tros_ManueverSheet.damageMod_add1),new troshx_core_Manuever("punch","Punch")._tn(5)._range(1)._dmgType(3)._customDamage(),new troshx_core_Manuever("kick","Kick")._dmgType(3)._tn(7)._customDamage()._range(2)._regions(0)._rangeMin(1),new troshx_core_Manuever("disarm","Disarm",1)._lev(4)._customRequire()._atkTypes(1)._customResolve(),new troshx_core_Manuever("doubleattack","Double Attack")._customRequire()._customSplit(),new troshx_core_Manuever("drawcut","Draw Cut")._lev(2)._atkTypes(1)._dmgType(1)._customDamage()._customRange()._customRequire(),new troshx_core_Manuever("evasiveattack","Evasive Attack")._lev(6)._atkTypes(1)._customRequire()._customPreResolve(),new troshx_core_Manuever("feintandthrust","Feint and Thrust")._lev(3)._atkTypes(2)._customPreResolve()._spamPenalize(1,true),new troshx_core_Manuever("feintandcut","Feint and Cut")._lev(5)._atkTypes(1)._customPreResolve()._spamPenalize(1,true),new troshx_core_Manuever("grapple","Grapple")._tn(5)._customResolve(),new troshx_core_Manuever("headbutt","Head Butt")._tn(6)._range(1)._regions(0)._dmgType(3)._customDamage(),new troshx_core_Manuever("hook","Hook")._customResolve()._regions(0),new troshx_core_Manuever("masterstrike","Master Strike")._lev(15)._customRequire()._customSplit(),new troshx_core_Manuever("murderstroke","Murder Stroke")._lev(5)._tn(6)._range(1)._customRequire()._regions(0)._dmgType(3)._atkTypes(1)._customPreResolve()._customDamage(),new troshx_core_Manuever("pommelbash","Pommel Bash")._lev(5)._tn(7)._range(1)._customRequire()._dmgType(3)._customDamage(),new troshx_core_Manuever("quickdraw","Quick Draw")._lev(6)._customResolve(),new troshx_core_Manuever("blockstrike","Block & Strike")._customRequire()._customSplit()._stanceModifier(0),new troshx_core_Manuever("stopshort","Stop Short")._lev(3)._customResolve()._spamPenalize(1),new troshx_core_Manuever("toss","Toss")._customRequire()._tn(7)._customResolve(),new troshx_core_Manuever("twitching","Twitching")._lev(8)._customSplit()._customResolve()]);
troshx_tros_ManueverSheet.defensiveMelee = troshx_tros_ManueverSheet.setAsDefensiveList([new troshx_core_Manuever("block","Block")._atkTypes(1),new troshx_core_Manuever("parry","Parry")._atkTypes(2),new troshx_core_Manuever("fullevade","Full Evasion")._tn(4)._stanceModifier(0)._evasive(30),new troshx_core_Manuever("partialevade","Partial Evasion")._tn(7)._evasive(2),new troshx_core_Manuever("duckweave","Duck & Weave")._tn(9)._customResolve()._evasive(0),new troshx_core_Manuever("blockopenstrike","Block Open and Strike")._lev(6)._atkTypes(1)._customResolve()._stanceModifier(0),new troshx_core_Manuever("counter","Counter")._atkTypes(2)._customResolve(),new troshx_core_Manuever("disarm","Disarm",1)._lev(4)._atkTypes(2)._customResolve(),new troshx_core_Manuever("expulsion","Expulsion")._lev(5)._atkTypes(2)._customResolve(),new troshx_core_Manuever("grapple","Grapple")._tn(5)._customResolve(),new troshx_core_Manuever("masterstrike","Master Strike")._lev(15)._customRequire()._customSplit(),new troshx_core_Manuever("overrun","Overrun")._lev(12)._tn(7)._customSplit(),new troshx_core_Manuever("quickdraw","Quick Draw")._lev(6)._atkTypes(2)._customResolve(),new troshx_core_Manuever("rota","Rota")._customRequire()._lev(3)._atkTypes(2)._customResolve()]);
troshx_tros_ManueverSheet.offensiveMeleeHash = troshx_tros_ManueverSheet.createHashIndex(troshx_tros_ManueverSheet.offensiveMelee);
troshx_tros_ManueverSheet.defensiveMeleeHash = troshx_tros_ManueverSheet.createHashIndex(troshx_tros_ManueverSheet.defensiveMelee);
troshx_tros_ProfeciencySheet.LIST = [new troshx_core_Profeciency("swordshield","Sword and Shield",troshx_tros_ManueverSheet.createOffensiveMeleeMaskFor(["bindstrike","cut","cut2","feintcut","feintthrust","blockstrike","thrust","thrust2","twitching","masterstrike","disarm"]),troshx_tros_ManueverSheet.createDefensiveMeleeMaskFor(["block","blockopenstrike","counter","parry","disarm","masterstrike","overrun","parry","rota"]),{ "blockopenstrike" : 2, "masterstrike" : 6},{ "blockopenstrike" : 2, "counter" : [3,2], "disarm" : 3, "masterstrike" : 6, "overrun" : 4, "parry" : [1,0], "rota" : 2},{ "caserapiers" : 4, "cutthrust" : 2, "dagger" : 2, "doppelhander" : 4, "greatlongsword" : 2, "massweaponshield" : 1, "polearms" : 4, "poleaxe" : 4, "pugilism" : 4, "rapier" : 4, "wrestling" : 4}),new troshx_core_Profeciency("cutthrust","Cut and Thrust",troshx_tros_ManueverSheet.createOffensiveMeleeMaskFor(["beat","bindstrike","cut","disarm","doubleattack","drawcut","feint","masterstrike","quickdraw","blockstrike","stopshort","thrust","toss","twitch"]),troshx_tros_ManueverSheet.createDefensiveMeleeMaskFor(["block","counter","disarm","expulsion","grapple","masterstrike","overrun","parry","rota"]),{ "disarm" : 1, "masterstrike" : 6, "quickdraw" : 2, "twitch" : 2},{ "counter" : 2, "disarm" : 3, "expulsion" : 2, "grapple" : 2, "masterstrike" : 6, "overrun" : 3},{ "caserapiers" : 3, "dagger" : 2, "doppelhander" : 4, "greatlongsword" : 3, "massweaponshield" : 2, "polearms" : 3, "poleaxe" : 4, "pugilism" : 2, "rapier" : 2, "swordshield" : 2, "wrestling" : 3}),new troshx_core_Profeciency("rapier","Rapier",troshx_tros_ManueverSheet.createOffensiveMeleeMaskFor(["beat","bindstrike","disarm","doubleattack","feintthrust","masterstrike","blockstrike","stopshort","thrust","toss"]),troshx_tros_ManueverSheet.createDefensiveMeleeMaskFor(["block","counter","disarm","expulsion","grapple","masterstrike","overrun","parry"]),{ "disarm" : 1, "feintthrust" : 1, "masterstrike" : 6},{ "counter" : 3, "disarm" : 3, "expulsion" : 2, "grapple" : 2, "masterstrike" : 6, "overrun" : 3, "parry" : 0},{ "caserapiers" : 1, "cutthrust" : 2, "dagger" : 2, "doppelhander" : 4, "greatlongsword" : 4, "massweaponshield" : 4, "polearms" : 3, "poleaxe" : 4, "pugilism" : 2, "swordshield" : 3, "wrestling" : 3}),new troshx_core_Profeciency("pugilism","Pugilism",troshx_tros_ManueverSheet.createOffensiveMeleeMaskFor(["disarm","grapple","kick","punch"]),troshx_tros_ManueverSheet.createDefensiveMeleeMaskFor(["disarm","grapple","parry"]),{ "disarm" : 2, "grapple" : [2,4], "kick" : 1},{ "disarm" : 4, "grapple" : 2},{ "caserapiers" : 4, "cutthrust" : 4, "dagger" : 1, "doppelhander" : 4, "greatlongsword" : 4, "massweaponshield" : 3, "polearms" : 4, "poleaxe" : 4, "rapier" : 3, "swordshield" : 4, "wrestling" : 1})];
troshx_tros_ProfeciencySheet.listHashIndexer = troshx_tros_ProfeciencySheet.createHashIndex(troshx_tros_ProfeciencySheet.LIST);
troshx_tros_WeaponSheet.LIST = [troshx_core_Weapon.createDyn("Short Sword",["cutthrust","swordshield"],{ "range" : 1, "atn" : 7, "atn2" : 5, "dtn" : 7, "damage" : -1, "damage2" : 1}),troshx_core_Weapon.createDyn("Kick",["pugilism"],{ "range" : 0, "atn" : 7, "dtn" : 8, "shieldLimit" : 1, "damage" : -1, "blunt" : true}),troshx_core_Weapon.createDyn("Punch",["pugilism"],{ "range" : 0, "atn" : 5, "dtn" : 6, "shieldLimit" : 1, "damage" : -2, "blunt" : true}),troshx_core_Weapon.createDyn("Gladius",["swordshield"],{ "range" : 1, "atn" : 6, "atn2" : 6, "dtn" : 7, "damage" : 0, "damage2" : 1, "drawCutModifier" : 0}),troshx_core_Weapon.createDyn("Light Mace",["mace"],{ "range" : 1, "atn" : 6, "atn2" : 6, "dtn" : 7, "damage" : 1, "damage2" : 0, "drawCutModifier" : 0}),troshx_core_Weapon.createDyn("Blunted Sword",["swordshield","cutthrust"],{ "range" : 2, "atn" : 6, "atn2" : 6, "dtn" : 6, "damage" : 0, "damage2" : 0, "drawCutModifier" : 0}),troshx_core_Weapon.createDyn("Arming Sword",["swordshield","cutthrust"],{ "range" : 2, "atn" : 6, "atn2" : 7, "dtn" : 6, "damage" : 1, "damage2" : 0, "drawCutModifier" : 0}),troshx_core_Weapon.createDyn("Rapier",["rapier","caserapiers"],{ "range" : 3, "atn" : 7, "atn2" : 5, "dtn" : 8, "dtnT" : 6, "damage" : -3, "damage2" : 2, "drawCutModifier" : 1}),troshx_core_Weapon.createDyn("Hand Shield",["swordshield","massweaponshield"],{ "shield" : true, "dtn" : 7, "dtn2" : 9}),troshx_core_Weapon.createDyn("Small Shield",["swordshield","massweaponshield"],{ "shield" : true, "dtn" : 6, "dtn2" : 8}),troshx_core_Weapon.createDyn("Medium Shield",["swordshield","massweaponshield"],{ "shield" : true, "dtn" : 5, "dtn2" : 7, "cpPenalty" : 0.5, "movePenalty" : 0.5}),troshx_core_Weapon.createDyn("Large Shield",["swordshield","massweaponshield"],{ "shield" : true, "dtn" : 5, "dtn2" : 6, "cpPenalty" : 0.5, "movePenalty" : 1})];
troshx_tros_WeaponSheet.HASH = troshx_tros_WeaponSheet.createHashLookupViaName(troshx_tros_WeaponSheet.LIST);
troshx_util_DiceRoller.NUM_ONES = 0;
troshx_util_DiceRoller.LAST_ROLL_SUCCESSES = 0;
troshx_util_DiceRoller.ROLL_RESULT_BOTCH = -2;
troshx_util_DiceRoller.ROLL_RESULT_DRAW = 0;
troshx_util_DiceRoller.ROLL_RESULT_FAILED = -1;
troshx_util_layout_BorderConstraint.SIDE_TOP = 0;
troshx_util_layout_BorderConstraint.SIDE_RIGHT = 1;
troshx_util_layout_BorderConstraint.SIDE_BOTTOM = 2;
troshx_util_layout_BorderConstraint.SIDE_LEFT = 3;
troshx_util_layout_LayoutItem.SHAPE_RECT = 0;
troshx_util_layout_LayoutItem.SHAPE_CIRCLE = 1;
troshx_util_layout_LayoutItem.SHAPE_POLYGON = 2;
troshx_util_layout_LayoutItem.SCRATCH = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
troshx_sos_vue_tests_TestUI.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
